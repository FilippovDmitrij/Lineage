{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Arenadata Catalog Apis",
    "description" : "---\ntitle: APIs\nslug: /main-concepts/metadata-standard/apis\n---\n\n# APIs\n\nOpenMetadata supports REST APIs for getting data and in and out of the metadata service. APIs are built using general\nbest practices of REST API design. We take a schema-first approach by defining Types and Entities in JSON Schema. We\nimplement APIs based on these schemas.\n\n## Overview\n\n### URI\n\nFollowing REST API conventions are followed for Resource URIs:\n- Operations for an entity are available through the Resource URI as a collection `.../api/<version>/entities`. \n- Plural of the entity name is used as the collection name - example `.../api/v1/users`.\n- Trailing forward slash is not used in the endpoint URI. Example use `.../api/v1/databases` instead of `.../api/v1/databases/`.\n- Resource URI for an entity instance by the entity id is `.../api/v1/entities/{id}`. \n- Resource URI for an entity instance by name is `.../api/v1/entities/name/{name}`.\n\n### Resource Representation\n\n- The REST API calls return a response with JSON `Content-Type` and `Content-Length` that includes the length of the response.\n- All responses include the Resource ID field even though the id was provided in the request to simplify the consumption \n  of the response at the client.\n- Entity names and field names use `camelCase` per Javascript naming convention.\n- All resources include an attribute `href` with Resource URI. All relationship fields of an entity will also \n  include `href` links to the related resource for easy access.\n- Unknown fields sent by the client in API requests are not ignored to ensure the data sent by the client is not dropped \n  at the server without the user being aware of it.\n\n## API Organization\n\nYou can find the swagger documentation [here](/swagger.html). In a nutshell:\n\n**Data Asset APIs** - support operations related to data asset entities.\n- `.../api/v1/databases`\n- `...api/v1/tables`\n- `.../api/v1/metrics`\n- `.../api/v1/dashboards`\n- `.../api/v1/reports`\n- `.../api/v1/pipelines`\n- `.../api/v1/topics`\n\n**Service APIs** - support operations related to services from which metadata is collected:\n- `.../api/v1/services` is the collection of all service resources.\n- `.../api/v1/services/databaseService` - APIs related to database services. This includes Transactional databases - MySQL, Postgres, MSSQL, Oracle, and Data Warehouses - Apache Hive BigQuery, Redshift, and Snowflake.\n- `.../api/v1/services/dashboardService` - APIs related to Dashboard Services. This includes Looker, Superset, and Tableau.\n- `.../api/v1/services/messagingService` - APIs related to Messaging Services. This includes Apache Kafka, Redpanda, - Kinesis, and others.\n\n**Teams & Users APIs**\n- `.../api/v1/teams` - APIs related to team entities\n- `.../api/v1/users` - APIs related to user entities\n\n**Search & Suggest APIs** - support search and suggest APIs:\n- `.../api/v1/search` - collection for search and suggest APIs\n- `.../api/v1/search/query` - search entities using query text\n- `.../api/v1/search/suggest` - get suggested entities used for auto-completion\n\n**Other APIs**\n- `.../api/v1/tags` for APIs related to Classification and Tag entities\n- `../api/v1/feeds` for APIs related to Threads and Posts entities\n- `.../api/v1/usage` for reporting usage information of entities",
    "contact" : {
      "name" : "Arenadata Catalog",
      "url" : "https://arenadc.io"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "version" : "0.8.1.2"
  },
  "servers" : [ {
    "url" : "/api",
    "description" : "Current Host"
  }, {
    "url" : "http://localhost:8585/api",
    "description" : "Endpoint URL"
  } ],
  "tags" : [ {
    "name" : "Bots",
    "description" : "A `Bot` automates tasks, such as ingesting metadata, and running data quality It performs this task as a special user in the system."
  }, {
    "name" : "Charts",
    "description" : "A `Chart` are computed from data presents data visually and can be part of `Dashboards`."
  }, {
    "name" : "Diff",
    "description" : "Различия в двух версиях объекта."
  }, {
    "name" : "recordCounters",
    "description" : "computing count of records"
  }, {
    "name" : "Dashboards",
    "description" : "Dashboards are computed from data and visually present data, metrics, and KPIs. They are typically updated in real-time and allow interactive data exploration."
  }, {
    "name" : "Databases",
    "description" : "A `Database` also referred to as `Database Catalog` is a collection of schemas."
  }, {
    "name" : "Database Schemas",
    "description" : "A `Database Schema` is collection of tables, views, stored procedures, and other database objects."
  }, {
    "name" : "Stored Procedures",
    "description" : "A `StoredProcedure` entity that contains the set of code statements with an assigned name ."
  }, {
    "name" : "Tables",
    "description" : "`Table` organizes data in rows and columns and is defined in a `Database Schema`."
  }, {
    "name" : "Dashboard Data Models",
    "description" : "`Data Models` are the schemas used to build dashboards, charts, or other data assets."
  }, {
    "name" : "DataProducts",
    "description" : "A `Data Product` or `Data as a Product` is a logical unit that contains all components to process and store domain data for analytical or data-intensive use cases made available to data consumers."
  }, {
    "name" : "Domains",
    "description" : "A `Domain` is a bounded context that is aligned with a Business Unit or a function within an organization."
  }, {
    "name" : "Test Cases",
    "description" : "Test case is a test definition to capture data quality tests against tables, columns, and other data assets."
  }, {
    "name" : "Test Definitions",
    "description" : "`Test Definition` is a definition of a type of test using which test cases are created that run against data to capture data quality."
  }, {
    "name" : "Test Suites",
    "description" : "`TestSuite` is a set of test cases grouped together to capture data quality."
  }, {
    "name" : "Events",
    "description" : "The `Events` are changes to metadata and are sent when entities are created, modified, or updated. External systems can subscribe to events using event subscription API over Webhooks, Slack, or Microsoft Teams."
  }, {
    "name" : "Glossaries",
    "description" : "A `Glossary` is collection of hierarchical `GlossaryTerms`."
  }, {
    "name" : "IDP",
    "description" : "A resource that provides integration points for external identity service providers"
  }, {
    "name" : "Lineage",
    "description" : "The `Lineage` for a given data asset, has information of the input datasets used and the ETL pipeline that created it."
  }, {
    "name" : "Metrics (beta)",
    "description" : "`Metrics` are measurements computed from data such as `Monthly Active Users`. Some of the metrics that measures used to determine performance against an objective are called KPIs or Key Performance Indicators, such as `User Retention`."
  }, {
    "name" : "ML Models",
    "description" : "`Machine Learning Models` are algorithms trained on data to find patterns or make predictions."
  }, {
    "name" : "Object locking",
    "description" : "Позволяет заблокировать объект на определённое время. Во время блокировки другие пользователи не могут редактировать/удалять данный объект."
  }, {
    "name" : "Permissions",
    "description" : "APIs related to getting access permission for a User."
  }, {
    "name" : "Pipelines",
    "description" : "A `Pipeline` enables the flow of data from source to destination through a series of processing steps. ETL is a type of pipeline where the series of steps Extract, Transform and Load the data."
  }, {
    "name" : "Policies",
    "description" : "A `Policy` defines control that needs to be applied across different Data Entities."
  }, {
    "name" : "Processes",
    "description" : "Managing the execution of processes and obtaining information about all processes."
  }, {
    "name" : "Queries",
    "description" : "A `Query` entity represents a SQL query associated with data assets it is run against."
  }, {
    "name" : "Repair",
    "description" : "Correction of some errors in semi-automatic mode"
  }, {
    "name" : "Reports (beta)",
    "description" : "`Reports` are static information computed from data periodically that includes data in text, table, and visual form."
  }, {
    "name" : "Search",
    "description" : "APIs related to search and suggest."
  }, {
    "name" : "Politic condition",
    "description" : "API for managing politic condition."
  }, {
    "name" : "Politics",
    "description" : "A `Politics` defines control that needs to be applied across different Data Entities."
  }, {
    "name" : "Database Services",
    "description" : "`Database Service` is a service such as MySQL, BigQuery, Redshift, Postgres, or Snowflake. Alternative terms such as Database Cluster, Database Server instance are also used for database service."
  }, {
    "name" : "Metadata Services",
    "description" : "APIs related to creating and managing other Metadata Services that OpenMetadata integrates with such as `Apache Atlas`, `Amundsen`, etc."
  }, {
    "name" : "Object Store Services",
    "description" : "APIs related `Object Store Service` entities, such as S3, GCS or AZURE."
  }, {
    "name" : "AdcSettings",
    "description" : "Collection of application's settings"
  }, {
    "name" : "Containers",
    "description" : "A Container is an abstraction for any path(including the top level eg. bucket in S3) storing data in an Object store such as S3, GCP, Azure. It maps a tree-like structure, where each Container can have a parent and a list of sub-folders, and it can be structured - where it contains structured data, or unstructured where no schema for its data is defined."
  }, {
    "name" : "Classifications",
    "description" : "These APIs are related to `Classification` and `Tags`. A `Classification` entity contains hierarchical terms called `Tags` used for categorizing and classifying data assets and other entities."
  }, {
    "name" : "TagUsage",
    "description" : "Tag usage api"
  }, {
    "name" : "Roles",
    "description" : "A `Role` is a collection of `Policies` that provides access control. A user or a team can be assigned one or multiple roles that provide privileges to a user and members of a team to perform the job function."
  }, {
    "name" : "Teams",
    "description" : "A `Team` is a group of zero or more users and/or other teams. Teams can own zero or more data assets. Hierarchical teams are supported `Organization` -> `BusinessUnit` -> `Division` -> `Department`."
  }, {
    "name" : "Users",
    "description" : "A `User` represents a user of OpenMetadata. A user can be part of 0 or more teams. A special type of user called Bot is used for automation. A user can be an owner of zero or more data assets. A user can also follow zero or more data assets."
  }, {
    "name" : "Topics",
    "description" : "A `Topic` is a feed or an event stream in a `Messaging Service` into which publishers publish messages and consumed by consumers."
  }, {
    "name" : "AdcRelationships",
    "description" : "Work with relationships and references"
  }, {
    "name" : "Metadata",
    "description" : "These APIs are for adding new `Types` to OpenMetadata and use those `Types` to extend the metadata of an entity with custom properties."
  }, {
    "name" : "Usage",
    "description" : "APIs related usage of data assets."
  }, {
    "name" : "System",
    "description" : "APIs related to System configuration and settings."
  }, {
    "name" : "ObjectVersion",
    "description" : "Returning object versions"
  } ],
  "paths" : {
    "/v1/adc-workflow/entity-task/{id}" : {
      "get" : {
        "tags" : [ "workflow" ],
        "summary" : "get task by ID",
        "operationId" : "getTask",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "User Task id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityUserTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/glossaryTerm/configurations" : {
      "get" : {
        "tags" : [ "glossaryTermWorkflowConfigs" ],
        "summary" : "List GlossaryTermWorkflowConfigs",
        "description" : "Get a list of glossaryTermWorkflowConfigs. Use `fields` parameter to get only necessary fields.  Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listGlossaryTermWorkflowConfigs",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "id,name,workflowScenario,triggers,taskConfigs,enabled"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number glossaryTermWorkflowConfigs returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of glossaryTermWorkflowConfigs before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of glossaryTermWorkflowConfigs after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of glossaryTermWorkflowConfigs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTermWorkflowConfigList"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create configuration for glossary term workflow",
        "description" : "Create configuration for glossary term workflow",
        "operationId" : "createConfiguration",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateGlossaryTermWorkflowConfig"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The configuration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTermWorkflowConfig"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/adc-workflow/glossaryTerm/configurations/mapped" : {
      "get" : {
        "tags" : [ "glossaryTermWorkflowConfigs" ],
        "summary" : "List GlossaryTermWorkflowConfigs",
        "description" : "Get a list of glossaryTermWorkflowConfigs. Use `fields` parameter to get only necessary fields.  Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listGlossaryTermWorkflowConfigs_1",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number glossaryTermWorkflowConfigs returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of glossaryTermWorkflowConfigs before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of glossaryTermWorkflowConfigs after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of glossaryTermWorkflowConfigs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTermWorkflowConfigList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/glossaryTerm/configurations/name/{name}" : {
      "get" : {
        "summary" : "Get a by name",
        "description" : "Get by `name`.",
        "operationId" : "getGlossaryTermWorkflowConfigByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "id,name,workflowScenario,triggers,taskConfigs,enabled"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTermWorkflowConfig"
                }
              }
            }
          },
          "404" : {
            "description" : "GlossaryTermWorkflowConfig for instance {id} is not found"
          }
        }
      }
    },
    "/v1/adc-workflow/glossaryTerm/configurations/triggersCheck" : {
      "post" : {
        "summary" : "Return glossaryTermWorkflowConfigs that contains at least one trigger from payload",
        "description" : "Return glossaryTermWorkflowConfigs that contains at least one trigger from payload",
        "operationId" : "triggersCheck",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "format" : "uuid"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The configuration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "format" : "uuid"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/adc-workflow/glossaryTerm/configurations/{id}" : {
      "get" : {
        "tags" : [ "glossaryTermWorkflowConfigs" ],
        "summary" : "Get a configuration",
        "description" : "Get a configuration by `id`.",
        "operationId" : "getConfigurationByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "id,name,workflowScenario,triggers,taskConfigs,enabled"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTermWorkflowConfig"
                }
              }
            }
          },
          "404" : {
            "description" : "Configuration for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "glossaryTermWorkflowConfigs" ],
        "summary" : "Delete a Configuration",
        "description" : "Delete a configuration by `id`.",
        "operationId" : "deleteConfiguration",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Configuration Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "configuration for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "GlossaryTermWorkflowConfigs" ],
        "summary" : "Update a configuration",
        "description" : "Update an existing configuration using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchConfiguration",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/glossaryTerm/configurations/{id}/versions" : {
      "get" : {
        "tags" : [ "metadata" ],
        "summary" : "List entity directive's verions",
        "description" : "Get a list of all the versions of a entity addition directive `id`",
        "operationId" : "listAllGlossaryTermWorkflowConfigVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "directive Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of directive's versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/glossaryTerm/configurations/{id}/versions/{version}" : {
      "get" : {
        "summary" : "Get a version of GlossaryTermWorkflowConfig",
        "description" : "Get a version of GlossaryTermWorkflowConfig by given `id`",
        "operationId" : "getSpecificGlossaryTermWorkflowConfigVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "GlossaryTermWorkflowConfig Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "GlossaryTermWorkflowConfig version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GlossaryTermWorkflowConfig",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTermWorkflowConfig"
                }
              }
            }
          },
          "404" : {
            "description" : "GlossaryTermWorkflowConfig for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/adc-workflow/glossaryTerm/triggers" : {
      "get" : {
        "summary" : "List triggers",
        "description" : "List triggers",
        "operationId" : "listGlossaryTermWorkflowTriggers",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "glossary,adcSubjectArea,adcGlossaryTermType,triggerEvent"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number users returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of users before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of users after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTermWorkflowTriggerList"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create GlossaryTermWorkflowTrigger",
        "description" : "Create GlossaryTermWorkflowTrigger",
        "operationId" : "createGlossaryTermWorkflowTrigger",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateGlossaryTermWorkflowTrigger"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "GlossaryTermWorkflowTrigger",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTermWorkflowTrigger"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/adc-workflow/glossaryTerm/triggers/name/{name}" : {
      "get" : {
        "summary" : "Get GlossaryTermWorkflowTrigger by name",
        "description" : "Get GlossaryTermWorkflowTrigger by `name`.",
        "operationId" : "getGlossaryTermWorkflowTriggerByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "glossary,adcSubjectArea,adcGlossaryTermType,triggerEvent"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GlossaryTermWorkflowTrigger",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTermWorkflowTrigger"
                }
              }
            }
          },
          "404" : {
            "description" : "GlossaryTermWorkflowTrigger for {name} is not found"
          }
        }
      }
    },
    "/v1/adc-workflow/glossaryTerm/triggers/{id}" : {
      "get" : {
        "summary" : "Get GlossaryTermWorkflowTrigger by id",
        "description" : "Get GlossaryTermWorkflowTrigger by id",
        "operationId" : "getGlossaryTermWorkflowTriggerByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "glossary,adcSubjectArea,adcGlossaryTermType,triggerEvent"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GlossaryTermWorkflowTrigger",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTermWorkflowTrigger"
                }
              }
            }
          },
          "404" : {
            "description" : "GlossaryTermWorkflowTrigger {id} is not found"
          }
        }
      },
      "delete" : {
        "summary" : "Delete GlossaryTermWorkflowTrigger",
        "description" : "Delete GlossaryTermWorkflowTrigger",
        "operationId" : "deleteGlossaryTermWorkflowTrigger",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "User Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "User for instance {id} is not found"
          }
        }
      }
    },
    "/v1/adc-workflow/glossaryTerm/triggers/{id}/versions" : {
      "get" : {
        "tags" : [ "metadata" ],
        "summary" : "List entity directive's verions",
        "description" : "Get a list of all the versions of a entity addition directive `id`",
        "operationId" : "listAllGlossaryTermWorkflowTriggerVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "directive Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of directive's versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/glossaryTerm/triggers/{id}/versions/{version}" : {
      "get" : {
        "summary" : "Get a version of GlossaryTermWorkflowTrigger",
        "description" : "Get a version of GlossaryTermWorkflowTrigger by given `id`",
        "operationId" : "getSpecificGlossaryTermWorkflowTriggerVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "GlossaryTermWorkflowTrigger Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "GlossaryTermWorkflowTrigger version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "GlossaryTermWorkflowTrigger",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTermWorkflowTrigger"
                }
              }
            }
          },
          "404" : {
            "description" : "GlossaryTermWorkflowTrigger for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/adc-workflow/groupApproval/{entityType}/delete" : {
      "post" : {
        "tags" : [ "workflowScenario" ],
        "summary" : "Group approval of the deleted entities in wms",
        "description" : "Group approval of the deleted entities in wms. Return map contain only UUIDs with errors.",
        "operationId" : "groupApprovalDelete",
        "parameters" : [ {
          "name" : "entityType",
          "in" : "path",
          "description" : "Type of entity",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StartWorkflowParams"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "GroupApprovalResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupApprovalResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/adc-workflow/groupApproval/{entityType}/update" : {
      "post" : {
        "tags" : [ "workflowScenario" ],
        "summary" : "Group approval of the updated entities in wms",
        "description" : "Group approval of the updated entities in wms. Return map contain only UUIDs with errors.",
        "operationId" : "groupApprovalUpdate",
        "parameters" : [ {
          "name" : "entityType",
          "in" : "path",
          "description" : "Type of entity",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StartWorkflowParams"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "GroupApprovalResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupApprovalResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/adc-workflow/history/{entityId}" : {
      "get" : {
        "tags" : [ "workflowUserTaskHistory" ],
        "summary" : "Get history for entity version by entity ID",
        "operationId" : "getHistory",
        "parameters" : [ {
          "name" : "entityId",
          "in" : "path",
          "description" : "Entity ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entityVersion",
          "in" : "query",
          "description" : "Entity version",
          "schema" : {
            "type" : "number",
            "format" : "double"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/instances" : {
      "get" : {
        "tags" : [ "workflow" ],
        "summary" : "Get list of WorkflowInstance items",
        "description" : "Get a list of glossaries. Use `fields` parameter to get only necessary fields.  Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "findAll",
        "parameters" : [ {
          "name" : "from",
          "in" : "query",
          "description" : "Pagination offset",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Pagination limit",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 100
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of WorkflowInstance items",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WorkflowInstanceList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/instances/checkTask/{status}" : {
      "get" : {
        "tags" : [ "workflow" ],
        "summary" : "Get a tasks of WorkflowInstance with 'status'",
        "description" : "Get a tasks of WorkflowInstance with `status`.",
        "operationId" : "findByStatus",
        "parameters" : [ {
          "name" : "status",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The WorkflowTasks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WorkflowUserTaskDto"
                }
              }
            }
          },
          "404" : {
            "description" : "WorkflowTasks for WorkflowInstance with status {id} is not found"
          }
        }
      }
    },
    "/v1/adc-workflow/instances/getTaskDetails/{id}" : {
      "get" : {
        "tags" : [ "workflow" ],
        "summary" : "Get a task details by 'id'",
        "description" : "Get a task details by 'id'",
        "operationId" : "getTaskDetails",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The WorkflowUserTaskExDto",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WorkflowUserTaskDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Task with {id} is not found"
          }
        }
      }
    },
    "/v1/adc-workflow/instances/sync" : {
      "post" : {
        "summary" : "Принудительно синхронизировать состояние с WMS ",
        "operationId" : "syncLastWorkflowInstancesAndTasks",
        "parameters" : [ {
          "name" : "duration",
          "in" : "query",
          "description" : "Синхронизировать состояние за последние 'duration'; формат - ISO 8601 Duration",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/instances/{id}" : {
      "get" : {
        "tags" : [ "workflow" ],
        "summary" : "Get a WorkflowInstance",
        "description" : "Get a WorkflowInstance by `id`.",
        "operationId" : "findById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The WorkflowInstance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WorkflowInstance"
                }
              }
            }
          },
          "404" : {
            "description" : "WorkflowInstance for instance {id} is not found"
          }
        }
      }
    },
    "/v1/adc-workflow/scenarios" : {
      "get" : {
        "tags" : [ "workflowScenario" ],
        "summary" : "scenarios find all",
        "operationId" : "findAll_1",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "workflowScenario" ],
        "summary" : "Deploy scenario to wms",
        "description" : "Deploy scenario to wms",
        "operationId" : "deploy",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "file" : {
                    "$ref" : "#/components/schemas/FormDataContentDisposition"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "WorkflowScenario",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WorkflowScenario"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/adc-workflow/scenarios/{id}" : {
      "get" : {
        "tags" : [ "workflowScenario" ],
        "summary" : "scenarios find by Id",
        "operationId" : "findById_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "workflowScenario" ],
        "summary" : "Soft delete workflow scenario by id",
        "operationId" : "deleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/scenarios/{id}/download" : {
      "get" : {
        "tags" : [ "workflowScenario" ],
        "summary" : "download workflow scenario file by Id",
        "operationId" : "downloadById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "WorkflowScenario file",
            "content" : {
              "text/plain" : { }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/v1/adc-workflow/user-tasks" : {
      "get" : {
        "tags" : [ "workflow" ],
        "summary" : "ADC Get user task list",
        "description" : "ADC Get user task list",
        "operationId" : "getUserTaskList",
        "parameters" : [ {
          "name" : "userAndTeamNames",
          "in" : "query",
          "description" : "UserTask assignee list as comma separated values",
          "schema" : {
            "type" : "string",
            "example" : "user1,user2,team1"
          }
        }, {
          "name" : "workflowInstanceIds",
          "in" : "query",
          "description" : "Workflow Instance Id list as comma separated values",
          "schema" : {
            "type" : "string",
            "example" : "id1,id2,id3"
          }
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Pagination offset",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Pagination limit",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/WorkflowUserTaskResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/user-tasks/assigned-to-me" : {
      "post" : {
        "tags" : [ "workflow" ],
        "summary" : "Получить список назначенных на пользователя задач",
        "description" : "Получить список назначенных на пользователя задач",
        "operationId" : "getUserTasksAssignedToMe",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WorkflowUserTaskAssignedToMeListRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/WorkflowUserTaskPersonalView"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/user-tasks/created-by-me" : {
      "post" : {
        "tags" : [ "workflow" ],
        "summary" : "Получить список созданных пользователем задач",
        "description" : "Получить список назначенных на пользователя задач",
        "operationId" : "getUserTasksCreatedByMe",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WorkflowUserTaskCreatedByMeListRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/WorkflowUserTaskPersonalView"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/user-tasks/role/{id}/claim" : {
      "post" : {
        "tags" : [ "workflow" ],
        "summary" : "claim user task",
        "operationId" : "claimUserTask",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "User Task id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WorkflowUserTask"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/user-tasks/{id}/complete" : {
      "post" : {
        "tags" : [ "workflow" ],
        "summary" : "complete user task",
        "operationId" : "completeUserTask",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "User Task id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/{id}/cancel" : {
      "post" : {
        "tags" : [ "workflow" ],
        "summary" : "Прервать процесс согласования",
        "operationId" : "cancel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "User Task id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/adc-workflow/{taskId}/assign/{userId}" : {
      "put" : {
        "tags" : [ "workflow" ],
        "summary" : "set Assignee for task",
        "operationId" : "assignUserToTask",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "User Task id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WorkflowUserTaskParams"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/adcGlossaryTermTypes" : {
      "get" : {
        "tags" : [ "glossaries" ],
        "summary" : "List glossary term types",
        "description" : "Get a list of glossary term types. Use `fields` parameter to get only necessary fields.  Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "list_1",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tags,reviewers,usageCount"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number glossary term types returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of glossary term types before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of glossary term types after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of glossary term types",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcGlossaryTermTypeList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "glossaries" ],
        "summary" : "Create or update a glossary term type",
        "description" : "Create a new glossary term type, if it does not exist or update an existing glossary term type.",
        "operationId" : "createOrUpdate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdcGlossaryTermType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The glossary term type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcGlossaryTermType"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "glossaries" ],
        "summary" : "Create a glossary term type",
        "description" : "Create a new glossary term type.",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdcGlossaryTermType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The glossary term type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateAdcGlossaryTermType"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/adcGlossaryTermTypes/name/{name}" : {
      "get" : {
        "tags" : [ "glossaries" ],
        "summary" : "Get a glossary term type by name",
        "description" : "Get a glossary term type by name.",
        "operationId" : "getByName_1",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tags,reviewers,usageCount"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The glossary term type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcGlossaryTermType"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcGlossaryTermType for instance {id} is not found"
          }
        }
      }
    },
    "/v1/adcGlossaryTermTypes/{id}" : {
      "get" : {
        "tags" : [ "glossaries" ],
        "summary" : "Get a glossary term type",
        "description" : "Get a glossary term type by `id`.",
        "operationId" : "get_4",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tags,reviewers,usageCount"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The glossary term type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcGlossaryTermType"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcGlossaryTermType for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "glossaries" ],
        "summary" : "Delete an AdccGlossaryTermType",
        "description" : "Delete a glossary term type by `id`.",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Chart Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "glossary term type for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "glossaries" ],
        "summary" : "Update a glossary term type",
        "description" : "Update an existing glossary term type using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "updateDescription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/adcGlossaryTermTypes/{id}/versions" : {
      "get" : {
        "tags" : [ "glossaries" ],
        "summary" : "List glossary term type versions",
        "description" : "Get a list of all the versions of a glossary term type identified by `id`",
        "operationId" : "listVersions_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "glossary term type Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of glossary term type versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adcGlossaryTermTypes/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "glossaries" ],
        "summary" : "Get a version of the glossary term types",
        "description" : "Get a version of the glossary term type by given `id`",
        "operationId" : "getVersion_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "glossary term type Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "glossary term type version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "glossary term types",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcGlossaryTermType"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcGlossaryTermType for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/adcSettings" : {
      "post" : {
        "tags" : [ "adcSettings", "AdcSettings" ],
        "summary" : "Create a adcSettings",
        "description" : "Create or update adcSettings.",
        "operationId" : "createAdcSettings",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdcSettings"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "adcSettings created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcSettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/adcSettings/name/{name}" : {
      "get" : {
        "tags" : [ "AdcSettings" ],
        "summary" : "Get settings",
        "description" : "Get settings by `name` or `fullyQualifiedName`.",
        "operationId" : "getAdcSettingsByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Fully qualified name of the AdcSettings",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcSettings"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcSettings for instance {name} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "adcSettings", "AdcSettings" ],
        "summary" : "Update a AdcSettings",
        "description" : "Update an existing AdcSettings using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchAdcSettings_1",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Fully qualified name of the AdcSettings",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/adcSettings/{id}" : {
      "get" : {
        "tags" : [ "adcSettings", "AdcSettings" ],
        "summary" : "Get a adcSettings",
        "description" : "Get a adcSettings by `id`.",
        "operationId" : "getAdcSettingsByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The adcSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcSettings"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcSettings for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "adcSettings", "AdcSettings" ],
        "summary" : "Delete a AdcSettings",
        "description" : "Delete a AdcSettings by `id`.",
        "operationId" : "deleteAdcSettings",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "AdcSettings Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "AdcSettings for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "adcSettings", "AdcSettings" ],
        "summary" : "Update a AdcSettings",
        "description" : "Update an existing AdcSettings using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchAdcSettings",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/adcSubjectAreas" : {
      "get" : {
        "tags" : [ "adcSubjectAreas" ],
        "summary" : "List subject areas",
        "description" : "Get a list of subject areas. Use `fields` parameter to get only necessary fields.  Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "glossary",
          "in" : "query",
          "description" : "List subject areas filtered by glossary identified by Id given in `glossary` parameter.",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "parent",
          "in" : "query",
          "description" : "List subject areas filtered by children of subject area identified by Id given in `parent` parameter.",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "parentStrict",
          "in" : "query",
          "description" : "List subject areas filtered by direct children of subject area identified by Id given in `parentStrict` parameter.",
          "schema" : {
            "type" : "string",
            "example" : "children,usageCount,parent"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "children,usageCount,parent"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number subject areas returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of subject areas before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of subject areas after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of subject areas",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcSubjectAreaList"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "adcSubjectAreas" ],
        "summary" : "Create a subject area",
        "description" : "Create a new subject area.",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdcSubjectArea"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The subject area",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcSubjectArea"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/adcSubjectAreas/fullType/byCreateEntity" : {
      "post" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Get a entity addition type by createEntity request",
        "description" : "Get a entity addition type by createEntity request",
        "operationId" : "getAdcTypeByCreateEntity",
        "parameters" : [ {
          "name" : "prepare",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdcSubjectArea"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcType"
                }
              }
            }
          },
          "400" : {
            "description" : "If type or entity aren't specified"
          }
        }
      }
    },
    "/v1/adcSubjectAreas/name/{name}" : {
      "get" : {
        "tags" : [ "adcSubjectAreas" ],
        "summary" : "Get a subject area by name",
        "description" : "Get a subject area by name.",
        "operationId" : "getByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "children,usageCount,parent"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The subject area",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcSubjectArea"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcSubjectArea for instance {id} is not found"
          }
        }
      }
    },
    "/v1/adcSubjectAreas/parents/{id}" : {
      "get" : {
        "tags" : [ "adcSubjectAreas" ],
        "summary" : "Get parents of subject area",
        "description" : "Get parents of subject area by `id`.",
        "operationId" : "getParents",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The subject area parents",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcSubjectArea"
                }
              }
            }
          },
          "404" : {
            "description" : "Subject area for instance {id} is not found"
          }
        }
      }
    },
    "/v1/adcSubjectAreas/{id}" : {
      "get" : {
        "tags" : [ "adcSubjectAreas" ],
        "summary" : "Get a subject area",
        "description" : "Get a subject area by `id`.",
        "operationId" : "get",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "children,usageCount,parent"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The subject area",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcSubjectArea"
                }
              }
            }
          },
          "404" : {
            "description" : "Subject area for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "adcSubjectAreas" ],
        "summary" : "Delete a subject area",
        "description" : "Delete a subject area by `id`.",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "autoUnlock",
          "in" : "query",
          "description" : "Automatically unlock the entity after operation is completed.  (Default = `true`)",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "lockToken",
          "in" : "query",
          "description" : "Lock token - when you need different locks for one user (Default = ``)",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Chart Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "adcSubjectArea for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "adcSubjectAreas" ],
        "summary" : "Update a subject area",
        "description" : "Update an existing subject area using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patch",
        "parameters" : [ {
          "name" : "autoUnlock",
          "in" : "query",
          "description" : "Automatically unlock the entity after operation is completed.  (Default = `true`)",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "lockToken",
          "in" : "query",
          "description" : "Lock token - when you need different locks for one user (Default = ``)",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/adcSubjectAreas/{id}/followers" : {
      "put" : {
        "tags" : [ "adcSubjectAreas" ],
        "summary" : "Add a follower",
        "description" : "Add current user as followed of this subject area",
        "operationId" : "addFollower",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the subject area",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          },
          "404" : {
            "description" : "Topic for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "adcSubjectAreas" ],
        "summary" : "Remove a follower",
        "description" : "Remove current from the followers of the subject area.",
        "operationId" : "deleteFollower",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the subject area",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adcSubjectAreas/{id}/versions" : {
      "get" : {
        "tags" : [ "adcSubjectAreas" ],
        "summary" : "List subject area versions",
        "description" : "Get a list of all the versions of a subject areas identified by `id`",
        "operationId" : "listVersions",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "glossary Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of subject area versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adcSubjectAreas/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "adcSubjectAreas" ],
        "summary" : "Get a version of the subject area",
        "description" : "Get a version of the subject area by given `id`",
        "operationId" : "getVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "glossary Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "subject area version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "adcSubjectAreas",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcSubjectArea"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcSubjectArea for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/adcUserSettings" : {
      "post" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Create a adcUserSettings",
        "description" : "Create or update adcUserSettings.",
        "operationId" : "createAdcUserSettings",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdcUserSettings"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "adcUserSettings updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcUserSettings"
                }
              }
            }
          },
          "201" : {
            "description" : "adcUserSettings created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcUserSettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/adcUserSettings/all" : {
      "get" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Get all adcUserSettings by userId and referenceId.",
        "description" : "Get all adcUserSettings by userId and referenceId.",
        "operationId" : "getAdcUserSettingsByID_1",
        "parameters" : [ {
          "name" : "referenceId",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities for glossary.",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "isFavorite",
          "in" : "query",
          "description" : "Include favorite entities.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "objectTypes",
          "in" : "query",
          "description" : "Include only objectType(s) entities."
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The adcUserSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcUserSettings"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adcUserSettings/batchEdit" : {
      "post" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Batch edit a adcUserSettings",
        "description" : "Batch create or update adcUserSettings.",
        "operationId" : "batchEditAdcUserSettings",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CreateAdcUserSettings"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "adcUserSettings updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcUserSettings"
                }
              }
            }
          },
          "201" : {
            "description" : "adcUserSettings created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/adcUserSettings/selected" : {
      "get" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Get current selected view adcUserSettings",
        "description" : "Get current selected view adcUserSettings by userId and referenceId.",
        "operationId" : "getSelectedAdcUserSettingsByID",
        "responses" : {
          "200" : {
            "description" : "The adcUserSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcUserSettings"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adcUserSettings/selected/global" : {
      "get" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Get global view adcUserSettings.",
        "description" : "Get global selected view adcUserSettings.",
        "operationId" : "getSelectedGlobalAdcUserSettingsByID",
        "responses" : {
          "200" : {
            "description" : "The adcUserSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcUserSettings"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adcUserSettings/type/{type}" : {
      "get" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Get current view adcUserSettings",
        "description" : "Get current view adcUserSettings by userId and referenceId.",
        "operationId" : "getAdcUserSettingsByID_4",
        "parameters" : [ {
          "name" : "referenceId",
          "in" : "query",
          "description" : "Settings by type for user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "isFavorite",
          "in" : "query",
          "description" : "Include favorite entities.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "objectTypes",
          "in" : "query",
          "description" : "Include only objectType(s) entities."
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "View", "Global", "NewNotificationFlagForMentions", "NewNotificationFlagForRequests", "NewNotificationFlagForTasks", "Local", "Shared", "FiltersVisibility", "Selected" ]
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The adcUserSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcUserSettings"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adcUserSettings/view" : {
      "get" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Get current view adcUserSettings",
        "description" : "Get current view adcUserSettings by userId and referenceId.",
        "operationId" : "getAdcUserSettingsByID_3",
        "parameters" : [ {
          "name" : "referenceId",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The adcUserSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcUserSettings"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adcUserSettings/view/all" : {
      "get" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Get all view adcUserSettings.",
        "description" : "Get all view adcUserSettings by userId and referenceId.",
        "operationId" : "getAdcUserSettingsByID_2",
        "parameters" : [ {
          "name" : "referenceId",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "isFavorite",
          "in" : "query",
          "description" : "Include favorite entities.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "objectTypes",
          "in" : "query",
          "description" : "Include only objectType(s) entities."
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The adcUserSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcUserSettings"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adcUserSettings/view/global" : {
      "get" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Get global view adcUserSettings.",
        "description" : "Get global view adcUserSettings.",
        "operationId" : "getAdcUserSettingsByID_5",
        "responses" : {
          "200" : {
            "description" : "The adcUserSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcUserSettings"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adcUserSettings/view/shared" : {
      "get" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Get shared views adcUserSettings. For admin only",
        "description" : "Get shared views adcUserSettings.",
        "operationId" : "getAdcUserSettingsByID_7",
        "parameters" : [ {
          "name" : "referenceId",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "isFavorite",
          "in" : "query",
          "description" : "Include favorite entities.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The adcUserSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcUserSettings"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adcUserSettings/view/shared/{id}" : {
      "get" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Get shared view adcUserSettings. For all",
        "description" : "Get shared view adcUserSettings.",
        "operationId" : "getAdcUserSettingsByID_6",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "referenceId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The adcUserSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcUserSettings"
                }
              }
            }
          }
        }
      }
    },
    "/v1/adcUserSettings/{id}" : {
      "get" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Get a adcUserSettings",
        "description" : "Get a adcUserSettings by `id`.",
        "operationId" : "getAdcUserSettingsByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The adcUserSettings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcUserSettings"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcUserSettings for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Delete a AdcUserSettings",
        "description" : "Delete a AdcUserSettings by `id`.",
        "operationId" : "deleteAdcUserSettings",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "AdcUserSettings Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "AdcUserSettings for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "adcUserSettings" ],
        "summary" : "Update a AdcUserSettings",
        "description" : "Update an existing AdcUserSettings using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchAdcUserSettings",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/admin/repair/glossaryterms" : {
      "post" : {
        "tags" : [ "Repair" ],
        "summary" : "Run process repair GlossaryTerms",
        "description" : "WARNING!!! For tester and administrators only. Repair GlossaryTerms.",
        "operationId" : "repairGlossaryTerms",
        "responses" : {
          "200" : {
            "description" : "Successful repair",
            "content" : {
              "application/text" : { }
            }
          },
          "403" : {
            "description" : "Access denied"
          }
        }
      }
    },
    "/v1/bots" : {
      "get" : {
        "tags" : [ "Bots" ],
        "summary" : "List bots",
        "description" : "Get a list of Bot.",
        "operationId" : "listBots",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of Bot before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of Bot after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Bot",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BotList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Bots" ],
        "summary" : "Create or update a bot",
        "description" : "Create a bot, if it does not exist. If a bot already exists, update the bot.",
        "operationId" : "createOrUpdateBot",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateBot"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The bot",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bot"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Bots" ],
        "summary" : "Create a bot",
        "description" : "Create a new bot.",
        "operationId" : "createBot",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateBot"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The bot ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bot"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/bots/name/{name}" : {
      "get" : {
        "tags" : [ "Bots" ],
        "summary" : "Get a bot by name",
        "description" : "Get a bot by `name`.",
        "operationId" : "getBotByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the bot",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "bot",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bot"
                }
              }
            }
          },
          "404" : {
            "description" : "Bot for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Bots" ],
        "summary" : "Delete a bot by name",
        "description" : "Delete a bot by `name`.",
        "operationId" : "deleteBotByFQN",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the bot",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Bot for instance {name} is not found"
          }
        }
      }
    },
    "/v1/bots/restore" : {
      "put" : {
        "tags" : [ "Bots" ],
        "summary" : "Restore a soft deleted bot",
        "description" : "Restore a soft deleted bot.",
        "operationId" : "restore",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Bot ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bot"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bots/{id}" : {
      "get" : {
        "tags" : [ "Bots" ],
        "summary" : "Get a bot by Id",
        "description" : "Get a bot by `Id`.",
        "operationId" : "getBotByID",
        "parameters" : [ {
          "name" : "include",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the bot",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The bot",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bot"
                }
              }
            }
          },
          "404" : {
            "description" : "Bot for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Bots" ],
        "summary" : "Delete a bot by Id",
        "description" : "Delete a bot by `Id`.",
        "operationId" : "deleteBot",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the bot",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Bot for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Bots" ],
        "summary" : "Update a bot",
        "description" : "Update an existing bot using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchBot",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the bot",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/bots/{id}/versions" : {
      "get" : {
        "tags" : [ "Bots" ],
        "summary" : "List bot versions",
        "description" : "Get a list of all the versions of a bot identified by `Id`",
        "operationId" : "listAllBotVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the bot",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of bot versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bots/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Bots" ],
        "summary" : "Get a version of the bot",
        "description" : "Get a version of the bot by given `Id`",
        "operationId" : "listSpecificBotVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the bot",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "bot version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "bot",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bot"
                }
              }
            }
          },
          "404" : {
            "description" : "Bot for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/charts" : {
      "get" : {
        "tags" : [ "Charts" ],
        "summary" : "List charts",
        "description" : "Get a list of charts, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listCharts",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,followers,tags,domain,dataProducts"
          }
        }, {
          "name" : "service",
          "in" : "query",
          "description" : "Filter charts by service name",
          "schema" : {
            "type" : "string",
            "example" : "superset"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number charts returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of charts before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of charts after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of charts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChartList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Charts" ],
        "summary" : "Create or update chart",
        "description" : "Create a chart, it it does not exist or update an existing chart.",
        "operationId" : "createOrUpdateChart",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateChart"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The updated chart ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Chart"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Charts" ],
        "summary" : "Create a chart",
        "description" : "Create a chart under an existing `service`.",
        "operationId" : "createChart",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateChart"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The chart",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Chart"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/charts/name/{fqn}" : {
      "get" : {
        "tags" : [ "Charts" ],
        "summary" : "Get a chart by fully qualified name",
        "description" : "Get a chart by `fullyQualifiedName`.",
        "operationId" : "getChartByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the chart",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,followers,tags,domain,dataProducts"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The chart",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Chart"
                }
              }
            }
          },
          "404" : {
            "description" : "Chart for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Charts" ],
        "summary" : "Delete a chart by fully qualified name",
        "description" : "Delete a chart by `fullyQualifiedName`.",
        "operationId" : "deleteChartByFQN",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the chart",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Chart for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/charts/restore" : {
      "put" : {
        "tags" : [ "Charts" ],
        "summary" : "Restore a soft deleted chart",
        "description" : "Restore a soft deleted chart.",
        "operationId" : "restore_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Chart ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Chart"
                }
              }
            }
          }
        }
      }
    },
    "/v1/charts/{id}" : {
      "get" : {
        "tags" : [ "Charts" ],
        "summary" : "Get a chart by Id",
        "description" : "Get a chart by `Id`.",
        "operationId" : "getChartByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the chart",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,followers,tags,domain,dataProducts"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The chart",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Chart"
                }
              }
            }
          },
          "404" : {
            "description" : "Chart for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Charts" ],
        "summary" : "Delete a chart by Id",
        "description" : "Delete a chart by `Id`.",
        "operationId" : "deleteChart",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the chart",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Chart for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Charts" ],
        "summary" : "Update a chart",
        "description" : "Update an existing chart using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchChart",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the chart",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/charts/{id}/followers" : {
      "put" : {
        "tags" : [ "Charts" ],
        "summary" : "Add a follower",
        "description" : "Add a user identified by `userId` as followed of this chart",
        "operationId" : "addFollowerToChart",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the chart",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Id of the user to be added as follower",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "format" : "uuid"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Chart for instance {id} is not found"
          }
        }
      }
    },
    "/v1/charts/{id}/followers/{userId}" : {
      "delete" : {
        "tags" : [ "Charts" ],
        "summary" : "Remove a follower",
        "description" : "Remove the user identified `userId` as a follower of the chart.",
        "operationId" : "deleteFollowerFromChart",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the chart",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "Id of the user being removed as follower",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/charts/{id}/versions" : {
      "get" : {
        "tags" : [ "Charts" ],
        "summary" : "List chart versions",
        "description" : "Get a list of all the versions of a chart identified by `id`",
        "operationId" : "listAllChartVersions",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the chart",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of chart versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/charts/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Charts" ],
        "summary" : "Get a version of the chart",
        "description" : "Get a version of the chart by given `Id`",
        "operationId" : "getSpecificChartVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the chart",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Chart version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "chart",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Chart"
                }
              }
            }
          },
          "404" : {
            "description" : "Chart for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/classifications" : {
      "get" : {
        "tags" : [ "Classifications" ],
        "summary" : "List classifications",
        "description" : "Get a list of classifications.",
        "operationId" : "listClassifications",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "usageCount,termCount"
          }
        }, {
          "name" : "disabled",
          "in" : "query",
          "description" : "Filter Disabled Classifications",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number classifications returned. (1 to 1000000, default = 10) ",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of classifications before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of classifications after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClassificationList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Classifications" ],
        "summary" : "Update a classification",
        "description" : "Update an existing category identify by category name",
        "operationId" : "createOrUpdateClassification",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateClassification"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Classifications" ],
        "summary" : "Create a classification",
        "description" : "Create a new classification. The request can include the children tags to be created along with the classification.",
        "operationId" : "createClassification",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateClassification"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Classification"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/classifications/name/{name}" : {
      "get" : {
        "tags" : [ "Classifications" ],
        "summary" : "Get a classification by name",
        "description" : "Get a classification identified by name. The response includes classification information along with the entire hierarchy of all the children tags.",
        "operationId" : "getClassificationByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the classification",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "usageCount,termCount"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Classification"
                }
              }
            }
          },
          "404" : {
            "description" : "Classification for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Classifications" ],
        "summary" : "Delete classification by name",
        "description" : "Delete a classification by `name` and all the tags under it.",
        "operationId" : "deleteClassificationByName",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the classification",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "classification for instance {name} is not found"
          }
        }
      }
    },
    "/v1/classifications/restore" : {
      "put" : {
        "tags" : [ "Classifications" ],
        "summary" : "Restore a soft deleted classification",
        "description" : "Restore a soft deleted classification.",
        "operationId" : "restoreClassification",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Table ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      }
    },
    "/v1/classifications/{id}" : {
      "get" : {
        "tags" : [ "Classifications" ],
        "summary" : "Get a classification by id",
        "description" : "Get a classification by `id`",
        "operationId" : "getClassificationByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the classification",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "usageCount,termCount"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "classification",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Classification"
                }
              }
            }
          },
          "404" : {
            "description" : "Classification for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Classifications" ],
        "summary" : "Delete classification by id",
        "description" : "Delete a classification and all the tags under it.",
        "operationId" : "deleteClassification",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the classification",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Classifications" ],
        "summary" : "Update a classification",
        "description" : "Update an existing classification using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchClassification",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the classification",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/classifications/{id}/versions" : {
      "get" : {
        "tags" : [ "Classifications" ],
        "summary" : "List classification versions",
        "description" : "Get a list of all the versions of a classification identified by `id`",
        "operationId" : "listAllClassificationVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the classification",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of classification versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/classifications/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Classifications" ],
        "summary" : "Get a version of the classification",
        "description" : "Get a version of the classification by given `id`",
        "operationId" : "getSpecificClassificationVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the classification",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "classification version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "glossaries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Classification"
                }
              }
            }
          },
          "404" : {
            "description" : "Classification for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/containers" : {
      "get" : {
        "tags" : [ "Containers" ],
        "summary" : "List Containers",
        "description" : "Get a list of containers, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listContainers",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "parent,children,dataModel,owner,tags,followers,extension,domain"
          }
        }, {
          "name" : "service",
          "in" : "query",
          "description" : "Filter Containers by Object Store Service name",
          "schema" : {
            "type" : "string",
            "example" : "s3West"
          }
        }, {
          "name" : "root",
          "in" : "query",
          "description" : "Filter by Containers at the root level. E.g., without parent",
          "schema" : {
            "type" : "boolean",
            "example" : true,
            "default" : false
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number containers returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of containers before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of containers after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of containers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContainerList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Containers" ],
        "summary" : "Create or update a Container",
        "description" : "Create a new Container, if it does not exist or update an existing container.",
        "operationId" : "createOrUpdateContainer",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateContainer"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The Container",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Container"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Containers" ],
        "summary" : "Create a Container",
        "description" : "Create a new Container.",
        "operationId" : "createContainer",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateContainer"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Container",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Container"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/containers/name/{fqn}" : {
      "get" : {
        "tags" : [ "Containers" ],
        "summary" : "Get an Container by name",
        "description" : "Get an Container by fully qualified name.",
        "operationId" : "getContainerByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "parent,children,dataModel,owner,tags,followers,extension,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The container",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Container"
                }
              }
            }
          },
          "404" : {
            "description" : "Container for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Containers" ],
        "summary" : "Delete a Container by fully qualified name",
        "description" : "Delete a Container by `fullyQualifiedName`.",
        "operationId" : "deleteContainerByFQN",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Name of the Container",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "container for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/containers/restore" : {
      "put" : {
        "tags" : [ "Containers" ],
        "summary" : "Restore a soft deleted Container.",
        "description" : "Restore a soft deleted Container.",
        "operationId" : "restore_22",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Container ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Container"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/{id}" : {
      "get" : {
        "tags" : [ "Containers" ],
        "summary" : "Get an Object Store Container",
        "description" : "Get an Object Store container by `id`.",
        "operationId" : "getContainerByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "parent,children,dataModel,owner,tags,followers,extension,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The container",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Container"
                }
              }
            }
          },
          "404" : {
            "description" : "Container for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Containers" ],
        "summary" : "Delete a Container",
        "description" : "Delete a Container by `id`.",
        "operationId" : "deleteContainer",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Container Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "container for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Containers" ],
        "summary" : "Update a Container",
        "description" : "Update an existing Container using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchContainer",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the Container",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/containers/{id}/followers" : {
      "put" : {
        "tags" : [ "Containers" ],
        "summary" : "Add a follower",
        "description" : "Add a user identified by `userId` as follower of this container",
        "operationId" : "addFollower_7",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the container",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Id of the user to be added as follower",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "format" : "uuid"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          },
          "404" : {
            "description" : "container for instance {id} is not found"
          }
        }
      }
    },
    "/v1/containers/{id}/followers/{userId}" : {
      "delete" : {
        "tags" : [ "Containers" ],
        "summary" : "Remove a follower",
        "description" : "Remove the user identified `userId` as a follower of the container.",
        "operationId" : "deleteFollower_8",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the container",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "Id of the user being removed as follower",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/{id}/versions" : {
      "get" : {
        "tags" : [ "Containers" ],
        "summary" : "List Container versions",
        "description" : "Get a list of all the versions of a container identified by `id`",
        "operationId" : "listAllContainerVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Container Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Container versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Containers" ],
        "summary" : "Get a version of the Container",
        "description" : "Get a version of the Container by given `id`",
        "operationId" : "getSpecificContainerVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Container Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Container version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Container",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Container"
                }
              }
            }
          },
          "404" : {
            "description" : "Container for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/custom/{type}" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "List entity addition types",
        "description" : "Get a list of entity addition types. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listAdcEntityAdditionTypes",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "metadata,owner,addition"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number of entity addition types returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of entity addition types before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of entity addition types after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of entity addition types",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Create a entity addition type",
        "description" : "Create a new addition type.",
        "operationId" : "createAdcEntityAdditionType",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ObjectNode"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/custom/{type}/name/{name}" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Get a entity addition type by name",
        "description" : "Get a entity addition type by `name`.",
        "operationId" : "getAdcEntityAdditionTypeByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "metadata,owner,addition"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcEntityAdditionType for instance {name} is not found"
          }
        }
      }
    },
    "/v1/custom/{type}/{id}" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Get a entity addition type",
        "description" : "Get a entity addition types by `id`.",
        "operationId" : "getAdcEntityAdditionTypeByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "metadata,owner,addition"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcEntityAdditionType for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Delete a entity addition type",
        "description" : "Delete a entity addition types by given `id`.",
        "operationId" : "deleteAdcEntityAdditionType",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "AdcEntityAdditionType Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "AdcEntityAdditionType for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Update a entity addition type",
        "description" : "Update an existing entity addition types with JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchAdcEntityAdditionType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/custom/{type}/{id}/versions" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "List entity addition types versions",
        "description" : "Get a list of all the versions of a entity addition types identified by `id`",
        "operationId" : "listAllAdcEntityAdditionTypeVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "adcEntityAdditionType Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of entity addition types versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/custom/{type}/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Get a version of the entity addition type",
        "description" : "Get a version of the entity addition types by given `id`",
        "operationId" : "getSpecificAdcEntityAdditionTypeVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "AdcEntityAdditionType Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "AdcEntityAdditionType version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "team",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JsonEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcEntityAdditionType for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/dashboard/datamodels" : {
      "get" : {
        "tags" : [ "Dashboard Data Models" ],
        "summary" : "List Dashboard Data Models",
        "description" : "Get a list of dashboard datamodels, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listDashboardDataModels",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tags,followers,domain"
          }
        }, {
          "name" : "service",
          "in" : "query",
          "description" : "Filter dashboardDataModel by service name",
          "schema" : {
            "type" : "string",
            "example" : "superset"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number dashboardDataModel returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of dashboardDataModel before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of dashboardDataModel after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of dashboard datamodels",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardDataModelList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Dashboard Data Models" ],
        "summary" : "Create or update dashboard datamodel",
        "description" : "Create a dashboard datamodel, it it does not exist or update an existing dashboard datamodel.",
        "operationId" : "createOrUpdateDataModel",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDashboardDataModel"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The updated dashboard datamodel",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardDataModel"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Dashboard Data Models" ],
        "summary" : "Create a dashboard datamodel",
        "description" : "Create a dashboard datamodel under an existing `service`.",
        "operationId" : "createDataModel",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDashboardDataModel"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The dashboard datamodel",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardDataModel"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/dashboard/datamodels/name/{fqn}" : {
      "get" : {
        "tags" : [ "Dashboard Data Models" ],
        "summary" : "Get a dashboard datamodel by fully qualified name",
        "description" : "Get a dashboard datamodel by `fullyQualifiedName`.",
        "operationId" : "getDataModelByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the dashboard datamodel",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tags,followers,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The dashboard datamodel",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardDataModel"
                }
              }
            }
          },
          "404" : {
            "description" : "DataModel for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Dashboard Data Models" ],
        "summary" : "Delete a data model by fully qualified name.",
        "description" : "Delete a data model by `fullyQualifiedName`.",
        "operationId" : "deleteDataModelByFQN",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the data model",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "DataModel for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/dashboard/datamodels/restore" : {
      "put" : {
        "tags" : [ "Dashboard Data Models" ],
        "summary" : "Restore a soft deleted data model.",
        "description" : "Restore a soft deleted data model.",
        "operationId" : "restore_7",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the data model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardDataModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dashboard/datamodels/{id}" : {
      "get" : {
        "tags" : [ "Dashboard Data Models" ],
        "summary" : "Get a dashboard datamodel by Id",
        "description" : "Get a dashboard datamodel by `id`.",
        "operationId" : "getDataModelByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard datamodel",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tags,followers,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The dashboard datamodel",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardDataModel"
                }
              }
            }
          },
          "404" : {
            "description" : "DataModel for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Dashboard Data Models" ],
        "summary" : "Delete a data model by `id`.",
        "description" : "Delete a dashboard datamodel by `id`.",
        "operationId" : "deleteDataModel",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the data model",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "DataModel for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Dashboard Data Models" ],
        "summary" : "Update a dashboard datamodel",
        "description" : "Update an existing dashboard datamodel using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchDataModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard datamodel",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/dashboard/datamodels/{id}/followers" : {
      "put" : {
        "tags" : [ "Dashboard Data Models" ],
        "summary" : "Add a follower",
        "description" : "Add a user identified by `userId` as followed of this data model",
        "operationId" : "addFollowerToDataModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the data model",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Id of the user to be added as follower",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "format" : "uuid"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "DataModel for instance {id} is not found"
          }
        }
      }
    },
    "/v1/dashboard/datamodels/{id}/followers/{userId}" : {
      "delete" : {
        "tags" : [ "Dashboard Data Models" ],
        "summary" : "Remove a follower",
        "description" : "Remove the user identified `userId` as a follower of the data model.",
        "operationId" : "deleteFollowerFromDataModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the data model",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "Id of the user being removed as follower",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/dashboard/datamodels/{id}/versions" : {
      "get" : {
        "tags" : [ "Dashboard Data Models" ],
        "summary" : "List dashboard datamodel versions",
        "description" : "Get a list of all the versions of a dashboard datamodel identified by `id`",
        "operationId" : "listAllDataModelVersions",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard datamodel",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of dashboard datamodel versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dashboard/datamodels/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Dashboard Data Models" ],
        "summary" : "Get a version of the dashboard datamodel",
        "description" : "Get a version of the dashboard datamodel by given `id`",
        "operationId" : "getSpecificDataModelVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard datamodel",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "DataModel version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dashboard datamodel",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardDataModel"
                }
              }
            }
          },
          "404" : {
            "description" : "DataModel for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/dashboards" : {
      "get" : {
        "tags" : [ "Dashboards" ],
        "summary" : "List dashboards",
        "description" : "Get a list of dashboards, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listDashboards",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,charts,followers,tags,usageSummary,extension,dataModels,domain,dataProducts"
          }
        }, {
          "name" : "service",
          "in" : "query",
          "description" : "Filter dashboards by service name",
          "schema" : {
            "type" : "string",
            "example" : "superset"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number dashboards returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of dashboards before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of dashboards after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of dashboards",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Dashboards" ],
        "summary" : "Create or update a dashboard",
        "description" : "Create a new dashboard, if it does not exist or update an existing dashboard.",
        "operationId" : "createOrUpdateDashboard",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDashboard"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The dashboard",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Dashboards" ],
        "summary" : "Create a dashboard",
        "description" : "Create a new dashboard.",
        "operationId" : "createDashboard",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDashboard"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The dashboard",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/dashboards/name/{fqn}" : {
      "get" : {
        "tags" : [ "Dashboards" ],
        "summary" : "Get a dashboard by fully qualified name",
        "description" : "Get a dashboard by fully qualified name.",
        "operationId" : "getDashboardByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the dashboard",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,charts,followers,tags,usageSummary,extension,dataModels,domain,dataProducts"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The dashboard",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "404" : {
            "description" : "Dashboard for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Dashboards" ],
        "summary" : "Delete a dashboard by fully qualified name",
        "description" : "Delete a dashboard by `fullyQualifiedName`.",
        "operationId" : "deleteDashboardByFQN",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the dashboard",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Dashboard for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/dashboards/restore" : {
      "put" : {
        "tags" : [ "Dashboards" ],
        "summary" : "Restore a soft deleted dashboard",
        "description" : "Restore a soft deleted dashboard.",
        "operationId" : "restore_2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Dashboard.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Dashboard"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dashboards/{id}" : {
      "get" : {
        "tags" : [ "Dashboards" ],
        "summary" : "Get a dashboard by Id",
        "description" : "Get a dashboard by `Id`.",
        "operationId" : "getDashboardByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,charts,followers,tags,usageSummary,extension,dataModels,domain,dataProducts"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The dashboard",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "404" : {
            "description" : "Dashboard for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Dashboards" ],
        "summary" : "Delete a dashboard by Id",
        "description" : "Delete a dashboard by `Id`.",
        "operationId" : "deleteDashboard",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Dashboard for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Dashboards" ],
        "summary" : "Update a dashboard",
        "description" : "Update an existing dashboard using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchDashboard",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/dashboards/{id}/followers" : {
      "put" : {
        "tags" : [ "Dashboards" ],
        "summary" : "Add a follower",
        "description" : "Add a user identified by `userId` as follower of this dashboard",
        "operationId" : "addFollowerToDashboard",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Id of the user to be added as follower",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "format" : "uuid"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Dashboard for instance {id} is not found"
          }
        }
      }
    },
    "/v1/dashboards/{id}/followers/{userId}" : {
      "delete" : {
        "tags" : [ "Dashboards" ],
        "summary" : "Remove a follower",
        "description" : "Remove the user identified `userId` as a follower of the dashboard.",
        "operationId" : "removeFollowerFromDashboard",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "Id of the user being removed as follower",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/dashboards/{id}/versions" : {
      "get" : {
        "tags" : [ "Dashboards" ],
        "summary" : "List dashboard versions",
        "description" : "Get a list of all the versions of a dashboard identified by `Id`",
        "operationId" : "listAllDashboardVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of dashboard versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dashboards/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Dashboards" ],
        "summary" : "Get a version of the dashboard",
        "description" : "Get a version of the dashboard by given `id`",
        "operationId" : "getSpecificDashboardVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Dashboard version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dashboard",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "404" : {
            "description" : "Dashboard for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/dataProducts" : {
      "get" : {
        "tags" : [ "DataProducts" ],
        "summary" : "List dataProducts",
        "description" : "Get a list of DataProducts.",
        "operationId" : "listDataProducts",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "domain,owner,experts"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of DataProduct before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of DataProduct after this cursor",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of DataProducts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataProductList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "DataProducts" ],
        "summary" : "Create or update a dataProduct",
        "description" : "Create a dataProduct. if it does not exist. If a dataProduct already exists, update the dataProduct.",
        "operationId" : "createOrUpdateDataProduct",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDataProduct"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The dataProduct",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataProduct"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "DataProducts" ],
        "summary" : "Create a dataProduct",
        "description" : "Create a new dataProduct.",
        "operationId" : "createDataProduct",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDataProduct"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The dataProduct ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataProduct"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/dataProducts/name/{name}" : {
      "get" : {
        "tags" : [ "DataProducts" ],
        "summary" : "Get a dataProduct by name",
        "description" : "Get a dataProduct by `name`.",
        "operationId" : "getDataProductByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the dataProduct",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "domain,owner,experts"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dataProduct",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataProduct"
                }
              }
            }
          },
          "404" : {
            "description" : "DataProduct for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "DataProducts" ],
        "summary" : "Delete a dataProduct by name",
        "description" : "Delete a dataProduct by `name`.",
        "operationId" : "deleteDataProductByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the dataProduct",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "DataProduct for instance {name} is not found"
          }
        }
      }
    },
    "/v1/dataProducts/{id}" : {
      "get" : {
        "tags" : [ "DataProducts" ],
        "summary" : "Get a dataProduct by Id",
        "description" : "Get a dataProduct by `Id`.",
        "operationId" : "getDataProductByID",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "domain,owner,experts"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dataProduct",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The dataProduct",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataProduct"
                }
              }
            }
          },
          "404" : {
            "description" : "DataProduct for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "DataProducts" ],
        "summary" : "Delete a dataProduct by Id",
        "description" : "Delete a dataProduct by `Id`.",
        "operationId" : "deleteDataProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dataProduct",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "DataProduct for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "DataProducts" ],
        "summary" : "Update a dataProduct",
        "description" : "Update an existing dataProduct using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchDataProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dataProduct",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/dataProducts/{id}/versions" : {
      "get" : {
        "tags" : [ "DataProducts" ],
        "summary" : "List dataProduct versions",
        "description" : "Get a list of all the versions of a dataProduct identified by `Id`",
        "operationId" : "listAllDataProductVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dataProduct",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of dataProduct versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dataProducts/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "DataProducts" ],
        "summary" : "Get a version of the dataProduct",
        "description" : "Get a version of the dataProduct by given `Id`",
        "operationId" : "listSpecificDataProductVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dataProduct",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "DataProduct version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dataProduct",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataProduct"
                }
              }
            }
          },
          "404" : {
            "description" : "DataProduct for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/dataQuality/testCases" : {
      "get" : {
        "tags" : [ "Test Cases" ],
        "summary" : "List test cases",
        "description" : "Get a list of test. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.Use the `testSuite` field to get the executable Test Suite linked to this test case or use the `testSuites` field to list test suites (executable and logical) linked.",
        "operationId" : "listTestCases",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,testSuite,testDefinition,testSuites"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number tests returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of tests before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of tests after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entityLink",
          "in" : "query",
          "description" : "Return list of tests by entity link",
          "schema" : {
            "type" : "string",
            "example" : "<E#/{entityType}/{entityFQN}/{fieldName}>"
          }
        }, {
          "name" : "testSuiteId",
          "in" : "query",
          "description" : "Returns list of tests filtered by the testSuite id",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeAllTests",
          "in" : "query",
          "description" : "Include all the tests at the entity level",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        }, {
          "name" : "term",
          "in" : "query",
          "description" : "Glossary Term id",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of test definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestCaseList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Update test case",
        "description" : "Create a TestCase, it it does not exist or update an existing TestCase.",
        "operationId" : "createOrUpdateTest",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTestCase"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The updated testCase.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestCase"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Create a test case",
        "description" : "Create a test case",
        "operationId" : "createTestCase",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTestCase"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The test",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestCase"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/dataQuality/testCases/executionSummary" : {
      "get" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Get the execution summary of test cases",
        "description" : "Get the execution summary of test cases.",
        "operationId" : "getExecutionSummaryOfTestCases",
        "parameters" : [ {
          "name" : "testSuiteId",
          "in" : "query",
          "description" : "get summary for a specific test suite",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Tests Execution Summary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestSummary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testCases/executionSummary/term" : {
      "get" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Get the execution summary of test cases for all terms",
        "description" : "Get the execution summary of test cases for all terms.",
        "operationId" : "getExecutionSummaryOfTestCasesForAllTerms",
        "responses" : {
          "200" : {
            "description" : "Tests Execution Summary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestSummary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testCases/executionSummary/term/{id}" : {
      "get" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Get the execution summary of test cases by term",
        "description" : "Get the execution summary of test cases by one term.",
        "operationId" : "getExecutionSummaryOfTestCasesByTerm",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Tests Execution Summary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestSummary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testCases/fullType/byCreateEntity" : {
      "post" : {
        "tags" : [ "adcEntityAdditionTypes", "Test Cases" ],
        "summary" : "Get a entity addition type by createEntity request",
        "description" : "Get a entity addition type by createEntity request",
        "operationId" : "getAdcTypeByCreateEntity_2",
        "parameters" : [ {
          "name" : "prepare",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTestCase"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcType"
                }
              }
            }
          },
          "400" : {
            "description" : "If type or entity aren't specified"
          }
        }
      }
    },
    "/v1/dataQuality/testCases/logicalTestCases" : {
      "put" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Add test cases to a logical test suite",
        "description" : "Add test cases to a logical test suite.",
        "operationId" : "addTestCasesToLogicalTestSuite",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateLogicalTestCases"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully added test cases to the logical test suite.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestSuite"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testCases/logicalTestCases/{testSuiteId}/{id}" : {
      "delete" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Delete a logical test case by Id from a test suite",
        "description" : "Delete a logical test case by `Id` a test suite.",
        "operationId" : "deleteLogicalTestCase",
        "parameters" : [ {
          "name" : "testSuiteId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Logical test case for instance {id} is not found"
          }
        }
      }
    },
    "/v1/dataQuality/testCases/name/{fqn}" : {
      "get" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Get a test case by fully qualified name",
        "description" : "Get a test case by `fullyQualifiedName`.",
        "operationId" : "getTestCaseByName",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the test case",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,testSuite,testDefinition,testSuites"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The TestCase",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestCase"
                }
              }
            }
          },
          "404" : {
            "description" : "Test for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Delete a test case by fully qualified name",
        "description" : "Delete a testCase by `fullyQualifiedName`.",
        "operationId" : "deleteTestCaseByName",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the test case",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "TestCase for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/dataQuality/testCases/restore" : {
      "put" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Restore a soft deleted test case",
        "description" : "Restore a soft deleted test case.",
        "operationId" : "restore_8",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Chart ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestCase"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testCases/{fqn}/testCaseResult" : {
      "get" : {
        "tags" : [ "Test Cases" ],
        "summary" : "List of test case results",
        "description" : "Get a list of all the test case results for the given testCase id, optionally filtered by  `startTs` and `endTs` of the profile. Use cursor-based pagination to limit the number of entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listTestCaseResults",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the test case",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startTs",
          "in" : "query",
          "description" : "Filter testCase results after the given start timestamp",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "endTs",
          "in" : "query",
          "description" : "Filter testCase results before the given end timestamp",
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of testCase results",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestCaseResultList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Add test case result data",
        "description" : "Add test case result data to the testCase.",
        "operationId" : "addTestCaseResult",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the test case",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestCaseResult"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the TestCase. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestCase"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testCases/{fqn}/testCaseResult/{timestamp}" : {
      "delete" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Delete test case result",
        "description" : "Delete testCase result for a testCase.",
        "operationId" : "DeleteTestCaseResult",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the test case",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "timestamp",
          "in" : "path",
          "description" : "Timestamp of the testCase result",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the TestCaseResult",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestCase"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Update a test case result",
        "description" : "Update an existing test case using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchTestCaseResult",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "fqn of the test case",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "timestamp",
          "in" : "path",
          "description" : "Timestamp of the testCase result",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testCases/{id}" : {
      "get" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Get a test case by Id",
        "description" : "Get a TestCase by `Id`.",
        "operationId" : "get_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test case",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,testSuite,testDefinition,testSuites"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The TestCases",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestCase"
                }
              }
            }
          },
          "404" : {
            "description" : "Test for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Delete a test case by Id",
        "description" : "Delete a test case by `Id`.",
        "operationId" : "deleteTestCase",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test case",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Test case for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Update a test case",
        "description" : "Update an existing test using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchTest",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test case",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testCases/{id}/versions" : {
      "get" : {
        "tags" : [ "Test Cases" ],
        "summary" : "List test case versions",
        "description" : "Get a list of all the versions of a testCases identified by `Id`",
        "operationId" : "listAllTestCaseVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test case",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of test versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testCases/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Test Cases" ],
        "summary" : "Get a version of the test case",
        "description" : "Get a version of the test case by given `Id`",
        "operationId" : "getSpecificTestCaseVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test case",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Test version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Test",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestCase"
                }
              }
            }
          },
          "404" : {
            "description" : "Test for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/dataQuality/testDefinitions" : {
      "get" : {
        "tags" : [ "Test Definitions" ],
        "summary" : "List test definitions",
        "description" : "Get a list of test definitions, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listTestDefinitions",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number test definitions returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of test definitions before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of test definitions after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        }, {
          "name" : "entityType",
          "in" : "query",
          "description" : "Filter by entityType.",
          "schema" : {
            "type" : "string",
            "enum" : [ "TABLE", "COLUMN" ]
          }
        }, {
          "name" : "testPlatform",
          "in" : "query",
          "description" : "Filter by a test platform",
          "schema" : {
            "type" : "string",
            "enum" : [ "OpenMetadata", "GreatExpectations", "DBT", "Deequ", "Soda", "Other" ]
          }
        }, {
          "name" : "supportedDataType",
          "in" : "query",
          "description" : "Filter tests definition by supported data type",
          "schema" : {
            "type" : "string",
            "enum" : [ "NUMBER", "TINYINT", "SMALLINT", "INT", "BIGINT", "BYTEINT", "BYTES", "FLOAT", "DOUBLE", "DECIMAL", "NUMERIC", "TIMESTAMP", "TIMESTAMPZ", "TIME", "DATE", "DATETIME", "INTERVAL", "STRING", "MEDIUMTEXT", "TEXT", "CHAR", "LONG", "VARCHAR", "BOOLEAN", "BINARY", "VARBINARY", "ARRAY", "BLOB", "LONGBLOB", "MEDIUMBLOB", "MAP", "STRUCT", "UNION", "SET", "GEOGRAPHY", "ENUM", "JSON", "UUID", "VARIANT", "GEOMETRY", "BYTEA", "AGGREGATEFUNCTION", "ERROR", "FIXED", "RECORD", "NULL", "SUPER", "HLLSKETCH", "PG_LSN", "PG_SNAPSHOT", "TSQUERY", "TXID_SNAPSHOT", "XML", "MACADDR", "TSVECTOR", "UNKNOWN", "CIDR", "INET", "CLOB", "ROWID", "LOWCARDINALITY", "YEAR", "POINT", "POLYGON", "TUPLE", "SPATIAL", "TABLE", "NTEXT", "IMAGE", "IPV4", "IPV6", "DATETIMERANGE" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of test definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestDefinitionList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Test Definitions" ],
        "summary" : "Update test definition",
        "description" : "Create a test definition, if it does not exist, or update an existing test definition.",
        "operationId" : "createOrUpdateTestDefinition",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The updated test definition ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestDefinition"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Test Definitions" ],
        "summary" : "Create a test definition",
        "description" : "Create a Test definition.",
        "operationId" : "createTestDefinition",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTestDefinition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The test definition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestDefinition"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/dataQuality/testDefinitions/name/{name}" : {
      "get" : {
        "tags" : [ "Test Definitions" ],
        "summary" : "Get a test definition by name",
        "description" : "Get a test definition by `name`.",
        "operationId" : "getTestDefinitionByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the test definition",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The test definition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestDefinition"
                }
              }
            }
          },
          "404" : {
            "description" : "Test Definition for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Test Definitions" ],
        "summary" : "Delete a test definition",
        "description" : "Delete a test definition by `name`.",
        "operationId" : "deleteTestDefinitionByName",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the test definition",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Test definition for instance {name} is not found"
          }
        }
      }
    },
    "/v1/dataQuality/testDefinitions/restore" : {
      "put" : {
        "tags" : [ "Test Definitions" ],
        "summary" : "Restore a soft deleted test definition",
        "description" : "Restore a soft deleted TestDefinition.",
        "operationId" : "restore_9",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the TestDefinition. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testDefinitions/{id}" : {
      "get" : {
        "tags" : [ "Test Definitions" ],
        "summary" : "Get a test definition by Id",
        "description" : "Get a Test Definition by `Id`.",
        "operationId" : "get_2",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test definition",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Test definition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestDefinition"
                }
              }
            }
          },
          "404" : {
            "description" : "Test Definition for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Test Definitions" ],
        "summary" : "Delete a test definition",
        "description" : "Delete a test definition by `id`.",
        "operationId" : "deleteTestDefinition",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test definition",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Test definition for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Test Definitions" ],
        "summary" : "Update a test definition",
        "description" : "Update an existing Test Definition using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchTestDefinition",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test definition",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testDefinitions/{id}/versions" : {
      "get" : {
        "tags" : [ "Test Definitions" ],
        "summary" : "List test definition versions",
        "description" : "Get a list of all the versions of a test definition identified by `Id`",
        "operationId" : "listAllTestDefinitionVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test definition",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of test definition versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testDefinitions/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Test Definitions" ],
        "summary" : "Get a version of the test definition",
        "description" : "Get a version of the test definition by given `Id`",
        "operationId" : "getSpecificTestDefinitionVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test definition",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Test Definition version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "TestDefinition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestDefinition"
                }
              }
            }
          },
          "404" : {
            "description" : "Test Definition for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/dataQuality/testSuites" : {
      "get" : {
        "tags" : [ "Test Suites" ],
        "summary" : "List test suites",
        "description" : "Get a list of test suites. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listTestSuites",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tests,summary"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number test definitions returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "testSuiteType",
          "in" : "query",
          "description" : "Returns executable or logical test suites. If omitted, returns all test suites.",
          "schema" : {
            "type" : "string",
            "example" : "executable"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of test definitions before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of test definitions after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of test definitions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestSuiteList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Test Suites" ],
        "summary" : "Update logical test suite",
        "description" : "Create a logical TestSuite, if it does not exist or update an existing test suite.",
        "operationId" : "createOrUpdateLogicalTestSuite",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTestSuite"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The updated test definition ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestSuite"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Test Suites" ],
        "summary" : "Create a logical test suite",
        "description" : "Create a logical test suite.",
        "operationId" : "createLogicalTestSuite",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTestSuite"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The test suite",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestSuite"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/dataQuality/testSuites/executable" : {
      "put" : {
        "tags" : [ "Test Suites" ],
        "summary" : "Create or Update Executable test suite",
        "description" : "Create an Executable TestSuite if it does not exist or update an existing one.",
        "operationId" : "createOrUpdateExecutableTestSuite",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTestSuite"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The updated test definition ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestSuite"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Test Suites" ],
        "summary" : "Create an executable test suite",
        "description" : "Create an executable test suite.",
        "operationId" : "createExecutableTestSuite",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTestSuite"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Executable test suite",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestSuite"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/dataQuality/testSuites/executable/name/{name}" : {
      "delete" : {
        "tags" : [ "Test Suites" ],
        "summary" : "Delete a test suite",
        "description" : "Delete a test suite by `name`.",
        "operationId" : "deleteTestSuiteByName",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the test suite",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Test suite for instance {name} is not found"
          }
        }
      }
    },
    "/v1/dataQuality/testSuites/executable/{id}" : {
      "delete" : {
        "tags" : [ "Test Suites" ],
        "summary" : "Delete a test suite",
        "description" : "Delete a test suite by `Id`.",
        "operationId" : "deleteTestSuite",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test suite",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Test suite for instance {id} is not found"
          }
        }
      }
    },
    "/v1/dataQuality/testSuites/name/{name}" : {
      "get" : {
        "tags" : [ "Test Suites" ],
        "summary" : "Get a test suite by name",
        "description" : "Get a test suite by  name.",
        "operationId" : "getTestSuiteByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the test suite",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tests,summary"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The test suite",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestSuite"
                }
              }
            }
          },
          "404" : {
            "description" : "Test Suite for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Test Suites" ],
        "summary" : "Delete a logical test suite",
        "description" : "Delete a logical test suite by `name`.",
        "operationId" : "deleteLogicalTestSuite",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the logical entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "FQN of the logical test suite",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Logical Test suite for instance {name} is not found"
          }
        }
      }
    },
    "/v1/dataQuality/testSuites/restore" : {
      "put" : {
        "tags" : [ "Test Suites" ],
        "summary" : "Restore a soft deleted test suite",
        "description" : "Restore a soft deleted test suite.",
        "operationId" : "restore_10",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the TestSuite.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestSuite"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testSuites/{id}" : {
      "get" : {
        "tags" : [ "Test Suites" ],
        "summary" : "Get a test suite by Id",
        "description" : "Get a Test Suite by `Id`.",
        "operationId" : "get_3",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test suite",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tests,summary"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Test suite",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestSuite"
                }
              }
            }
          },
          "404" : {
            "description" : "Test Suite for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Test Suites" ],
        "summary" : "Delete a logical test suite",
        "description" : "Delete a logical test suite by `id`.",
        "operationId" : "deleteLogicalTestSuite_1",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the logical entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the logical test suite",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Logical test suite for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Test Suites" ],
        "summary" : "Update a test suite",
        "description" : "Update an existing testSuite using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchTestSuite",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test suite",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testSuites/{id}/versions" : {
      "get" : {
        "tags" : [ "Test Suites" ],
        "summary" : "List test suite versions",
        "description" : "Get a list of all the versions of a test suite identified by `id`",
        "operationId" : "listAllTestSuiteVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test suite",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of test suite versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dataQuality/testSuites/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Test Suites" ],
        "summary" : "Get a version of the test suite",
        "description" : "Get a version of the test suite by given `id`",
        "operationId" : "getSpecificTestSuiteVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the test suite",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Test Suite version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "TestSuite",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestSuite"
                }
              }
            }
          },
          "404" : {
            "description" : "Test Suite for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/databaseSchemas" : {
      "get" : {
        "tags" : [ "Database Schemas" ],
        "summary" : "List database schemas",
        "description" : "Get a list of database schemas, optionally filtered by `database` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listDBSchemas",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tables,usageSummary,tags,extension,domain"
          }
        }, {
          "name" : "database",
          "in" : "query",
          "description" : "Filter schemas by database name",
          "schema" : {
            "type" : "string",
            "example" : "customerDatabase"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number schemas returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of schemas before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of schemas after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of database schema",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseSchemaList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Database Schemas" ],
        "summary" : "Create or update schema",
        "description" : "Create a database schema, if it does not exist or update an existing database schema.",
        "operationId" : "createOrUpdateDBSchema",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDatabaseSchema"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The updated schema ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseSchema"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Database Schemas" ],
        "summary" : "Create a schema",
        "description" : "Create a schema under an existing `service`.",
        "operationId" : "createDBSchema",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDatabaseSchema"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The database schema",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseSchema"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/databaseSchemas/name/{fqn}" : {
      "get" : {
        "tags" : [ "Database Schemas" ],
        "summary" : "Get a schema by fully qualified name",
        "description" : "Get a database schema by fully qualified name.",
        "operationId" : "getDBSchemaByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the database schema",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tables,usageSummary,tags,extension,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The schema",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseSchema"
                }
              }
            }
          },
          "404" : {
            "description" : "Database schema for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Database Schemas" ],
        "summary" : "Delete a schema by fully qualified name",
        "description" : "Delete a schema by `fullyQualifiedName`. Schema can only be deleted if it has no tables.",
        "operationId" : "deleteDBSchemaByFQN",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Name of the DBSchema",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Schema for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/databaseSchemas/restore" : {
      "put" : {
        "tags" : [ "Database Schemas" ],
        "summary" : "Restore a soft deleted database schema.",
        "description" : "Restore a soft deleted database schema.",
        "operationId" : "restore_4",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the DatabaseSchema ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseSchema"
                }
              }
            }
          }
        }
      }
    },
    "/v1/databaseSchemas/{id}" : {
      "get" : {
        "tags" : [ "Database Schemas" ],
        "summary" : "Get a schema by Id",
        "description" : "Get a database schema by `Id`.",
        "operationId" : "getDBSchemaByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database schema Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tables,usageSummary,tags,extension,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The schema",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseSchema"
                }
              }
            }
          },
          "404" : {
            "description" : "Schema for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Database Schemas" ],
        "summary" : "Delete a schema by Id",
        "description" : "Delete a schema by `Id`. Schema can only be deleted if it has no tables.",
        "operationId" : "deleteDBSchema",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Database schema Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Schema for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Database Schemas" ],
        "summary" : "Update a database schema",
        "description" : "Update an existing database schema using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchDBSchema",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database schema Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/databaseSchemas/{id}/versions" : {
      "get" : {
        "tags" : [ "Database Schemas" ],
        "summary" : "List schema versions",
        "description" : "Get a list of all the versions of a schema identified by `Id`",
        "operationId" : "listAllDBSchemaVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database schema Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of schema versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/databaseSchemas/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Database Schemas" ],
        "summary" : "Get a version of the schema",
        "description" : "Get a version of the database schema by given `Id`",
        "operationId" : "getSpecificDBSchemaVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database schema Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Database schema version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "database schema",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseSchema"
                }
              }
            }
          },
          "404" : {
            "description" : "Database schema for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/databases" : {
      "get" : {
        "tags" : [ "Databases" ],
        "summary" : "List databases",
        "description" : "Get a list of databases, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listDatabases",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,databaseSchemas,usageSummary,location,tags,extension,domain"
          }
        }, {
          "name" : "service",
          "in" : "query",
          "description" : "Filter databases by service name",
          "schema" : {
            "type" : "string",
            "example" : "snowflakeWestCoast"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number tables returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of tables before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of tables after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of databases",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Databases" ],
        "summary" : "Create or update database",
        "description" : "Create a database, if it does not exist or update an existing database.",
        "operationId" : "createOrUpdateDatabase",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDatabase"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The updated database ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Database"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Databases" ],
        "summary" : "Create a database",
        "description" : "Create a database under an existing `service`.",
        "operationId" : "createDatabase",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDatabase"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The database",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Database"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/databases/name/{fqn}" : {
      "get" : {
        "tags" : [ "Databases" ],
        "summary" : "Get a database by fully qualified name",
        "description" : "Get a database by `fullyQualifiedName`.",
        "operationId" : "getDatabaseByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the database",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,databaseSchemas,usageSummary,location,tags,extension,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The database",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Database"
                }
              }
            }
          },
          "404" : {
            "description" : "Database for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Databases" ],
        "summary" : "Delete a database by fully qualified name",
        "description" : "Delete a database by `fullyQualifiedName`. Databases can only be deleted if it has no tables.",
        "operationId" : "deleteDatabaseByFQN",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the database",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Database for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/databases/restore" : {
      "put" : {
        "tags" : [ "Databases" ],
        "summary" : "Restore a soft deleted Database.",
        "description" : "Restore a soft deleted Database.",
        "operationId" : "restore_3",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Database. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Database"
                }
              }
            }
          }
        }
      }
    },
    "/v1/databases/{id}" : {
      "get" : {
        "tags" : [ "Databases" ],
        "summary" : "Get a database by Id",
        "description" : "Get a database by `Id`.",
        "operationId" : "getDatabaseByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the database",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,databaseSchemas,usageSummary,location,tags,extension,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The database",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Database"
                }
              }
            }
          },
          "404" : {
            "description" : "Database for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Databases" ],
        "summary" : "Delete a database by Id",
        "description" : "Delete a database by `Id`. Database can only be deleted if it has no tables.",
        "operationId" : "deleteDatabase",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the database",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Database for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Databases" ],
        "summary" : "Update a database",
        "description" : "Update an existing database using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchDatabase",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the database",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/databases/{id}/versions" : {
      "get" : {
        "tags" : [ "Databases" ],
        "summary" : "List database versions",
        "description" : "Get a list of all the versions of a database identified by `Id`",
        "operationId" : "listAllDatabaseVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the database",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of database versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/databases/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Databases" ],
        "summary" : "Get a version of the database",
        "description" : "Get a version of the database by given `Id`",
        "operationId" : "getSpecificDatabaseVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the database",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Database version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "database",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Database"
                }
              }
            }
          },
          "404" : {
            "description" : "Database for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/diff/{id}" : {
      "get" : {
        "tags" : [ "Diff" ],
        "summary" : "Возвращает разницу между двумя версиями объекта",
        "description" : "Возвращает разницу между двумя версиями объекта, полученному по его ID",
        "operationId" : "compareVersions",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the entity.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Higher version number in the form `major`.`minor`.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        }, {
          "name" : "versusVersion",
          "in" : "query",
          "description" : "Lower version number in the form `major`.`minor`.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        }, {
          "name" : "entityType",
          "in" : "query",
          "description" : "Type of entity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "glossaryTerm, AdcSubjectArea..."
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Diff",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiffEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "version <= versusVersion."
          }
        }
      }
    },
    "/v1/domains" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "List domains",
        "description" : "Get a list of Domains.",
        "operationId" : "listDomains",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "children,owner,parent,experts"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of Domain before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of Domain after this cursor",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Domains",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DomainList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Domains" ],
        "summary" : "Create or update a domain",
        "description" : "Create a domain. if it does not exist. If a domain already exists, update the domain.",
        "operationId" : "createOrUpdateDomain",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDomain"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The domain",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Domain"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Domains" ],
        "summary" : "Create a domain",
        "description" : "Create a new domain.",
        "operationId" : "createDomain",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDomain"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The domain ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Domain"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/domains/name/{name}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get a domain by name",
        "description" : "Get a domain by `name`.",
        "operationId" : "getDomainByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the domain",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "children,owner,parent,experts"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "domain",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Domain"
                }
              }
            }
          },
          "404" : {
            "description" : "Domain for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Domains" ],
        "summary" : "Delete a domain by name",
        "description" : "Delete a domain by `name`.",
        "operationId" : "deleteDomainByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the domain",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Domain for instance {name} is not found"
          }
        }
      }
    },
    "/v1/domains/{id}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get a domain by Id",
        "description" : "Get a domain by `Id`.",
        "operationId" : "getDomainByID",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "children,owner,parent,experts"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the domain",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The domain",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Domain"
                }
              }
            }
          },
          "404" : {
            "description" : "Domain for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Domains" ],
        "summary" : "Delete a domain by Id",
        "description" : "Delete a domain by `Id`.",
        "operationId" : "deleteDomain",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the domain",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Domain for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Domains" ],
        "summary" : "Update a domain",
        "description" : "Update an existing domain using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchDomain",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the domain",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/domains/{id}/versions" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "List domain versions",
        "description" : "Get a list of all the versions of a domain identified by `Id`",
        "operationId" : "listAllDomainVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the domain",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of domain versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/domains/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Domains" ],
        "summary" : "Get a version of the domain",
        "description" : "Get a version of the domain by given `Id`",
        "operationId" : "listSpecificDomainVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the domain",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Domain version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "domain",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Domain"
                }
              }
            }
          },
          "404" : {
            "description" : "Domain for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/events" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get change events",
        "description" : "Get a list of change events matching event types, entity type, from a given date",
        "operationId" : "listChangeEvents",
        "parameters" : [ {
          "name" : "entityCreated",
          "in" : "query",
          "description" : "List of comma separated entities requested for `entityCreated` event. When set to `*` all entities will be returned",
          "schema" : {
            "type" : "string",
            "example" : "table,dashboard,..."
          }
        }, {
          "name" : "entityUpdated",
          "in" : "query",
          "description" : "List of comma separated entities requested for `entityCreated` event. When set to `*` all entities will be returned",
          "schema" : {
            "type" : "string",
            "example" : "table,dashboard,..."
          }
        }, {
          "name" : "entityDeleted",
          "in" : "query",
          "description" : "List of comma separated entities requested for `entityCreated` event. When set to `*` all entities will be returned",
          "schema" : {
            "type" : "string",
            "example" : "table,dashboard,..."
          }
        }, {
          "name" : "timestamp",
          "in" : "query",
          "description" : "Events starting from this unix timestamp in milliseconds",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 1426349294842
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Entity events",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventList"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity for instance {id} is not found"
          }
        }
      }
    },
    "/v1/events/subscriptions" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "List all available Event Subscriptions",
        "description" : "Get a list of All available Event Subscriptions",
        "operationId" : "listEventSubscriptions",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,filteringRules"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number event subscriptions returned. (1 to 1000000, default = 10) ",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of event subscriptions before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of event subscriptions after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Event Subscriptions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscriptionList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Events" ],
        "summary" : "Updated an existing or create a new Event Subscription",
        "description" : "Updated an existing or create a new Event Subscription",
        "operationId" : "createOrUpdateEventSubscription",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateEventSubscription"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "create Event Subscription",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateEventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Events" ],
        "summary" : "Create a new Event Subscription",
        "description" : "Create a new Event Subscription",
        "operationId" : "createEventSubscription",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateEventSubscription"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Event Subscription Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateEventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/events/subscriptions/functions" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get list of Event Subscription functions used in filtering EventSubscription",
        "description" : "Get list of Event Subscription functions used in filtering conditions in Event Subscriptions",
        "operationId" : "listEventSubscriptionFunctions",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Function"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/events/subscriptions/name/{eventSubscriptionName}" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get an Event Subscription by name",
        "description" : "Get an Event Subscription by name.",
        "operationId" : "getEventSubscriptionByName",
        "parameters" : [ {
          "name" : "eventSubscriptionName",
          "in" : "path",
          "description" : "Name of the Event Subscription",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,filteringRules"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Event Subscription with request name is returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Event Subscription for instance {eventSubscriptionName} is not found"
          }
        }
      }
    },
    "/v1/events/subscriptions/name/{eventSubscriptionName}/status" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get Event Subscription status",
        "description" : "Get a event Subscription status by given Name",
        "operationId" : "getEventSubscriptionStatus",
        "parameters" : [ {
          "name" : "eventSubscriptionName",
          "in" : "path",
          "description" : "Name of the Event Subscription",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the current status of the Event Subscription",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity for instance {id} is not found"
          }
        }
      }
    },
    "/v1/events/subscriptions/name/{name}" : {
      "delete" : {
        "tags" : [ "Events" ],
        "summary" : "Delete an Event Subscription by name",
        "description" : "Delete an Event Subscription by given `name`.",
        "operationId" : "deleteEventSubscriptionByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the Event Subscription",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Entity for instance {name} is not found"
          }
        }
      }
    },
    "/v1/events/subscriptions/resources" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get list of Event Subscriptions Resources used in filtering Event Subscription",
        "description" : "Get list of EventSubscription functions used in filtering conditions in Event Subscription",
        "operationId" : "listEventSubscriptionResources",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListSubscriptionResourceDescriptor"
                }
              }
            }
          }
        }
      }
    },
    "/v1/events/subscriptions/trigger/{id}" : {
      "put" : {
        "tags" : [ "Events" ],
        "summary" : "Trigger a existing Data Insight Report Job to run",
        "description" : "Trigger a existing Data Insight Report Job to run",
        "operationId" : "triggerDataInsightJob",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the event Subscription",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Trigger a Data Insight Job"
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/events/subscriptions/validation/condition/{expression}" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Validate a given condition",
        "description" : "Validate a given condition expression used in filtering rules.",
        "operationId" : "validateCondition",
        "parameters" : [ {
          "name" : "expression",
          "in" : "path",
          "description" : "Expression to validate",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No value is returned"
          },
          "400" : {
            "description" : "Invalid expression"
          }
        }
      }
    },
    "/v1/events/subscriptions/{eventSubscriptionId}/status" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get Event Subscription status by Id",
        "description" : "Get a event Subscription status by given Name",
        "operationId" : "getEventSubscriptionStatusById",
        "parameters" : [ {
          "name" : "eventSubscriptionId",
          "in" : "path",
          "description" : "Name of the Event Subscription",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the current status of the Event Subscription",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionStatus"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity for instance {id} is not found"
          }
        }
      }
    },
    "/v1/events/subscriptions/{id}" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get a event Subscription by ID",
        "description" : "Get a event Subscription by given Id",
        "operationId" : "getEventSubscriptionByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the Event Subscription",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,filteringRules"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Entity events",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Events" ],
        "summary" : "Delete an Event Subscription by Id",
        "description" : "Delete an Event Subscription",
        "operationId" : "deleteEventSubscription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the Event Subscription",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Entity events",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Events" ],
        "summary" : "Update an Event Subscriptions",
        "description" : "Update an existing Event Subscriptions using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchEventSubscription",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the event Subscription",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/events/subscriptions/{id}/versions" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "List Event Subscription versions",
        "description" : "Get a list of all the versions of an Event Subscription identified by `Id`",
        "operationId" : "listAllEventSubscriptionVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the Event Subscription",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Event Subscription versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/events/subscriptions/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get a version of the Event Subscription",
        "description" : "Get a version of the Event Subscription by given `Id`",
        "operationId" : "getSpecificEventSubscriptionVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the Event Subscription",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Event Subscription version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get specific version of Event Subscription",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Event Subscription for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/export" : {
      "get" : {
        "summary" : "List adcExportingProcesses",
        "description" : "Get a list of adcExportingProcesses. Use `fields` parameter to get only necessary fields.  Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listAdcExportingProcesses",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "file"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number adcExportingProcesses returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of adcExportingProcesses before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of adcExportingProcesses after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of adcExportingProcesses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcExportingProcessList"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Start export process for entity",
        "description" : "Start export process for entity",
        "operationId" : "start",
        "parameters" : [ {
          "name" : "format",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "enum" : [ "xlsx", "csv", "bpmn" ]
          }
        }, {
          "name" : "exportAssets",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JsonNode"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcExportingProcess"
                }
              },
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcExportingProcess"
                }
              }
            }
          }
        }
      }
    },
    "/v1/export/file/{id}" : {
      "get" : {
        "summary" : "Get export file",
        "operationId" : "getFile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/octet-stream" : { }
            }
          }
        }
      }
    },
    "/v1/export/{id}" : {
      "get" : {
        "summary" : "Get a adcExportingProcess by Id",
        "description" : "Get a adcExportingProcess by `Id`.",
        "operationId" : "getadcExportingProcessByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the adcExportingProcess",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "file"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The adcExportingProcess",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcExportingProcess"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcExportingProcess for instance {id} is not found"
          }
        }
      }
    },
    "/v1/glossaries" : {
      "get" : {
        "tags" : [ "Glossaries" ],
        "summary" : "List glossaries",
        "description" : "Get a list of glossaries. Use `fields` parameter to get only necessary fields.  Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listGlossaries",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tags,reviewers,usageCount,termCount,domain"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number glossaries returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of glossaries before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of glossaries after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of glossaries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Create or update a glossary",
        "description" : "Create a new glossary, if it does not exist or update an existing glossary.",
        "operationId" : "createOrUpdateGlossary",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateGlossary"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The glossary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Glossary"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Create a glossary",
        "description" : "Create a new glossary.",
        "operationId" : "createGlossary",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateGlossary"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The glossary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Glossary"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/glossaries/globalDefaultGlossary" : {
      "get" : {
        "tags" : [ "glossaries", "Glossaries" ],
        "summary" : "Get global default glossary",
        "description" : "Get global default glossary.",
        "operationId" : "getGlobalDefaultGlossary",
        "responses" : {
          "200" : {
            "description" : "The glossary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Glossary"
                }
              }
            }
          },
          "404" : {
            "description" : "Global default glossary is not found"
          }
        }
      }
    },
    "/v1/glossaries/globalDefaultGlossary/{glossaryId}" : {
      "put" : {
        "tags" : [ "glossaries", "Glossaries" ],
        "summary" : "Set global default glossary",
        "description" : "Set global default glossary",
        "operationId" : "setGlobalDefaultGlossary",
        "parameters" : [ {
          "name" : "glossaryId",
          "in" : "path",
          "description" : "Glossary Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Glossary with {glossaryId} id is not found"
          }
        }
      }
    },
    "/v1/glossaries/name/{name}" : {
      "get" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Get a glossary by name",
        "description" : "Get a glossary by name.",
        "operationId" : "getGlossaryByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the glossary",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tags,reviewers,usageCount,termCount,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The glossary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Glossary"
                }
              }
            }
          },
          "404" : {
            "description" : "Glossary for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Delete a glossary by name",
        "description" : "Delete a glossary by `name`.",
        "operationId" : "deleteGlossaryByName",
        "parameters" : [ {
          "name" : "autoUnlock",
          "in" : "query",
          "description" : "Automatically unlock the entity after operation is completed.  (Default = `true`)",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "lockToken",
          "in" : "query",
          "description" : "Lock token - when you need different locks for one user (Default = ``)",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the glossary",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "glossary for instance {name} is not found"
          }
        }
      }
    },
    "/v1/glossaries/name/{name}/export" : {
      "get" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Export glossary in CSV format",
        "operationId" : "exportGlossary",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the glossary",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Exported csv with glossary terms",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glossaries/name/{name}/import" : {
      "put" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Import glossary terms from CSV to create, and update glossary terms",
        "operationId" : "importGlossary",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the glossary",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dryRun",
          "in" : "query",
          "description" : "Dry-run when true is used for validating the CSV without really importing it. (default=true)",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "requestBody" : {
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Import result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CsvImportResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glossaries/restore" : {
      "put" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Restore a soft deleted glossary",
        "description" : "Restore a soft deleted Glossary.",
        "operationId" : "restore_11",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Glossary ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Glossary"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glossaries/{id}" : {
      "get" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Get a glossary by Id",
        "description" : "Get a glossary by `Id`.",
        "operationId" : "getGlossaryByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tags,reviewers,usageCount,termCount,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The glossary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Glossary"
                }
              }
            }
          },
          "404" : {
            "description" : "Glossary for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Delete a glossary by Id",
        "description" : "Delete a glossary by `Id`.",
        "operationId" : "deleteGlossary",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "autoUnlock",
          "in" : "query",
          "description" : "Automatically unlock the entity after operation is completed.  (Default = `true`)",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "lockToken",
          "in" : "query",
          "description" : "Lock token - when you need different locks for one user (Default = ``)",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "glossary for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Update a glossary",
        "description" : "Update an existing glossary using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchGlossary",
        "parameters" : [ {
          "name" : "autoUnlock",
          "in" : "query",
          "description" : "Automatically unlock the entity after operation is completed.  (Default = `true`)",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "lockToken",
          "in" : "query",
          "description" : "Lock token - when you need different locks for one user (Default = ``)",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/glossaries/{id}/followers" : {
      "put" : {
        "tags" : [ "glossaries", "Glossaries" ],
        "summary" : "Add a follower",
        "description" : "Add current user as followed of this glossary",
        "operationId" : "addFollower_2",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          },
          "404" : {
            "description" : "Topic for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "glossaries", "Glossaries" ],
        "summary" : "Remove a follower",
        "description" : "Remove current user from the followers of the glossary.",
        "operationId" : "deleteFollower_3",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glossaries/{id}/versions" : {
      "get" : {
        "tags" : [ "Glossaries" ],
        "summary" : "List glossary versions",
        "description" : "Get a list of all the versions of a glossary identified by `id`",
        "operationId" : "listAllGlossaryVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of glossary versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glossaries/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Get a version of the glossaries",
        "description" : "Get a version of the glossary by given `Id`",
        "operationId" : "getSpecificGlossaryVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "glossary version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "glossaries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Glossary"
                }
              }
            }
          },
          "404" : {
            "description" : "Glossary for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/glossaryTerms" : {
      "get" : {
        "tags" : [ "Glossaries" ],
        "summary" : "List glossary terms",
        "description" : "Get a list of glossary terms. Use `fields` parameter to get only necessary fields.  Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listGlossaryTerm",
        "parameters" : [ {
          "name" : "glossary",
          "in" : "query",
          "description" : "List glossary terms filtered by glossary identified by Id given in `glossary` parameter.",
          "schema" : {
            "type" : "string",
            "example" : "children,relatedTerms,reviewers,owner,tags,usageCount,domain"
          }
        }, {
          "name" : "parent",
          "in" : "query",
          "description" : "List glossary terms filtered by children of glossary term identified by Id given in `parent` parameter.",
          "schema" : {
            "type" : "string",
            "example" : "children,relatedTerms,reviewers,owner,tags,usageCount,domain"
          }
        }, {
          "name" : "adcSubjectArea",
          "in" : "query",
          "description" : "List glossary terms filtered by subject area identified by Id given in `adcSubjectArea` parameter.",
          "schema" : {
            "type" : "string",
            "example" : "children,relatedTerms,reviewers,owner,tags,usageCount,domain"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "children,relatedTerms,reviewers,owner,tags,usageCount,domain"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number glossary terms returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of glossary terms before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of glossary terms after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        }, {
          "name" : "withTestCase",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of glossary terms",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTermList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Create or update a glossary term",
        "description" : "Create a new glossary term, if it does not exist or update an existing glossary term.",
        "operationId" : "createOrUpdateGlossaryTerm",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateGlossaryTerm"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The glossary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTerm"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Create a glossary term",
        "description" : "Create a new glossary term.",
        "operationId" : "createGlossaryTerm",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateGlossaryTerm"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The glossary term",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlossaryTerm"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/glossaryTerms/fullType/byCreateEntity" : {
      "post" : {
        "tags" : [ "adcEntityAdditionTypes", "Glossaries" ],
        "summary" : "Get a entity addition type by createEntity request",
        "description" : "Get a entity addition type by createEntity request",
        "operationId" : "getAdcTypeByCreateEntity_3",
        "parameters" : [ {
          "name" : "prepare",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateGlossaryTerm"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcType"
                }
              }
            }
          },
          "400" : {
            "description" : "If type or entity aren't specified"
          }
        }
      }
    },
    "/v1/glossaryTerms/name/{fqn}" : {
      "get" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Get a glossary term by fully qualified name",
        "description" : "Get a glossary term by `fullyQualifiedName`.",
        "operationId" : "getGlossaryTermByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the glossary term",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "children,relatedTerms,reviewers,owner,tags,usageCount,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The glossary term",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Glossary"
                }
              }
            }
          },
          "404" : {
            "description" : "Glossary for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/glossaryTerms/{id}" : {
      "get" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Get a glossary term by Id",
        "description" : "Get a glossary term by `Id`.",
        "operationId" : "getGlossaryTermByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary term",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "children,relatedTerms,reviewers,owner,tags,usageCount,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The glossary term",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Glossary"
                }
              }
            }
          },
          "404" : {
            "description" : "Glossary for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Update a glossary term",
        "description" : "Update an existing glossary term using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchGlossaryTerm",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary term",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "autoUnlock",
          "in" : "query",
          "description" : "Automatically unlock the entity after operation is completed.  (Default = `true`)",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "lockToken",
          "in" : "query",
          "description" : "Lock token - when you need different locks for one user (Default = ``)",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/glossaryTerms/{id}/delete" : {
      "post" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Delete a glossary term by Id",
        "description" : "Delete a glossary term by `Id`.",
        "operationId" : "delete_2",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "autoUnlock",
          "in" : "query",
          "description" : "Automatically unlock the entity after operation is completed.  (Default = `true`)",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "lockToken",
          "in" : "query",
          "description" : "Lock token - when you need different locks for one user (Default = ``)",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "validateUsersForRoles",
          "in" : "query",
          "description" : "Publish artefact without validation of roles",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary term",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WorkflowUserTaskParams"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "glossaryTerm for instance {id} is not found"
          }
        }
      }
    },
    "/v1/glossaryTerms/{id}/followers" : {
      "put" : {
        "tags" : [ "glossaryTerm", "Glossaries" ],
        "summary" : "Add a follower",
        "description" : "Add current user as followed of this glossary term",
        "operationId" : "addFollower_3",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary term",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          },
          "404" : {
            "description" : "Topic for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "glossaryTerm", "Glossaries" ],
        "summary" : "Remove a follower",
        "description" : "Remove current user from the followers of the glossary term.",
        "operationId" : "deleteFollower_4",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary term",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glossaryTerms/{id}/lastVersions" : {
      "get" : {
        "tags" : [ "glossaryTerm", "Glossaries" ],
        "summary" : "List glossary term versions",
        "description" : "Get a list of all the versions of a glossary terms identified by `id`",
        "operationId" : "listAllGlossaryTermVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "glossary Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of glossary term versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glossaryTerms/{id}/publish" : {
      "post" : {
        "tags" : [ "glossaryTerm", "Glossaries" ],
        "summary" : "Publish a glossary term",
        "description" : "Publish a glossary term by `id`.",
        "operationId" : "publish",
        "parameters" : [ {
          "name" : "validateUsersForRoles",
          "in" : "query",
          "description" : "Publish artefact without validation of roles",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "autoUnlock",
          "in" : "query",
          "description" : "Automatically unlock the entity after operation is completed.  (Default = `true`)",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "lockToken",
          "in" : "query",
          "description" : "Lock token - when you need different locks for one user (Default = ``)",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Glossary Term Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WorkflowUserTaskParams"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "201" : {
            "description" : "Bad term state"
          },
          "404" : {
            "description" : "glossaryTerm for instance {id} is not found"
          }
        }
      }
    },
    "/v1/glossaryTerms/{id}/versions" : {
      "get" : {
        "tags" : [ "Glossaries" ],
        "summary" : "List glossary term versions",
        "description" : "Get a list of all the versions of a glossary terms identified by `id`",
        "operationId" : "listAllGlossaryTermVersion_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary term",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of glossary term versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glossaryTerms/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Glossaries" ],
        "summary" : "Get a version of the glossary term",
        "description" : "Get a version of the glossary term by given `Id`",
        "operationId" : "getSpecificGlossaryTermVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the glossary term",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "glossary term version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "glossaries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Glossary"
                }
              }
            }
          },
          "404" : {
            "description" : "Glossary for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/glossaryTerms/{id}/versionsOnly" : {
      "get" : {
        "tags" : [ "glossaryTerm", "Glossaries" ],
        "summary" : "List glossary term versions",
        "description" : "Get a list of all the versions of a glossary terms identified by `id`",
        "operationId" : "listAllGlossaryTermVersions",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "glossary term Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of glossary term versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExtensionVersions"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groupOperations/change" : {
      "post" : {
        "summary" : "Change entities from jsonPatch map",
        "description" : "Change entities from jsonPatch map; Map will be puts into queue for processing; If flag publish is TRUE, entities will be publish after processing ",
        "operationId" : "create_2",
        "parameters" : [ {
          "name" : "entityType",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "enum" : [ "glossaryTerm", "glossary", "adcSubjectArea", "lineage" ]
          }
        }, {
          "name" : "publish",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "Map of UUID and JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              },
              "example" : {
                "1906274e-8e2d-4981-8d0e-f60e4cdc6360" : [ {
                  "op" : "replace",
                  "path" : "/description",
                  "value" : "val"
                } ],
                "45d216d3-a63a-4e4b-8ae9-0b19025fa441" : [ {
                  "op" : "remove",
                  "path" : "/description",
                  "value" : "val"
                } ]
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcGroupUpdateProcess"
                }
              }
            }
          }
        }
      }
    },
    "/v1/groupOperations/change/{processId}" : {
      "delete" : {
        "summary" : "Delete a change process and it's result by the given ID",
        "description" : "Hard delete a change process and it's result by the given ID",
        "operationId" : "delete_3",
        "parameters" : [ {
          "name" : "processId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/groupOperations/change/{processId}/errors" : {
      "get" : {
        "summary" : "Get errors information about changed entities by ID",
        "description" : "Get errors information about changed entities by ID. Offset - updatedAt field",
        "operationId" : "getEntitiesWithErrors",
        "parameters" : [ {
          "name" : "processId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AdcGroupChangeErrorsResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/groupOperations/change/{processId}/status" : {
      "get" : {
        "summary" : "Get a processing status of changed entities by ID",
        "description" : "Get a processing status of changed entities by ID",
        "operationId" : "getStatus",
        "parameters" : [ {
          "name" : "processId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcGroupUpdateProcessInfo"
                }
              }
            }
          }
        }
      }
    },
    "/v1/idp/openid/callback" : {
      "post" : {
        "tags" : [ "IDP" ],
        "summary" : "Receives auth info from IDP via POST and redirects it via GET to the UI auth client",
        "operationId" : "openIdCallback",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "id_token" : {
                    "type" : "string"
                  },
                  "state" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          }
        }
      }
    },
    "/v1/import" : {
      "post" : {
        "summary" : "Import entities from file",
        "description" : "Import entities from file; put importing file in validation queue",
        "operationId" : "create_3",
        "parameters" : [ {
          "name" : "entityType",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "enum" : [ "glossaryTerm", "glossary", "adcSubjectArea", "lineage" ]
          }
        }, {
          "name" : "fileName",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fileFormat",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "enum" : [ "csv", "xlsx" ]
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/octet-stream" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "format" : "byte"
                }
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcImportingHandle"
                }
              }
            }
          }
        }
      }
    },
    "/v1/import/starterFile" : {
      "get" : {
        "summary" : "Get starter file for specified format",
        "description" : "Get a starter file in the requested format, i.e. for fileFormat=csv it is csv with one header line where listed basic and additional (for subj. area or term type) names of attributes",
        "operationId" : "getStarterFile",
        "parameters" : [ {
          "name" : "entityType",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "enum" : [ "glossaryTerm", "glossary", "adcSubjectArea", "lineage" ]
          }
        }, {
          "name" : "fileFormat",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "enum" : [ "csv", "xlsx" ]
          }
        }, {
          "name" : "subjectAreaIds",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }, {
          "name" : "termTypeIds",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/octet-stream" : { }
            }
          }
        }
      }
    },
    "/v1/import/{exportProcessId}/errors" : {
      "get" : {
        "summary" : "Get errors exporting process",
        "description" : "Returns the errors exporting process without file",
        "operationId" : "getErrorsFileExportingProcess",
        "parameters" : [ {
          "name" : "exportProcessId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportingImportResultProcessDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/import/{exportProcessId}/errors/file" : {
      "get" : {
        "summary" : "Get a file with errors",
        "description" : "Get a file with rows that had been imported with errors",
        "operationId" : "getImportResulErrors",
        "parameters" : [ {
          "name" : "exportProcessId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/octet-stream" : { }
            }
          }
        }
      }
    },
    "/v1/import/{exportProcessId}/errors/status" : {
      "get" : {
        "summary" : "Get errors exporting process status",
        "description" : "Get errors exporting process status",
        "operationId" : "getErrorsFileExportingProcessStatus",
        "parameters" : [ {
          "name" : "exportProcessId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "enum" : [ "pending", "canceled", "paused", "processing", "finished", "failed" ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/import/{importProcessId}/errors" : {
      "post" : {
        "summary" : "Create errors file exporting process",
        "description" : "Create errors file exporting process",
        "operationId" : "createErrorsFileExportingProcess",
        "parameters" : [ {
          "name" : "importProcessId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcImportingHandle"
                }
              }
            }
          }
        }
      }
    },
    "/v1/import/{processId}/finalize" : {
      "post" : {
        "summary" : "Try to commit entities from uploaded file",
        "description" : "Try to commit entities from uploaded file",
        "operationId" : "finalizeImporting",
        "parameters" : [ {
          "name" : "processId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcImportingStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v1/import/{processId}/result" : {
      "get" : {
        "summary" : "Get a processing result of  the imported file by ID",
        "description" : "Get a processing result of  the imported file by ID",
        "operationId" : "getFinalizedResults",
        "parameters" : [ {
          "name" : "processId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100
          }
        }, {
          "name" : "itemStatus",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "any"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcImportingResults"
                }
              }
            }
          }
        }
      }
    },
    "/v1/import/{processId}/status" : {
      "get" : {
        "summary" : "Get a processing status of  the imported file by ID",
        "description" : "Get a processing status of  the imported file by ID",
        "operationId" : "getStatus_1",
        "parameters" : [ {
          "name" : "processId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcImportingStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v1/import/{processId}/validation/result" : {
      "get" : {
        "summary" : "Get a processing result of  the imported file by ID",
        "description" : "Get a processing result of  the imported file by ID",
        "operationId" : "getValidationResults",
        "parameters" : [ {
          "name" : "processId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100
          }
        }, {
          "name" : "itemStatus",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "any"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcImportingResults"
                }
              }
            }
          }
        }
      }
    },
    "/v1/lineage" : {
      "put" : {
        "tags" : [ "Lineage" ],
        "summary" : "Add a lineage edge",
        "description" : "Add a lineage edge with from entity as upstream node and to entity as downstream node.",
        "operationId" : "addLineageEdge",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddLineage"
              }
            }
          }
        },
        "responses" : {
          "404" : {
            "description" : "Entity for instance {id} is not found"
          }
        }
      }
    },
    "/v1/lineage/{entity}/name/{fqn}" : {
      "get" : {
        "tags" : [ "Lineage" ],
        "summary" : "Get lineage by fully qualified name",
        "description" : "Get lineage details for an entity identified by fully qualified name.",
        "operationId" : "getLineageByFQN",
        "parameters" : [ {
          "name" : "entity",
          "in" : "path",
          "description" : "Entity type for which lineage is requested",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "table, report, metrics, or dashboard"
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the entity that uniquely identifies an entity",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upstreamDepth",
          "in" : "query",
          "description" : "Upstream depth of lineage (default=1, min=0, max=3)",
          "schema" : {
            "maximum" : 3,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 1
          }
        }, {
          "name" : "downstreamDepth",
          "in" : "query",
          "description" : "Upstream depth of lineage (default=1, min=0, max=3)",
          "schema" : {
            "maximum" : 3,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Entity lineage",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityLineage"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/lineage/{entity}/{id}" : {
      "get" : {
        "tags" : [ "Lineage" ],
        "summary" : "Get lineage by Id",
        "description" : "Get lineage details for an entity identified by `Id`.",
        "operationId" : "getLineage",
        "parameters" : [ {
          "name" : "entity",
          "in" : "path",
          "description" : "Entity type for which lineage is requested",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "table, report, metrics, or dashboard"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the entity",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upstreamDepth",
          "in" : "query",
          "description" : "Upstream depth of lineage (default=1, min=0, max=3)",
          "schema" : {
            "maximum" : 3,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 1
          }
        }, {
          "name" : "downstreamDepth",
          "in" : "query",
          "description" : "Upstream depth of lineage (default=1, min=0, max=3)",
          "schema" : {
            "maximum" : 3,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Entity lineage",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityLineage"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity for instance {id} is not found"
          }
        }
      }
    },
    "/v1/lineage/{fromEntity}/{fromId}/{toEntity}/{toId}" : {
      "delete" : {
        "tags" : [ "Lineage" ],
        "summary" : "Delete a lineage edge",
        "description" : "Delete a lineage edge with from entity as upstream node and to entity as downstream node.",
        "operationId" : "deleteLineageEdge",
        "parameters" : [ {
          "name" : "fromEntity",
          "in" : "path",
          "description" : "Entity type of upstream entity of the edge",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "table, report, metrics, or dashboard"
          }
        }, {
          "name" : "fromId",
          "in" : "path",
          "description" : "Entity id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "toEntity",
          "in" : "path",
          "description" : "Entity type for downstream entity of the edge",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "table, report, metrics, or dashboard"
          }
        }, {
          "name" : "toId",
          "in" : "path",
          "description" : "Entity id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "Entity for instance {fromId} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcAdditionDirectives" : {
      "get" : {
        "tags" : [ "adcEntityAdditionDirective" ],
        "summary" : "List entity addition directives",
        "description" : "Get directives",
        "operationId" : "listAdcAdditionDirectives",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,condition,targetType,additionType"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number of directives returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of entity directives before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of entity directives after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of entity addition directives",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcAdditionDirectiveList"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "adcEntityAdditionDirectives" ],
        "summary" : "Create a entity addition directive",
        "description" : "Create a entity addition directive",
        "operationId" : "createAdcAdditionDirective",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdcAdditionDirective"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity addition directive",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcAdditionDirective"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/metadata/adcAdditionDirectives/name/{name}" : {
      "get" : {
        "tags" : [ "metadata" ],
        "summary" : "Get a entity addition directive by name",
        "description" : "Get a entity addition directive by `name`.",
        "operationId" : "getAdcAdditionDirectiveByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,condition,targetType,additionType"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition directive",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcAdditionDirective"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcAdditionDirective for {name} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcAdditionDirectives/type/{type}/propertyParameters" : {
      "get" : {
        "tags" : [ "adcEntityAdditionDirectives" ],
        "summary" : "List of (string) fields which are used by directives for {type}",
        "description" : "List of (string) fields which are used by directives for {type}",
        "operationId" : "getAdcEntityDirectiveFieldsParameters",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Type of extended entity",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of (string) fields which are used by directives",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/metadata/adcAdditionDirectives/{id}" : {
      "get" : {
        "tags" : [ "metadata" ],
        "summary" : "Get a entity addition directive",
        "description" : "Get a entity addition directive `id`.",
        "operationId" : "getAdcAdditionDirectiveByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,condition,targetType,additionType"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition directive",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcAdditionDirective"
                }
              }
            }
          },
          "404" : {
            "description" : "Directive {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "addcEntityAdditionDirectives" ],
        "summary" : "Delete a entity addition directive",
        "description" : "Delete a entity addition directive by given `id`.",
        "operationId" : "deleteAdcAdditionDirective",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "AdcAdditionDirective Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "AdcAdditionDirective for instance {id} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcAdditionDirectives/{id}/versions" : {
      "get" : {
        "tags" : [ "metadata" ],
        "summary" : "List entity directive's verions",
        "description" : "Get a list of all the versions of a entity addition directive `id`",
        "operationId" : "listAllAdcAdditionDirectiveVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "directive Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of directive's versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metadata/adcAdditionDirectives/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "metadata" ],
        "summary" : "Get a version of the entity addition directive",
        "description" : "Get a version of the entity addition directive by given `id`",
        "operationId" : "getSpecificAdcAdditionDirectiveVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "AdcAdditionDirective Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "AdcAdditionDirective version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "team",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcAdditionDirective"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcAdditionDirective for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcEntityAdditions" : {
      "get" : {
        "tags" : [ "adcEntityAdditions" ],
        "summary" : "List entity addition types",
        "description" : "Get a list of entity addition types. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listAdcEntityAdditions",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,attributes"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number of entity addition types returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of entity addition types before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of entity addition types after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of entity addition types",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAdditionList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "adcEntityAdditions" ],
        "operationId" : "createOrUpdateAdcEntityAddition",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdcEntityAddition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAddition"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "adcEntityAdditions" ],
        "summary" : "Create a entity addition type",
        "description" : "Create a new addition type.",
        "operationId" : "createAdcEntityAddition",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdcEntityAddition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAddition"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/metadata/adcEntityAdditions/name/{name}" : {
      "get" : {
        "tags" : [ "adcEntityAdditions" ],
        "summary" : "Get a entity addition type by name",
        "description" : "Get a entity addition type by `name`.",
        "operationId" : "getAdcEntityAdditionByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,attributes"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAddition"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcEntityAddition for instance {name} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcEntityAdditions/restore" : {
      "put" : {
        "tags" : [ "adcEntityAdditions" ],
        "summary" : "Restore a soft deleted AdcEntityAddition.",
        "description" : "Restore a soft deleted AdcEntityAddition.",
        "operationId" : "restore_27",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored entity addition",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAddition"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metadata/adcEntityAdditions/{id}" : {
      "get" : {
        "tags" : [ "adcEntityAdditions" ],
        "summary" : "Get a entity addition type",
        "description" : "Get a entity addition types by `id`.",
        "operationId" : "getAdcEntityAdditionByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,attributes"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAddition"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcEntityAddition for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "adcEntityAdditions" ],
        "summary" : "Delete a entity addition type",
        "description" : "Delete a entity addition types by given `id`.",
        "operationId" : "deleteAdcEntityAddition",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "AdcEntityAddition Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "AdcEntityAddition for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "adcEntityAdditions" ],
        "summary" : "Update a entity addition type",
        "description" : "Update an existing entity addition types with JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchAdcEntityAddition",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/metadata/adcEntityAdditions/{id}/versions" : {
      "get" : {
        "tags" : [ "adcEntityAdditions" ],
        "summary" : "List entity addition types versions",
        "description" : "Get a list of all the versions of a entity addition types identified by `id`",
        "operationId" : "listAllAdcEntityAdditionVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "adcEntityAdditionType Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of entity addition types versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metadata/adcEntityAdditions/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "adcEntityAdditions" ],
        "summary" : "Get a version of the entity addition type",
        "description" : "Get a version of the entity addition types by given `id`",
        "operationId" : "getSpecificAdcEntityAdditionVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "AdcEntityAddition Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "AdcEntityAddition version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "team",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAddition"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcEntityAddition for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcEntityAttributes" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "List entity addition types",
        "description" : "Get a list of entity addition types. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listAdcEntityAttributes",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number of elements returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of entity addition types before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of entity addition types after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "onlyAvailableToUsers",
          "in" : "query",
          "description" : "Возвращать все атрибуты или только те, что могут быть использованы пользователем",
          "schema" : {
            "type" : "string",
            "example" : "true",
            "default" : "false"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of entity addition types",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAttributeList"
                }
              }
            }
          }
        }
      },
      "post" : {
        "operationId" : "createAdcEntityAttribute",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdcEntityAttribute"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity attribute",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAttribute"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/metadata/adcEntityAttributes/glossaryTermAdditionalConfigAttributes" : {
      "get" : {
        "tags" : [ "adcEntityAttributes" ],
        "summary" : "List general User/Group attributes for glossary terms",
        "operationId" : "glossaryTermAdditionalConfigAttributes",
        "parameters" : [ {
          "name" : "termTypes",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/metadata/adcEntityAttributes/json-schema" : {
      "post" : {
        "operationId" : "getAttributeJsonSchema",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdcEntityAttribute"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity attibute json-schema",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/metadata/adcEntityAttributes/name/{name}" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Get a entity addition type by name",
        "description" : "Get a entity addition type by `name`.",
        "operationId" : "getAdcEntityAttributeByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAttribute"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcEntityAttribute for instance {name} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcEntityAttributes/referenceWithTargets" : {
      "get" : {
        "tags" : [ "adcEntityAttributes" ],
        "summary" : "List entity attributes (as entity references) with related usage",
        "operationId" : "listAdcEntityAttributeReferencesWithTargets",
        "parameters" : [ {
          "name" : "dataTypes",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "ilikeQuery",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "non-deleted",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        }, {
          "name" : "target-non-deleted",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/metadata/adcEntityAttributes/referenceWithTargets/{id}" : {
      "get" : {
        "tags" : [ "adcEntityAttributes" ],
        "summary" : "List entity attributes (as entity references) with related usage",
        "operationId" : "listAdcEntityAttributeReferenceWithTargets",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "target-non-deleted",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/metadata/adcEntityAttributes/subjectAreaAdditionalConfigAttributes" : {
      "get" : {
        "tags" : [ "adcEntityAttributes" ],
        "summary" : "List User/Group attributes for subject area",
        "operationId" : "subjectAreaAdditionalConfigAttributes",
        "parameters" : [ {
          "name" : "glossaryId",
          "in" : "query",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }, {
          "name" : "subjectAreaId",
          "in" : "query",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/metadata/adcEntityAttributes/used" : {
      "get" : {
        "tags" : [ "adcEntityAttributes" ],
        "summary" : "List used entity attributes by glossaryIds",
        "operationId" : "listUsedAdcEntityAttributesByGlossaryIds",
        "parameters" : [ {
          "name" : "glossaryIds",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "termTypeId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "nameRegExp",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/metadata/adcEntityAttributes/withTargets" : {
      "get" : {
        "tags" : [ "adcEntityAttributes" ],
        "summary" : "List entity attributes with related usage",
        "operationId" : "listAdcEntityAttributesWithTargets_1",
        "parameters" : [ {
          "name" : "dataTypes",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "ilikeQuery",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "onlyUsable",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "attributeInclude",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        }, {
          "name" : "withoutTargets",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "targetInclude",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        }, {
          "name" : "nameOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc", "none" ]
          }
        }, {
          "name" : "typeOrder",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc", "none" ]
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/metadata/adcEntityAttributes/withTargets/{id}" : {
      "get" : {
        "tags" : [ "adcEntityAttributes" ],
        "summary" : "List entity attributes with related usage",
        "operationId" : "listAdcEntityAttributesWithTargets",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "targetInclude",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/metadata/adcEntityAttributes/{id}" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Get a entity addition type",
        "description" : "Get a entity addition types by `id`.",
        "operationId" : "getAdcEntityAttributeByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAttribute"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcEntityAttribute for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Delete a entity addition type",
        "description" : "Delete a entity addition types by given `id`.",
        "operationId" : "deleteAdcEntityAttribute",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "AdcEntityAttribute Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "AdcEntityAttribute for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Update a entity addition type",
        "description" : "Update an existing entity addition types with JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchAdcEntityAttribute",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/metadata/adcEntityAttributes/{id}/versions" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "List entity addition types versions",
        "description" : "Get a list of all the versions of a entity addition types identified by `id`",
        "operationId" : "listAllAdcEntityAttributeVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "adcEntityAdditionType Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of entity addition types versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metadata/adcEntityAttributes/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Get a version of the entity addition type",
        "description" : "Get a version of the entity addition types by given `id`",
        "operationId" : "getSpecificAdcEntityAttributeVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "AdcEntityAttribute Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "AdcEntityAttribute version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "team",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAttribute"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcEntityAttribute for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcMetadata/byContent" : {
      "post" : {
        "tags" : [ "AdcMetadata" ],
        "summary" : "Get a entity full type by entity content",
        "description" : "Get a entity full type by entity content",
        "operationId" : "getByEntityContent",
        "parameters" : [ {
          "name" : "entityType",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ObjectNode"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityMetadataResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "If type or entity aren't specified"
          }
        }
      }
    },
    "/v1/metadata/adcMetadata/byVersions" : {
      "get" : {
        "tags" : [ "AdcMetadata" ],
        "summary" : "Get a entity full type by base and addition types' names and versions",
        "description" : "Get a entity full type by base and addition types' names and versions",
        "operationId" : "getByVersions",
        "parameters" : [ {
          "name" : "entityType",
          "in" : "query",
          "description" : "Name of entity type",
          "schema" : {
            "type" : "string",
            "example" : "glossaryTerm"
          }
        }, {
          "name" : "entityTypeVersion",
          "in" : "query",
          "description" : "Version of entity type",
          "schema" : {
            "type" : "number",
            "format" : "double",
            "example" : 0.1
          }
        }, {
          "name" : "additionVersions",
          "in" : "query",
          "description" : "Comma separated names of addition types with versions",
          "schema" : {
            "type" : "string",
            "example" : "dataMart@0.1,otherAddition@1.2",
            "default" : ""
          }
        }, {
          "name" : "attributeVersions",
          "in" : "query",
          "description" : "Comma separated names of attribute types with versions",
          "schema" : {
            "type" : "string",
            "example" : "boba@0.1,biba@1.2",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity full type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityMetadataResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcType for one of names is not found"
          },
          "400" : {
            "description" : "Something gone wrong"
          }
        }
      }
    },
    "/v1/metadata/adcMetadata/createRequest/byName" : {
      "get" : {
        "tags" : [ "AdcMetadata" ],
        "summary" : "Get a crate request schema",
        "description" : "Get a crate request schema",
        "operationId" : "getCreateRequestSchema",
        "parameters" : [ {
          "name" : "entityType",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Create request schema and attribute argument paths",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityMetadataResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Something"
          }
        }
      }
    },
    "/v1/metadata/adcMetadata/helpers/adcGlossaryTermType/additionAndDirective" : {
      "get" : {
        "tags" : [ "adcEntityAdditions", "AdcMetadata" ],
        "summary" : "Get a entity addition type",
        "description" : "Get a entity addition types by `id`.",
        "operationId" : "getAdcEntityAdditionByID_2",
        "parameters" : [ {
          "name" : "termTypeId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAddition"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcEntityAddition for instance {id} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcMetadata/helpers/adcGlossaryTermType/{id}" : {
      "delete" : {
        "tags" : [ "adcEntityAdditions", "AdcMetadata" ],
        "summary" : "Delete addition for term type",
        "description" : "Delete addition for term type",
        "operationId" : "deleteAdditionForTermType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "AdcEntityAddition for instance {id} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcMetadata/helpers/adcGlossaryTermType/{id}/configureBaseAttributes" : {
      "post" : {
        "tags" : [ "adcEntityMetadata", "AdcMetadata" ],
        "summary" : "Configure 'required' and 'unpowered' properties of base attributes for term type",
        "description" : "Configure 'required' and 'unpowered' properties of base attributes for term type",
        "operationId" : "configureBaseAttributes",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "optional",
          "in" : "query",
          "description" : "Colon separated list of base attribute's names; by default attribute is 'required'",
          "schema" : {
            "type" : "string",
            "example" : "owner,primarySubjectArea",
            "default" : ""
          }
        }, {
          "name" : "unpowered",
          "in" : "query",
          "description" : "Colon separated list of base attribute's names; by default attribute is 'powered'",
          "schema" : {
            "type" : "string",
            "example" : "owner,synonyms",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Empty response",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "List of errors",
            "content" : {
              "application/json" : { }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/v1/metadata/adcMetadata/helpers/glossaries/additionAndDirective" : {
      "get" : {
        "tags" : [ "adcEntityAdditions", "AdcMetadata" ],
        "summary" : "Get a entity addition type",
        "description" : "Get a entity addition types by `id`.",
        "operationId" : "getAdcEntityAdditionByID_1",
        "parameters" : [ {
          "name" : "glossaryId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcEntityAddition"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcEntityAddition for instance {id} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcMetadata/helpers/glossaries/{id}" : {
      "delete" : {
        "tags" : [ "adcEntityAdditions", "AdcMetadata" ],
        "summary" : "Delete addition for glossary",
        "description" : "Delete addition for glossary",
        "operationId" : "deleteAdditionForGlossary",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "AdcEntityAddition for instance {id} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcMetadata/validateEntityAttributes" : {
      "post" : {
        "tags" : [ "AdcMetadata" ],
        "summary" : "Validate specified additional entity attributes",
        "description" : "Validate specified additional entity attributes",
        "operationId" : "validateEntityAttributes",
        "parameters" : [ {
          "name" : "additionAttributesKeys",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entityType",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ObjectNode"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "List of validation errors related to additional attributes",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "If type or entity aren't specified"
          }
        }
      }
    },
    "/v1/metadata/adcRelationships" : {
      "post" : {
        "tags" : [ "AdcRelationships" ],
        "operationId" : "createAdcRelationship",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdcRelationship"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity attribute",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcRelationship"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/metadata/adcRelationships/getCandidates" : {
      "post" : {
        "tags" : [ "AdcRelationships" ],
        "summary" : "Get entities-candidates for reference attribute",
        "description" : "Get entities-candidates for reference attribute. If `candidateEntityType` is glossaryTerm, then any item has payload with glossary/glossaryTermType displayNames",
        "operationId" : "getReferenceAttributeCandidates",
        "parameters" : [ {
          "name" : "attributeKey",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entityType",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "candidateEntityType",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "glossaryIds",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }, {
          "name" : "termTypeIds",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 500
          }
        }, {
          "name" : "namePattern",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ObjectNode"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "List entities-candidates",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "In case of problems"
          }
        }
      }
    },
    "/v1/metadata/adcRelationships/name/{name}" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes", "AdcRelationships" ],
        "summary" : "Get a entity addition type by name",
        "description" : "Get a entity addition type by `name`.",
        "operationId" : "getAdcRelationshipByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcRelationship"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcRelationship for instance {name} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcRelationships/{id}" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes", "AdcRelationships" ],
        "summary" : "Return AdcRelationship with all references",
        "description" : "Get a entity addition types by `id`.",
        "operationId" : "getAdcRelationshipByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcRelationship"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcRelationship for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "adcEntityAdditionTypes", "AdcRelationships" ],
        "summary" : "Delete a entity addition type",
        "description" : "Delete a entity addition types by given `id`.",
        "operationId" : "deleteAdcRelationship",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "AdcRelationship Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "AdcRelationship for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "adcEntityAdditionTypes", "AdcRelationships" ],
        "summary" : "Update a entity addition type",
        "description" : "Update an existing entity addition types with JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchAdcRelationship",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/metadata/adcRelationships/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes", "AdcRelationships" ],
        "summary" : "Get a version of the entity addition type",
        "description" : "Get a version of the entity addition types by given `id`",
        "operationId" : "getSpecificAdcRelationshipVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "AdcRelationship Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "AdcRelationship version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "team",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcRelationship"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcRelationship for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcTypes" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "List entity addition types",
        "description" : "Get a list of entity addition types. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listAdcTypes",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,schema,isBase"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number of entity addition types returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of entity addition types before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of entity addition types after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of entity addition types",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcTypeList"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Create a entity addition type",
        "description" : "Create a new addition type.",
        "operationId" : "createAdcType",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdcType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcType"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/metadata/adcTypes/name/{name}" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Get a entity addition type by name",
        "description" : "Get a entity addition type by `name`.",
        "operationId" : "getAdcTypeByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,schema,isBase"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcType"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcType for instance {name} is not found"
          }
        }
      }
    },
    "/v1/metadata/adcTypes/{id}" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Get a entity addition type",
        "description" : "Get a entity addition types by `id`.",
        "operationId" : "getAdcTypeByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,schema,isBase"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcType"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcType for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Delete a entity addition type",
        "description" : "Delete a entity addition types by given `id`.",
        "operationId" : "deleteAdcType",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "AdcType Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "AdcType for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Update a entity addition type",
        "description" : "Update an existing entity addition types with JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchAdcType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/metadata/adcTypes/{id}/versions" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "List entity addition types versions",
        "description" : "Get a list of all the versions of a entity addition types identified by `id`",
        "operationId" : "listAllAdcTypeVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "adcEntityAdditionType Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of entity addition types versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metadata/adcTypes/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "adcEntityAdditionTypes" ],
        "summary" : "Get a version of the entity addition type",
        "description" : "Get a version of the entity addition types by given `id`",
        "operationId" : "getSpecificAdcTypeVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "AdcType Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "AdcType version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "team",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcType"
                }
              }
            }
          },
          "404" : {
            "description" : "AdcType for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/metadata/types" : {
      "get" : {
        "tags" : [ "Metadata" ],
        "summary" : "List types",
        "description" : "Get a list of types. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listTypes",
        "parameters" : [ {
          "name" : "category",
          "in" : "query",
          "description" : "Filter types by metadata type category.",
          "schema" : {
            "type" : "string",
            "example" : "Property, Entity"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number types returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of types before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of types after this cursor",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of types",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TypeList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Metadata" ],
        "summary" : "Create or update a type",
        "description" : "Create a new type, if it does not exist or update an existing type.",
        "operationId" : "createOrUpdate_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Type"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Metadata" ],
        "summary" : "Create a type",
        "description" : "Create a new type.",
        "operationId" : "createType",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Type"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/metadata/types/name/{name}" : {
      "get" : {
        "tags" : [ "Metadata" ],
        "summary" : "Get a type by name",
        "description" : "Get a type by name.",
        "operationId" : "getTypeByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the type",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "customProperties"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Type"
                }
              }
            }
          },
          "404" : {
            "description" : "Type for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Metadata" ],
        "summary" : "Delete a type by name",
        "description" : "Delete a type by `name`.",
        "operationId" : "deleteTypeByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the type",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "type for instance {name} is not found"
          }
        }
      }
    },
    "/v1/metadata/types/{id}" : {
      "get" : {
        "tags" : [ "Metadata" ],
        "summary" : "Get a type",
        "description" : "Get a type by `id`.",
        "operationId" : "getTypeByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the type",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "customProperties"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Type"
                }
              }
            }
          },
          "404" : {
            "description" : "Type for instance {id} is not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Metadata" ],
        "summary" : "Add or update a Property to an entity",
        "description" : "Add or update a property to an entity type. Properties can only be added to entity type and not property type.",
        "operationId" : "addProperty",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the type",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomProperty"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "type for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Metadata" ],
        "summary" : "Delete a type by id",
        "description" : "Delete a type by `id`.",
        "operationId" : "deleteType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the type",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "type for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Metadata" ],
        "summary" : "Update a type",
        "description" : "Update an existing type using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the type",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/metadata/types/{id}/versions" : {
      "get" : {
        "tags" : [ "Metadata" ],
        "summary" : "List type versions",
        "description" : "Get a list of all the versions of a type identified by `id`",
        "operationId" : "listAllTypeVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the type",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of type versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/metadata/types/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Metadata" ],
        "summary" : "Get a version of the types",
        "description" : "Get a version of the type by given `id`",
        "operationId" : "getSpecificTypeVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the type",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "type version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "types",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Type"
                }
              }
            }
          },
          "404" : {
            "description" : "Type for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/metadata/{type}/attributes" : {
      "get" : {
        "tags" : [ "Attributes" ],
        "summary" : "Получить все атрибуты для указанной сущности",
        "description" : "Возвращает все атрибуты для указанной сущности по типу и дополнительному типу (если указан)",
        "operationId" : "getAllAttributes",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subTypeId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success get all",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Attributes"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid params"
          }
        }
      },
      "patch" : {
        "tags" : [ "Attributes" ],
        "summary" : "Обновить конфигурацию атрибута",
        "description" : "Обновляет конфигурацию атрибутов для указанной сущности по типу и дополнительному типу (если указан)",
        "operationId" : "patchAttributeConfig",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subTypeId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{path: /approvedAt/config/order, op: replace, value: 12}{path: /PrimerZnacheniya/config/segment, op: replace, value: baseRight}{path: /CustomAttribute, op: add, value: { keyName: CustomAttribute,  config: {  hidden: false,  required: true,  segment: baseRight,order: 15 }}},{path: /CustomAttribute, op: remove, value: { keyName: CustomAttribute }}]"
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success patch"
          },
          "400" : {
            "description" : "Invalid params"
          }
        }
      }
    },
    "/v1/metrics" : {
      "get" : {
        "tags" : [ "Metrics (beta)" ],
        "summary" : "List metrics",
        "description" : "Get a list of metrics. Use `fields` parameter to get only necessary fields.",
        "operationId" : "listMetrics",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,usageSummary,domain"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of metrics before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of metrics after this cursor",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of metrics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MetricsList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Metrics (beta)" ],
        "summary" : "Create or update a metric",
        "description" : "Create a new metric, if it does not exist or update an existing metric.",
        "operationId" : "createOrUpdateMetric",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Metrics"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The metric",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Metrics"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Metrics (beta)" ],
        "summary" : "Create a metric",
        "description" : "Create a new metric.",
        "operationId" : "createMetric",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Metrics"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The metric",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Metrics"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/metrics/{id}" : {
      "get" : {
        "tags" : [ "Metrics (beta)" ],
        "summary" : "Get a metric by Id",
        "description" : "Get a metric by `Id`.",
        "operationId" : "getMetricByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the metric",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,usageSummary,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The metrics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Metrics"
                }
              }
            }
          },
          "404" : {
            "description" : "Metrics for instance {id} is not found"
          }
        }
      }
    },
    "/v1/mlmodels" : {
      "get" : {
        "tags" : [ "ML Models" ],
        "summary" : "List ML models",
        "description" : "Get a list of mlmodels, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listMlModels",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,dashboard,followers,tags,usageSummary,extension,domain"
          }
        }, {
          "name" : "service",
          "in" : "query",
          "description" : "Filter MlModels by service name",
          "schema" : {
            "type" : "string",
            "example" : "airflow"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number models returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of models before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of models after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of models",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModelList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ML Models" ],
        "summary" : "Create or update an ML model",
        "description" : "Create a new ML model, if it does not exist or update an existing model.",
        "operationId" : "createOrUpdateMlModel",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateMlModel"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModel"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "ML Models" ],
        "summary" : "Create an ML model",
        "description" : "Create a new ML model.",
        "operationId" : "createMlModel",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateMlModel"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "ML Model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModel"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/mlmodels/name/{fqn}" : {
      "get" : {
        "tags" : [ "ML Models" ],
        "summary" : "Get an ML model by fully qualified name",
        "description" : "Get an ML model by fully qualified name.",
        "operationId" : "getMlModelByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of ML Model",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,dashboard,followers,tags,usageSummary,extension,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Model for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "ML Models" ],
        "summary" : "Delete a ML model by fully qualified name",
        "description" : "Delete an ML model by `fullyQualifiedName`.",
        "operationId" : "deleteMlModelByFQN",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Name of the ML Model",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "model for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/mlmodels/restore" : {
      "put" : {
        "tags" : [ "ML Models" ],
        "summary" : "Restore a soft deleted ML model",
        "description" : "Restore a soft deleted ML Model.",
        "operationId" : "restore_12",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the MlModel ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/mlmodels/{id}" : {
      "get" : {
        "tags" : [ "ML Models" ],
        "summary" : "Get an ML model by Id",
        "description" : "Get an ML model by `Id`.",
        "operationId" : "getMlModelByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the ML Model",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,dashboard,followers,tags,usageSummary,extension,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Model for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "ML Models" ],
        "summary" : "Delete an ML model by Id",
        "description" : "Delete an ML model by `Id`.",
        "operationId" : "deleteMlModel",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the ML Model",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "model for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "ML Models" ],
        "summary" : "Update an ML model",
        "description" : "Update an existing ML model using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchMlModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the ML Model",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/mlmodels/{id}/followers" : {
      "put" : {
        "tags" : [ "ML Models" ],
        "summary" : "Add a follower",
        "description" : "Add a user identified by `userId` as follower of this model",
        "operationId" : "addFollower_4",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the ML Model",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Id of the user to be added as follower",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "format" : "uuid"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          },
          "404" : {
            "description" : "model for instance {id} is not found"
          }
        }
      }
    },
    "/v1/mlmodels/{id}/followers/{userId}" : {
      "delete" : {
        "tags" : [ "ML Models" ],
        "summary" : "Remove a follower",
        "description" : "Remove the user identified `userId` as a follower of the model.",
        "operationId" : "deleteFollower_5",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the ML Model",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "Id of the user being removed as follower",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          }
        }
      }
    },
    "/v1/mlmodels/{id}/versions" : {
      "get" : {
        "tags" : [ "ML Models" ],
        "summary" : "List ML model versions",
        "description" : "Get a list of all the versions of an ML Model identified by `id`",
        "operationId" : "listAllMlModelVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the ML Model",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Ml Model versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/mlmodels/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "ML Models" ],
        "summary" : "Get a version of the ML model",
        "description" : "Get a version of the ML model by given `id`",
        "operationId" : "getSpecificMlModelVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the ML Model",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "ML Model version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "MlModel",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModel"
                }
              }
            }
          },
          "404" : {
            "description" : "ML Model for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/objects/lock" : {
      "get" : {
        "tags" : [ "Object locking" ],
        "summary" : "List of objects that are locked",
        "description" : "Get a list of objects that are currently locked by someone.",
        "operationId" : "listObjectLocks",
        "responses" : {
          "200" : {
            "description" : "List of object locks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ObjectLocksList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/objects/lock/{id}" : {
      "get" : {
        "tags" : [ "Object locking" ],
        "summary" : "Check whether the given object is locked",
        "description" : "Check whether the given object is locked.",
        "operationId" : "checkIfObjectLocked",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The lock information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ObjectLock"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "post" : {
        "tags" : [ "Object locking" ],
        "summary" : "Lock an object",
        "description" : "Lock an object.",
        "operationId" : "lockObject",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The lock information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ObjectLock"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "403" : {
            "description" : "Forbidden"
          }
        }
      },
      "delete" : {
        "tags" : [ "Object locking" ],
        "summary" : "Remove locking for the given object object",
        "description" : "Remove locking for the given object object.",
        "operationId" : "unlock",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The lock information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ObjectLock"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "403" : {
            "description" : "Forbidden"
          }
        }
      }
    },
    "/v1/objects/lock/{id}/{lockToken}" : {
      "post" : {
        "tags" : [ "Object locking" ],
        "summary" : "Lock an object with token",
        "description" : "Lock an object with token.",
        "operationId" : "lockObject_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lockToken",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The lock information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ObjectLock"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "403" : {
            "description" : "Forbidden"
          }
        }
      },
      "delete" : {
        "tags" : [ "Object locking" ],
        "summary" : "Remove locking for the given object object and token",
        "description" : "Remove locking for the given object object and token.",
        "operationId" : "unlock_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lockToken",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The lock information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ObjectLock"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "403" : {
            "description" : "Forbidden"
          }
        }
      }
    },
    "/v1/objects/{type}/{id}/version/{version}" : {
      "get" : {
        "tags" : [ "ObjectVersion" ],
        "operationId" : "getVersion_2",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityInterface"
                }
              }
            }
          }
        }
      }
    },
    "/v1/objects/{type}/{id}/versions" : {
      "get" : {
        "tags" : [ "ObjectVersion" ],
        "operationId" : "getVersionList",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/permissions" : {
      "get" : {
        "tags" : [ "Permissions" ],
        "summary" : "Get permissions for logged in user",
        "operationId" : "getResourcePermissions",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "Permission for user specified in this query param. If not specified, the user is defaulted to the logged in user",
          "schema" : {
            "type" : "string",
            "example" : "john"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Permissions for logged in user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourcePermissionList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/permissions/policies" : {
      "get" : {
        "tags" : [ "Permissions" ],
        "summary" : "Get permissions for a set of policies",
        "operationId" : "getPermissionsForPolicies",
        "parameters" : [ {
          "name" : "ids",
          "in" : "query",
          "description" : "List of policy of ids",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Permissions for a set of policies",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourcePermissionList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/permissions/{resource}" : {
      "get" : {
        "tags" : [ "Permissions" ],
        "summary" : "Get permissions a given resource/entity type for logged in user",
        "operationId" : "getResourceTypePermission",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "Permission for user specified in this query param. If not specified, the user is defaulted to the logged in user",
          "schema" : {
            "type" : "string",
            "example" : "john"
          }
        }, {
          "name" : "resource",
          "in" : "path",
          "description" : "Type of the resource",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Permissions for logged in user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourcePermissionList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/permissions/{resource}/name/{name}" : {
      "get" : {
        "tags" : [ "Permissions" ],
        "summary" : "Get permissions for a given entity name for a logged in user",
        "operationId" : "getResourcePermissionByName",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "Permission for user specified in this query param. If not specified, the user is defaulted to the logged in user",
          "schema" : {
            "type" : "string",
            "example" : "john"
          }
        }, {
          "name" : "resource",
          "in" : "path",
          "description" : "Type of the resource",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the entity",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Permissions for logged in user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourcePermissionList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/permissions/{resource}/{id}" : {
      "get" : {
        "tags" : [ "Permissions" ],
        "summary" : "Get permissions for a given entity for a logged in user",
        "operationId" : "getResourcePermission",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "Permission for user specified in this query param. If not specified, the user is defaulted to the logged in user",
          "schema" : {
            "type" : "string",
            "example" : "john"
          }
        }, {
          "name" : "resource",
          "in" : "path",
          "description" : "Type of the resource",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the entity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Permissions for logged in user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourcePermissionList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/pipelines" : {
      "get" : {
        "tags" : [ "Pipelines" ],
        "summary" : "List pipelines",
        "description" : "Get a list of pipelines, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listPipelines",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tasks,pipelineStatus,followers,tags,extension,scheduleInterval,domain"
          }
        }, {
          "name" : "service",
          "in" : "query",
          "description" : "Filter pipelines by service name",
          "schema" : {
            "type" : "string",
            "example" : "airflow"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number pipelines returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of pipelines before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of pipelines after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of pipelines",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PipelineList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Pipelines" ],
        "summary" : "Create or update a pipeline",
        "description" : "Create a new pipeline, if it does not exist or update an existing pipeline.",
        "operationId" : "createOrUpdatePipeline",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePipeline"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The pipeline",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Pipelines" ],
        "summary" : "Create a pipeline",
        "description" : "Create a new pipeline.",
        "operationId" : "createPipeline",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePipeline"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The pipeline",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/pipelines/name/{fqn}" : {
      "get" : {
        "tags" : [ "Pipelines" ],
        "summary" : "Get a pipeline by fully qualified name",
        "description" : "Get a pipeline by fully qualified name.",
        "operationId" : "getPipelineByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the pipeline",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tasks,pipelineStatus,followers,tags,extension,scheduleInterval,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The pipeline",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "404" : {
            "description" : "Pipeline for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Pipelines" ],
        "summary" : "Delete a pipeline by fully qualified name",
        "description" : "Delete a pipeline by `fullyQualifiedName`.",
        "operationId" : "deletePipelineByFQN",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the pipeline",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Pipeline for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/pipelines/restore" : {
      "put" : {
        "tags" : [ "Pipelines" ],
        "summary" : "Restore a soft deleted pipeline",
        "description" : "Restore a soft deleted pipeline.",
        "operationId" : "restore_13",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Pipeline ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pipeline"
                }
              }
            }
          }
        }
      }
    },
    "/v1/pipelines/{fqn}/status" : {
      "get" : {
        "tags" : [ "Pipelines" ],
        "summary" : "List pipeline status",
        "description" : "Get a list of pipeline status.parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listPipelineStatuses",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the pipeline",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startTs",
          "in" : "query",
          "description" : "Filter pipeline statues after the given start timestamp",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "endTs",
          "in" : "query",
          "description" : "Filter pipeline statues before the given end timestamp",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of pipeline statuses.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestCaseList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Pipelines" ],
        "summary" : "Add status data",
        "description" : "Add status data to the pipeline.",
        "operationId" : "addStatusData",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the pipeline",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PipelineStatus"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The pipeline with a the new status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/pipelines/{fqn}/status/{timestamp}" : {
      "delete" : {
        "tags" : [ "Pipelines" ],
        "summary" : "Delete pipeline status",
        "description" : "Delete pipeline status for a pipeline.",
        "operationId" : "DeletePipelineStatus",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the pipeline",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "timestamp",
          "in" : "path",
          "description" : "Timestamp of the pipeline status",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the PipelineStatus",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pipeline"
                }
              }
            }
          }
        }
      }
    },
    "/v1/pipelines/{id}" : {
      "get" : {
        "tags" : [ "Pipelines" ],
        "summary" : "Get a pipeline by Id",
        "description" : "Get a pipeline by `Id`.",
        "operationId" : "getPipelineWithID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the pipeline",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,tasks,pipelineStatus,followers,tags,extension,scheduleInterval,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The pipeline",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "404" : {
            "description" : "Pipeline for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Pipelines" ],
        "summary" : "Delete a pipeline by Id",
        "description" : "Delete a pipeline by `Id`.",
        "operationId" : "deletePipeline",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the pipeline",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Pipeline for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Pipelines" ],
        "summary" : "Update a pipeline",
        "description" : "Update an existing pipeline using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchPipeline",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the pipeline",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/pipelines/{id}/followers" : {
      "put" : {
        "tags" : [ "Pipelines" ],
        "summary" : "Add a follower",
        "description" : "Add a user identified by `userId` as follower of this pipeline",
        "operationId" : "addFollower_5",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the pipeline",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Id of the user to be added as follower",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          },
          "404" : {
            "description" : "Pipeline for instance {id} is not found"
          }
        }
      }
    },
    "/v1/pipelines/{id}/followers/{userId}" : {
      "delete" : {
        "tags" : [ "Pipelines" ],
        "summary" : "Remove a follower",
        "description" : "Remove the user identified `userId` as a follower of the pipeline.",
        "operationId" : "deleteFollower_6",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the pipeline",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "Id of the user being removed as follower",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          }
        }
      }
    },
    "/v1/pipelines/{id}/versions" : {
      "get" : {
        "tags" : [ "Pipelines" ],
        "summary" : "List pipeline versions",
        "description" : "Get a list of all the versions of a pipeline identified by `Id`",
        "operationId" : "listAllPipelineVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the pipeline",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of pipeline versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/pipelines/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Pipelines" ],
        "summary" : "Get a version of the pipeline",
        "description" : "Get a version of the pipeline by given `Id`",
        "operationId" : "getSpecificPipelineVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the pipeline",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Pipeline version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "pipeline",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "404" : {
            "description" : "Pipeline for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/policies" : {
      "get" : {
        "tags" : [ "Policies" ],
        "summary" : "List policies",
        "description" : "Get a list of policies. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listPolicies",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,location,teams,roles"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number policies returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of policies before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of policies after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of policies",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Policies" ],
        "summary" : "Create or update a policy",
        "description" : "Create a new policy, if it does not exist or update an existing policy.",
        "operationId" : "createOrUpdatePolicy",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePolicy"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The policy",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Policy"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Policies" ],
        "summary" : "Create a policy",
        "description" : "Create a new policy.",
        "operationId" : "createPolicy",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePolicy"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The policy",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Policy"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/policies/functions" : {
      "get" : {
        "tags" : [ "Policies" ],
        "summary" : "Get list of policy functions used in authoring conditions in policy rules.",
        "description" : "Get list of policy functions used in authoring conditions in policy rules.",
        "operationId" : "listPolicyFunctions",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListFunction"
                }
              }
            }
          }
        }
      }
    },
    "/v1/policies/name/{fqn}" : {
      "get" : {
        "tags" : [ "Policies" ],
        "summary" : "Get a policy by fully qualified name",
        "description" : "Get a policy by fully qualified name.",
        "operationId" : "getPolicyByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the policy",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,location,teams,roles"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The policy",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Policy"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Policies" ],
        "summary" : "Delete a policy by fully qualified name",
        "description" : "Delete a policy by `fullyQualifiedName`.",
        "operationId" : "deletePolicyByFQN",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the policy",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "policy for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/policies/resources" : {
      "get" : {
        "tags" : [ "Policies" ],
        "summary" : "Get list of policy resources used in authoring a policy",
        "description" : "Get list of policy resources used in authoring a policy.",
        "operationId" : "listPolicyResources",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListResourceDescriptor"
                }
              }
            }
          }
        }
      }
    },
    "/v1/policies/restore" : {
      "put" : {
        "tags" : [ "Policies" ],
        "summary" : "Restore a soft deleted policy",
        "description" : "Restore a soft deleted policy.",
        "operationId" : "restore_14",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Policy ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Policy"
                }
              }
            }
          }
        }
      }
    },
    "/v1/policies/validation/condition/{expression}" : {
      "get" : {
        "tags" : [ "Policies" ],
        "summary" : "Validate a given condition",
        "description" : "Validate a given condition expression used in authoring rules.",
        "operationId" : "validateCondition_1",
        "parameters" : [ {
          "name" : "expression",
          "in" : "path",
          "description" : "Expression of validating rule",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No value is returned"
          },
          "400" : {
            "description" : "Invalid expression"
          }
        }
      }
    },
    "/v1/policies/{id}" : {
      "get" : {
        "tags" : [ "Policies" ],
        "summary" : "Get a policy by id",
        "description" : "Get a policy by `Id`.",
        "operationId" : "getPolicyByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the policy",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,location,teams,roles"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The policy",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Policy"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Policies" ],
        "summary" : "Delete a policy by Id",
        "description" : "Delete a policy by `Id`.",
        "operationId" : "deletePolicy",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the policy",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "policy for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Policies" ],
        "summary" : "Update a policy",
        "description" : "Update an existing policy using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchPolicy",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the policy",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/policies/{id}/versions" : {
      "get" : {
        "tags" : [ "Policies" ],
        "summary" : "List policy versions",
        "description" : "Get a list of all the versions of a policy identified by `id`",
        "operationId" : "listAllPolicyVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the policy",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of policy versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/policies/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Policies" ],
        "summary" : "Get a version of the policy by Id",
        "description" : "Get a version of the policy by given `Id`",
        "operationId" : "getSpecificPolicyVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the policy",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "policy version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "policy",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Policy"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/politics" : {
      "get" : {
        "tags" : [ "Politics" ],
        "summary" : "List policies",
        "description" : "Get a list of policies. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listPolicies_1",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,location,teams,roles"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number policies returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of policies before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of policies after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of policies",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyList"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Politics" ],
        "summary" : "Create a policy",
        "description" : "Create a new policy.",
        "operationId" : "createPolicy_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePolitic"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The policy",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePolitic"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/politics/conditions/configuration" : {
      "post" : {
        "tags" : [ "Politic condition" ],
        "summary" : "Check and narrow down the parameters.",
        "description" : "Check and narrow down the parameters.",
        "operationId" : "checkAndNarrowDownParams",
        "requestBody" : {
          "description" : "Information about the current politic",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ShortPoliticInfoDto"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Available condition configuration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AvailableConditionConfigurationDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/politics/{id}" : {
      "get" : {
        "tags" : [ "Politics" ],
        "summary" : "Get a policy by id",
        "description" : "Get a policy by `Id`.",
        "operationId" : "getPolicyByID_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the policy",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,location,teams,roles"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The policy",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Policy"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Politics" ],
        "summary" : "Delete a policy by Id",
        "description" : "Delete a policy by `Id`.",
        "operationId" : "deletePolicy_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the policy",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "policy for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Politics" ],
        "summary" : "Update a policy",
        "description" : "Update an existing policy using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchPolicy_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the policy",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PoliticDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/politics/{id}/versions" : {
      "get" : {
        "tags" : [ "Politics" ],
        "summary" : "List policy versions",
        "description" : "Get a list of all the versions of a policy identified by `id`",
        "operationId" : "listAllPolicyVersion_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the policy",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of policy versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/politics/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Politics" ],
        "summary" : "Get a version of the policy by Id",
        "description" : "Get a version of the policy by given `Id`",
        "operationId" : "getSpecificPolicyVersion_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the policy",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "policy version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "policy",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Policy"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/processes" : {
      "get" : {
        "tags" : [ "Processes" ],
        "summary" : "Get info about all processes",
        "description" : "Get info about all processes",
        "operationId" : "getProcessList",
        "parameters" : [ {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of processes before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of processes after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number processes returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64",
            "default" : 10
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Returns only processes with the specified types",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "import", "importing-result-export", "export", "group-change" ]
            }
          }
        }, {
          "name" : "ownerId",
          "in" : "query",
          "description" : "Returns only processes with the specified ownerId",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Returns only processes with the specified statuses",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "pending", "processing", "canceled", "paused", "finished", "failed" ]
            }
          }
        }, {
          "name" : "startedAt",
          "in" : "query",
          "description" : "Returns only the process with the specified started at that matches the startedAtMatchType",
          "schema" : {
            "type" : "integer",
            "description" : "timestamp",
            "format" : "int64"
          }
        }, {
          "name" : "startedAtMatchType",
          "in" : "query",
          "description" : "Match type for started at",
          "schema" : {
            "type" : "string",
            "default" : "eq",
            "enum" : [ "eq", "gt", "lt", "ge", "le" ]
          }
        }, {
          "name" : "finishedAt",
          "in" : "query",
          "description" : "Returns only the process with the specified finished at that matches the finishedAtMatchType",
          "schema" : {
            "type" : "integer",
            "description" : "timestamp",
            "format" : "int64"
          }
        }, {
          "name" : "finishedAtMatchType",
          "in" : "query",
          "description" : "Match type for finished at",
          "schema" : {
            "type" : "string",
            "default" : "eq",
            "enum" : [ "eq", "gt", "lt", "ge", "le" ]
          }
        }, {
          "name" : "displayName",
          "in" : "query",
          "description" : "Returns only the process with the specified display name at that matches the displayNameMatchType",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "displayNameMatchType",
          "in" : "query",
          "description" : "Match type for displayName",
          "schema" : {
            "type" : "string",
            "default" : "infix",
            "enum" : [ "prefix", "infix", "postfix" ]
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Params for sorting",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success get all",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProcessInfoResultList"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid params"
          }
        }
      }
    },
    "/v1/processes/{type}/{targetId}" : {
      "get" : {
        "tags" : [ "Processes" ],
        "summary" : "Get full info about the process by id",
        "description" : "Get full info about the process by id",
        "operationId" : "getProcessById",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Type of the process",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "import", "importing-result-export", "export", "group-change" ]
          }
        }, {
          "name" : "targetId",
          "in" : "path",
          "description" : "Id of the process",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success get",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/AdcImportingProcess"
                  }, {
                    "$ref" : "#/components/schemas/AdcExportingProcess"
                  }, {
                    "$ref" : "#/components/schemas/AdcGroupUpdateProcess"
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid id or type"
          },
          "404" : {
            "description" : "Not found process by id"
          }
        }
      },
      "delete" : {
        "tags" : [ "Processes" ],
        "summary" : "Delete process by id",
        "description" : "Delete process by id",
        "operationId" : "deleteProcessById",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Type of the process",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "import", "importing-result-export", "export", "group-change" ]
          }
        }, {
          "name" : "targetId",
          "in" : "path",
          "description" : "Id of the process",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success delete. No value is returned"
          },
          "400" : {
            "description" : "Invalid id or type"
          },
          "404" : {
            "description" : "Not found process by id"
          }
        }
      }
    },
    "/v1/processes/{type}/{targetId}/cancel" : {
      "post" : {
        "tags" : [ "Processes" ],
        "summary" : "Cancel process by id",
        "description" : "Cancel process by id",
        "operationId" : "cancelProcessById",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Type of the process",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "import", "importing-result-export", "export", "group-change" ]
          }
        }, {
          "name" : "targetId",
          "in" : "path",
          "description" : "Id of the process",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success cancel"
          },
          "400" : {
            "description" : "Invalid id or type"
          },
          "404" : {
            "description" : "Not found process by id"
          }
        }
      }
    },
    "/v1/processes/{type}/{targetId}/pause" : {
      "post" : {
        "tags" : [ "Processes" ],
        "summary" : "Pause process by id",
        "description" : "Pause process by id",
        "operationId" : "pauseProcessById",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Type of the process",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "import", "importing-result-export", "export", "group-change" ]
          }
        }, {
          "name" : "targetId",
          "in" : "path",
          "description" : "Id of the process",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success pause"
          },
          "400" : {
            "description" : "Invalid id or type"
          },
          "404" : {
            "description" : "Not found process by id"
          }
        }
      }
    },
    "/v1/processes/{type}/{targetId}/resume" : {
      "post" : {
        "tags" : [ "Processes" ],
        "summary" : "Resume process by id",
        "description" : "Resume process by id",
        "operationId" : "resumeProcessById",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Type of the process",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "import", "importing-result-export", "export", "group-change" ]
          }
        }, {
          "name" : "targetId",
          "in" : "path",
          "description" : "Id of the process",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success resume"
          },
          "400" : {
            "description" : "Invalid id or type"
          },
          "404" : {
            "description" : "Not found process by id"
          }
        }
      }
    },
    "/v1/queries" : {
      "get" : {
        "tags" : [ "Queries" ],
        "summary" : "Get a list of Queries",
        "description" : "Get a list of queries. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listQueries",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,followers,users,votes,tags,queryUsedIn"
          }
        }, {
          "name" : "entityId",
          "in" : "query",
          "description" : "UUID of the entity for which to list the Queries",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number queries returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of queries before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of queries after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get List of queries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QueryList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Queries" ],
        "summary" : "Create or update a query",
        "description" : "Create a query, if it does not exist. If a query already exists, update the query.",
        "operationId" : "createOrUpdateQuery",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateQuery"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The query",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Query"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Queries" ],
        "summary" : "Create a query",
        "description" : "Create a query under an existing entity.",
        "operationId" : "createQuery",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateQuery"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The query",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QueryList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/queries/name/{fqn}" : {
      "get" : {
        "tags" : [ "Queries" ],
        "summary" : "Get a query by name",
        "description" : "Get a query by fully qualified table name.",
        "operationId" : "getQueryFqn",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,followers,users,votes,tags,queryUsedIn"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "query",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Query"
                }
              }
            }
          },
          "404" : {
            "description" : "Query for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Queries" ],
        "summary" : "Delete a query",
        "description" : "Delete a query by `fullyQualifiedName`.",
        "operationId" : "deleteQueryByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the location",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Query for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/queries/{id}" : {
      "get" : {
        "tags" : [ "Queries" ],
        "summary" : "Get a query",
        "description" : "Get a Query by `id`",
        "operationId" : "getQueryById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "query Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,followers,users,votes,tags,queryUsedIn"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "query",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Query"
                }
              }
            }
          },
          "404" : {
            "description" : "Query for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Queries" ],
        "summary" : "Delete a query",
        "description" : "Delete a query by `id`.",
        "operationId" : "deleteQuery",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Query for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Queries" ],
        "summary" : "Update a query",
        "description" : "Update an existing query using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchQuery",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/queries/{id}/followers" : {
      "put" : {
        "tags" : [ "Queries" ],
        "summary" : "Add a follower",
        "description" : "Add a user identified by `userId` as follower of this model",
        "operationId" : "addFollower_6",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the Query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Id of the user to be added as follower",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "format" : "uuid"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          },
          "404" : {
            "description" : "model for instance {id} is not found"
          }
        }
      }
    },
    "/v1/queries/{id}/followers/{userId}" : {
      "delete" : {
        "tags" : [ "Queries" ],
        "summary" : "Remove a follower",
        "description" : "Remove the user identified `userId` as a follower of the model.",
        "operationId" : "deleteFollower_7",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the Query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "Id of the user being removed as follower",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          }
        }
      }
    },
    "/v1/queries/{id}/usage" : {
      "put" : {
        "tags" : [ "Queries" ],
        "summary" : "Add query usage",
        "description" : "Add query usage",
        "operationId" : "addQueryUsage",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EntityReference"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Query"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Queries" ],
        "summary" : "remove query used in",
        "description" : "remove Query Used in",
        "operationId" : "removeQueryUsedIn",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EntityReference"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Query"
                }
              }
            }
          }
        }
      }
    },
    "/v1/queries/{id}/versions" : {
      "get" : {
        "tags" : [ "Queries" ],
        "summary" : "Get List of all query versions",
        "description" : "Get a list of all the versions of a query identified by `id`",
        "operationId" : "listAllQueryVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Query Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of query versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/queries/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Queries" ],
        "summary" : "Get a specific version of the query",
        "description" : "Get a version of the query by given `id`",
        "operationId" : "getSpecificQueryVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Query Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Query version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "query",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Query"
                }
              }
            }
          },
          "404" : {
            "description" : "query for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/queries/{id}/vote" : {
      "put" : {
        "tags" : [ "Queries" ],
        "summary" : "Update Vote for a query",
        "description" : "Update vote for a query",
        "operationId" : "updateVote",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the Query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VoteRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          },
          "404" : {
            "description" : "model for instance {id} is not found"
          }
        }
      }
    },
    "/v1/record/counters" : {
      "get" : {
        "tags" : [ "recordCounters" ],
        "summary" : "Get info about all counters",
        "description" : "Get info about all counters",
        "operationId" : "getAllCounters",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number counters returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of counters after this cursor",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success get all",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecordCountDtoResultList"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid params"
          }
        }
      }
    },
    "/v1/reports" : {
      "get" : {
        "tags" : [ "Reports (beta)" ],
        "summary" : "List reports",
        "description" : "Get a list of reports. Use `fields` parameter to get only necessary fields.",
        "operationId" : "listReports",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,usageSummary"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of reports",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Reports (beta)" ],
        "summary" : "Create or update a report",
        "description" : "Create a new report, it it does not exist or update an existing report.",
        "operationId" : "createOrUpdateReport",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Report"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Report"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Reports (beta)" ],
        "summary" : "Create a report",
        "description" : "Create a new report.",
        "operationId" : "getReportByFQN",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Report"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Report"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/reports/{id}" : {
      "get" : {
        "tags" : [ "Reports (beta)" ],
        "summary" : "Get a report by Id",
        "description" : "Get a report by `Id`.",
        "operationId" : "getReportByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the report",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,usageSummary"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Report"
                }
              }
            }
          },
          "404" : {
            "description" : "Report for instance {id} is not found"
          }
        }
      }
    },
    "/v1/roles" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "List roles",
        "description" : "Get a list of roles. Use cursor-based pagination to limit the number of entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listRoles",
        "parameters" : [ {
          "name" : "default",
          "in" : "query",
          "description" : "List only default role(s)",
          "schema" : {
            "type" : "boolean",
            "example" : true
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "policies,teams,users"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number tables returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of tables before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of tables after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of roles",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Roles" ],
        "summary" : "Update role",
        "description" : "Create or Update a role.",
        "operationId" : "createOrUpdateRole",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateRole"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The role ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Roles" ],
        "summary" : "Create a role",
        "description" : "Create a new role.",
        "operationId" : "createRole",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateRole"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/roles/name/{name}" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Get a role by name",
        "description" : "Get a role by `name`.",
        "operationId" : "getRoleByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the role",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "policies,teams,users"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "404" : {
            "description" : "Role for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Roles" ],
        "summary" : "Delete a role",
        "description" : "Delete a role by given `name`.",
        "operationId" : "deleteRoleByName",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the role",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Role for instance {name} is not found"
          }
        }
      }
    },
    "/v1/roles/restore" : {
      "put" : {
        "tags" : [ "Roles" ],
        "summary" : "Restore a soft deleted role",
        "description" : "Restore a soft deleted role.",
        "operationId" : "restore_23",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Role. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          }
        }
      }
    },
    "/v1/roles/{id}" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Get a role by id",
        "description" : "Get a role by `id`.",
        "operationId" : "getRoleByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the role",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "policies,teams,users"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "404" : {
            "description" : "Role for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Roles" ],
        "summary" : "Delete a role",
        "description" : "Delete a role by given `id`.",
        "operationId" : "deleteRole",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the role",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Role for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Roles" ],
        "summary" : "Update a role",
        "description" : "Update an existing role with JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchRole",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the role",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/roles/{id}/versions" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "List role versions",
        "description" : "Get a list of all the versions of a role identified by `id`",
        "operationId" : "listAllRoleVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the role",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of role versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/roles/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Get a version of the role",
        "description" : "Get a version of the role by given `id`",
        "operationId" : "getSpecificRoleVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the role",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Role version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "404" : {
            "description" : "Role for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/search/adc/global" : {
      "post" : {
        "tags" : [ "search" ],
        "summary" : "Global search",
        "description" : "Find any object in system",
        "operationId" : "globalSearch",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "search response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchHitsDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/search/adc/global/filters" : {
      "post" : {
        "tags" : [ "search" ],
        "summary" : "Filter values for global search",
        "description" : "Get filter values for global search",
        "operationId" : "globalSearchFilters",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalSearchFiltersRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Attribute filter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AttributeFilter"
                }
              }
            }
          }
        }
      }
    },
    "/v1/search/adc/terms/stats" : {
      "post" : {
        "tags" : [ "search" ],
        "summary" : "ADC Terms stats",
        "description" : "Terms stats by subject areas",
        "operationId" : "termStats",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdcSearchStatsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "search response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcSearchStatsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/search/adc/user/related" : {
      "post" : {
        "tags" : [ "search" ],
        "summary" : "Get related entities for user or team",
        "description" : "Get related entities for user or team",
        "operationId" : "userRelatedObjects",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserTeamRelatedObjectsRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "search response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchPaginationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/search/adc/user/related/filters" : {
      "post" : {
        "tags" : [ "search" ],
        "summary" : "Get data for user attribute filters",
        "description" : "Get data for user attribute filters",
        "operationId" : "getAttributeFilters",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserTeamRelatedObjectsRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "search response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AttributeFilter"
                }
              }
            }
          }
        }
      }
    },
    "/v1/search/aggregate" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Get aggregated fields",
        "description" : "Get aggregated fields from entities.",
        "operationId" : "getAggregateFields",
        "parameters" : [ {
          "name" : "index",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "table_search_index"
          }
        }, {
          "name" : "field",
          "in" : "query",
          "description" : "Field in an entity.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "value",
          "in" : "query",
          "description" : "value for searching in aggregation",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search Query Text, Pass *text* for substring match; Pass without wildcards for exact match. <br/> 1. For listing all tables or topics pass q=* <br/>2. For search tables or topics pass q=*search_term* <br/>3. For searching field names such as search by column_name pass q=column_names:address <br/>4. For searching by tag names pass q=tags:user.email <br/>5. When user selects a filter pass q=query_text AND tags:user.email AND platform:MYSQL <br/>6. Search with multiple values of same filter q=tags:user.email AND tags:user.address <br/> logic operators such as AND and OR must be in uppercase ",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : "*"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Size field to limit the no.of results returned, defaults to 10",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "deleted",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "false"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Table Aggregate API",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Suggest"
                }
              }
            }
          }
        }
      }
    },
    "/v1/search/mappings" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Get Search Mapping Schema",
        "description" : "Get Search Mapping Schema",
        "operationId" : "getSearchMappingSchema",
        "parameters" : [ {
          "name" : "entityType",
          "in" : "query",
          "description" : "List of Entities to get schema for",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/v1/search/query" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Search entities",
        "description" : "Search entities using query test. Use query params `from` and `size` for pagination. Use `sort_field` to sort the results in `sort_order`.",
        "operationId" : "searchEntitiesWithQuery",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "Search Query Text, Pass *text* for substring match; Pass without wildcards for exact match. <br/> 1. For listing all tables or topics pass q=* <br/>2. For search tables or topics pass q=*search_term* <br/>3. For searching field names such as search by column_name pass q=column_names:address <br/>4. For searching by tag names pass q=tags:user.email <br/>5. When user selects a filter pass q=query_text AND tags:user.email AND platform:MYSQL <br/>6. Search with multiple values of same filter q=tags:user.email AND tags:user.address <br/> logic operators such as AND and OR must be in uppercase ",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : "*"
          }
        }, {
          "name" : "index",
          "in" : "query",
          "description" : "ElasticSearch Index name, defaults to table_search_index",
          "schema" : {
            "type" : "string",
            "default" : "table_search_index"
          }
        }, {
          "name" : "deleted",
          "in" : "query",
          "description" : "Filter documents by deleted param. By default deleted is false",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "From field to paginate the results, defaults to 0",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Size field to limit the no.of results returned, defaults to 10",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Sort the search results by field, available fields to sort weekly_stats , daily_stats, monthly_stats, last_updated_timestamp",
          "schema" : {
            "type" : "string",
            "default" : "_score"
          }
        }, {
          "name" : "sort_order",
          "in" : "query",
          "description" : "Sort order asc for ascending or desc for descending, defaults to desc",
          "schema" : {
            "type" : "string",
            "default" : "desc"
          }
        }, {
          "name" : "track_total_hits",
          "in" : "query",
          "description" : "Track Total Hits",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "query_filter",
          "in" : "query",
          "description" : "Elasticsearch query that will be combined with the query_string query generator from the `query` argument",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "post_filter",
          "in" : "query",
          "description" : "Elasticsearch query that will be used as a post_filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fetch_source",
          "in" : "query",
          "description" : "Get document body for each hit",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "include_source_fields",
          "in" : "query",
          "description" : "Get only selected fields of the document body for each hit. Empty value will return all fields",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/search/reindex" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Get all reindex batch jobs",
        "description" : "Get all reindex batch jobs",
        "operationId" : "getAllReindexBatchJobs",
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "post" : {
        "tags" : [ "Search" ],
        "summary" : "Run Batch Reindexing",
        "description" : "Reindex Elastic Search Reindexing Entities",
        "operationId" : "runBatchReindexing",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateEventPublisherJob"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Bot for instance {id} is not found"
          }
        }
      }
    },
    "/v1/search/reindex/latest" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Get Latest Reindexing Batch Job",
        "description" : "Fetches the Latest Reindexing Job",
        "operationId" : "getLatestReindexBatchJob",
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "No Job Found"
          }
        }
      }
    },
    "/v1/search/reindex/stop/{jobId}" : {
      "put" : {
        "tags" : [ "Search" ],
        "summary" : "Stop Reindex Job",
        "description" : "Stop a Reindex Job",
        "operationId" : "stopAJobWithId",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "path",
          "description" : "jobId Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Bot for instance {id} is not found"
          }
        }
      }
    },
    "/v1/search/reindex/stream/status" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Get Stream Job Latest Status",
        "description" : "Stream Job Status",
        "operationId" : "getStreamJobStatus",
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Status not found"
          }
        }
      }
    },
    "/v1/search/reindex/{jobId}" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Get Batch Reindexing Job with Id",
        "description" : "Get reindex job with Id",
        "operationId" : "getBatchReindexBatchJobWithId",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "path",
          "description" : "jobId Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/v1/search/suggest" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Suggest entities",
        "description" : "Get suggested entities used for auto-completion.",
        "operationId" : "getSuggestedEntities",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "Suggest API can be used to auto-fill the entities name while use is typing search text <br/> 1. To get suggest results pass q=us or q=user etc.. <br/> 2. Do not add any wild-cards such as * like in search api <br/> 3. suggest api is a prefix suggestion <br/>",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "index",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : "table_search_index"
          }
        }, {
          "name" : "field",
          "in" : "query",
          "description" : "Field in object containing valid suggestions. Defaults to 'suggest`. All indices has a `suggest` field, only some indices have other `suggest_*` fields.",
          "schema" : {
            "type" : "string",
            "default" : "suggest"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Size field to limit the no.of results returned, defaults to 10",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "fetch_source",
          "in" : "query",
          "description" : "Get document body for each hit",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "include_source_fields",
          "in" : "query",
          "description" : "Get only selected fields of the document body for each hit. Empty value will return all fields",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "deleted",
          "in" : "query",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Table Suggestion API",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Suggest"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/dashboardServices" : {
      "get" : {
        "tags" : [ "Dashboard Services" ],
        "summary" : "List dashboard services",
        "description" : "Get a list of dashboard services.",
        "operationId" : "listDashboardsService",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,domain"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of dashboard services before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of dashboard services after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of dashboard service instances",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardServiceList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Dashboard Services" ],
        "summary" : "Update a dashboard service",
        "description" : "Update an existing dashboard service identified by `Id`.",
        "operationId" : "createOrUpdateDashboardService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDashboardService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Dashboard service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Dashboard Services" ],
        "summary" : "Create a dashboard service",
        "description" : "Create a new dashboard service.",
        "operationId" : "createDashboardService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDashboardService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Dashboard service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/services/dashboardServices/name/{name}" : {
      "get" : {
        "tags" : [ "Dashboard Services" ],
        "summary" : "Get dashboard service by name",
        "description" : "Get a dashboard service by the service `name`.",
        "operationId" : "getDashboardServiceByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the dashboard service",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dashboard service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardService"
                }
              }
            }
          },
          "404" : {
            "description" : "Dashboard service for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Dashboard Services" ],
        "summary" : "Delete a dashboard service by name",
        "description" : "Delete a Dashboard services by `name`. If dashboard (and charts) belong to the service, it can't be deleted.",
        "operationId" : "deleteDashboardServiceByName",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the dashboard service",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "DashboardService service for instance {name} is not found"
          }
        }
      }
    },
    "/v1/services/dashboardServices/restore" : {
      "put" : {
        "tags" : [ "Dashboard Services" ],
        "summary" : "Restore a soft deleted dashboard service",
        "description" : "Restore a soft deleted dashboard service.",
        "operationId" : "restore_15",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Chart ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/dashboardServices/{id}" : {
      "get" : {
        "tags" : [ "Dashboard Services" ],
        "summary" : "Get a dashboard service by Id",
        "description" : "Get a dashboard service by `Id`.",
        "operationId" : "getDashboardServiceByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dashboard service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardService"
                }
              }
            }
          },
          "404" : {
            "description" : "Dashboard service for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Dashboard Services" ],
        "summary" : "Delete a dashboard service by Id",
        "description" : "Delete a Dashboard services. If dashboard (and charts) belong to the service, it can't be deleted.",
        "operationId" : "deleteDashboardService",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "DashboardService service for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Dashboard Services" ],
        "summary" : "Update a dashboard service",
        "description" : "Update an existing dashboard service using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchDashboardService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/services/dashboardServices/{id}/testConnectionResult" : {
      "put" : {
        "tags" : [ "Dashboard Services" ],
        "summary" : "Add test connection result",
        "description" : "Add test connection result to the service.",
        "operationId" : "addTestConnectionResult",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestConnectionResult"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/dashboardServices/{id}/versions" : {
      "get" : {
        "tags" : [ "Dashboard Services" ],
        "summary" : "List dashboard service versions",
        "description" : "Get a list of all the versions of a dashboard service identified by `Id`",
        "operationId" : "listAllDashboardServiceVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of dashboard service versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/dashboardServices/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Dashboard Services" ],
        "summary" : "Get a version of the dashboard service",
        "description" : "Get a version of the dashboard service by given `Id`",
        "operationId" : "getSpecificDashboardServiceVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the dashboard service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "dashboard service version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "dashboard service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardService"
                }
              }
            }
          },
          "404" : {
            "description" : "Dashboard service for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/services/databaseServices" : {
      "get" : {
        "tags" : [ "Database Services" ],
        "summary" : "List database services",
        "description" : "Get a list of database services.",
        "operationId" : "listDatabaseServices",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,tags,domain"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of database services before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of database services after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of database service instances",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseServiceList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Database Services" ],
        "summary" : "Update database service",
        "description" : "Update an existing or create a new database service.",
        "operationId" : "createOrUpdateDatabaseService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDatabaseService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Database service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Database Services" ],
        "summary" : "Create database service",
        "description" : "Create a new database service.",
        "operationId" : "createDatabaseService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateDatabaseService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Database service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/services/databaseServices/name/{name}" : {
      "get" : {
        "tags" : [ "Database Services" ],
        "summary" : "Get database service by name",
        "description" : "Get a database service by the service `name`.",
        "operationId" : "getDatabaseServiceByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the database service",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,tags,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Database service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseService"
                }
              }
            }
          },
          "404" : {
            "description" : "Database service for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Database Services" ],
        "summary" : "Delete a database service by name",
        "description" : "Delete a database services by `name`. If databases (and tables) belong the service, it can't be deleted.",
        "operationId" : "deleteDatabaseServiceByName",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the database service",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "DatabaseService service for instance {name} is not found"
          }
        }
      }
    },
    "/v1/services/databaseServices/restore" : {
      "put" : {
        "tags" : [ "Database Services" ],
        "summary" : "Restore a soft deleted database service",
        "description" : "Restore a soft deleted database service.",
        "operationId" : "restore_16",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the DatabaseService.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/databaseServices/{id}" : {
      "get" : {
        "tags" : [ "Database Services" ],
        "summary" : "Get a database service",
        "description" : "Get a database service by `Id`.",
        "operationId" : "getDatabaseServiceByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the database service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,tags,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Database service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseService"
                }
              }
            }
          },
          "404" : {
            "description" : "Database service for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Database Services" ],
        "summary" : "Delete a database service by Id",
        "description" : "Delete a database services. If databases (and tables) belong the service, it can't be deleted.",
        "operationId" : "deleteDatabaseService",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the database service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "DatabaseService service for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Database Services" ],
        "summary" : "Update a database service",
        "description" : "Update an existing database service using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchDatabaseService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the database service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/services/databaseServices/{id}/testConnectionResult" : {
      "put" : {
        "tags" : [ "Database Services" ],
        "summary" : "Add test connection result",
        "description" : "Add test connection result to the service.",
        "operationId" : "addTestConnectionResult_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestConnectionResult"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/databaseServices/{id}/versions" : {
      "get" : {
        "tags" : [ "Database Services" ],
        "summary" : "List database service versions",
        "description" : "Get a list of all the versions of a database service identified by `Id`",
        "operationId" : "listAllDatabaseServiceVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the database service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of database service versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/databaseServices/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Database Services" ],
        "summary" : "Get a version of the database service",
        "description" : "Get a version of the database service by given `Id`",
        "operationId" : "getSpecificDatabaseServiceVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the database service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "database service version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "database service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseService"
                }
              }
            }
          },
          "404" : {
            "description" : "Database service for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/services/messagingServices" : {
      "get" : {
        "tags" : [ "Messaging Services" ],
        "summary" : "List messaging services",
        "description" : "Get a list of messaging services. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listMessagingService",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,domain"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit number services returned. (1 to 1000000, default 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of services before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of services after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of messaging services",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingServiceList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Messaging Services" ],
        "summary" : "Update messaging service",
        "description" : "Create a new messaging service or Update an existing messaging service identified by `id`.",
        "operationId" : "createOrUpdateMessagingService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateMessagingService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Messaging service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Messaging Services" ],
        "summary" : "Create a messaging service",
        "description" : "Create a new messaging service.",
        "operationId" : "createMessagingService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateMessagingService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Messaging service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/services/messagingServices/name/{name}" : {
      "get" : {
        "tags" : [ "Messaging Services" ],
        "summary" : "Get messaging service by name",
        "description" : "Get a messaging service by the service `name`.",
        "operationId" : "getMessagingServiceByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the messaging service",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Messaging service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingService"
                }
              }
            }
          },
          "404" : {
            "description" : "Messaging service for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Messaging Services" ],
        "summary" : "Delete a messaging service by name",
        "description" : "Delete a messaging service by `name`. If topics belong the service, it can't be deleted.",
        "operationId" : "deleteMessagingServiceByName",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the messaging service",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "MessagingService service for instance {name} is not found"
          }
        }
      }
    },
    "/v1/services/messagingServices/restore" : {
      "put" : {
        "tags" : [ "Messaging Services" ],
        "summary" : "Restore a soft deleted messaging service",
        "description" : "Restore a soft deleted messaging service.",
        "operationId" : "restore_17",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the MessagingService ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/messagingServices/{id}" : {
      "get" : {
        "tags" : [ "Messaging Services" ],
        "summary" : "Get a messaging service by Id",
        "description" : "Get a messaging service by `Id`.",
        "operationId" : "getMessagingServiceByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the messaging service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Messaging service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingService"
                }
              }
            }
          },
          "404" : {
            "description" : "Messaging service for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Messaging Services" ],
        "summary" : "Delete a messaging service by Id",
        "description" : "Delete a messaging service. If topics belong the service, it can't be deleted.",
        "operationId" : "deleteMessagingService",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the messaging service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "MessagingService service for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Messaging Services" ],
        "summary" : "Update a messaging service",
        "description" : "Update an existing messaging service using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchMessagingService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the messaging service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/services/messagingServices/{id}/testConnectionResult" : {
      "put" : {
        "tags" : [ "Messaging Services" ],
        "summary" : "Add test connection result",
        "description" : "Add test connection result to the service.",
        "operationId" : "addTestConnectionResult_2",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestConnectionResult"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/messagingServices/{id}/versions" : {
      "get" : {
        "tags" : [ "Messaging Services" ],
        "summary" : "List messaging service versions",
        "description" : "Get a list of all the versions of a messaging service identified by `id`",
        "operationId" : "listAllMessagingServiceVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the messaging service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of messaging service versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/messagingServices/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Messaging Services" ],
        "summary" : "Get a version of the messaging service",
        "description" : "Get a version of the messaging service by given `Id`",
        "operationId" : "getSpecificMessagingServiceVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the messaging service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "messaging service version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "messaging service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingService"
                }
              }
            }
          },
          "404" : {
            "description" : "Messaging service for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/services/metadataServices" : {
      "get" : {
        "tags" : [ "Metadata Services" ],
        "summary" : "List metadata services",
        "description" : "Get a list of metadata services.",
        "operationId" : "listMetadataServices",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,tags"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of metadata services before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of metadata services after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Metadata Service instances",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MetadataServiceList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Metadata Services" ],
        "summary" : "Update metadata service",
        "description" : "Update an existing or create a new Metadata Service.",
        "operationId" : "createOrUpdateMetadataService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateMetadataService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Metadata Service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MetadataService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Metadata Services" ],
        "summary" : "Create metadata service",
        "description" : "Create a new Metadata Service.",
        "operationId" : "createMetadataService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateMetadataService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Metadata Service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MetadataService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/services/metadataServices/name/{name}" : {
      "get" : {
        "tags" : [ "Metadata Services" ],
        "summary" : "Get a metadata service by name",
        "description" : "Get a Metadata Service by the service `name`.",
        "operationId" : "getMetadataServiceByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the metadata service",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,tags"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Metadata Service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MetadataService"
                }
              }
            }
          },
          "404" : {
            "description" : "Metadata Service for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Metadata Services" ],
        "summary" : "Delete a metadata service by name",
        "description" : "Delete a metadata services by `name`. If some service belong the service, it can't be deleted.",
        "operationId" : "deleteMetadataServiceByName",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the metadata service",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "MetadataService service for instance {name} is not found"
          }
        }
      }
    },
    "/v1/services/metadataServices/restore" : {
      "put" : {
        "tags" : [ "Metadata Services" ],
        "summary" : "Restore a soft deleted metadata service.",
        "description" : "Restore a soft deleted metadata service.",
        "operationId" : "restore_18",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Table ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/metadataServices/{id}" : {
      "get" : {
        "tags" : [ "Metadata Services" ],
        "summary" : "Get a metadata service by Id",
        "description" : "Get a Metadata Service by `Id`.",
        "operationId" : "getMetadataServiceByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the metadata service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,tags"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Metadata Service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MetadataService"
                }
              }
            }
          },
          "404" : {
            "description" : "Metadata Service for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Metadata Services" ],
        "summary" : "Delete a metadata service by Id",
        "description" : "Delete a metadata services. If some service belong the service, it can't be deleted.",
        "operationId" : "deleteMetadataService",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the metadata service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "MetadataService service for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Metadata Services" ],
        "summary" : "Update a metadata service",
        "description" : "Update an existing Metadata service using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchMetadataService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the metadata service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/services/metadataServices/{id}/testConnectionResult" : {
      "put" : {
        "tags" : [ "Metadata Services" ],
        "summary" : "Add test connection result",
        "description" : "Add test connection result to the service.",
        "operationId" : "addTestConnectionResult_3",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestConnectionResult"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/metadataServices/{id}/versions" : {
      "get" : {
        "tags" : [ "Metadata Services" ],
        "summary" : "List metadata service versions",
        "description" : "Get a list of all the versions of a Metadata Service identified by `Id`",
        "operationId" : "listAllMetadataServiceVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the metadata service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Metadata Service versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/metadataServices/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Metadata Services" ],
        "summary" : "Get a version of the metadata service",
        "description" : "Get a version of the Metadata Service by given `Id`",
        "operationId" : "getSpecificMetadataServiceVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the metadata service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Metadata Service version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Metadata Service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MetadataService"
                }
              }
            }
          },
          "404" : {
            "description" : "Metadata Service for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/services/mlmodelServices" : {
      "get" : {
        "tags" : [ "ML Model Services" ],
        "summary" : "List ML model services",
        "description" : "Get a list of mlModel services. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listMlModelService",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,tags,domain"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit number services returned. (1 to 1000000, default 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of services before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of services after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of mlModel services",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModelServiceList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ML Model Services" ],
        "summary" : "Update ML model service",
        "description" : "Create a new mlModel service or update an existing mlModel service identified by `Id`.",
        "operationId" : "createOrUpdateMlModelService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateMlModelService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "MlModel service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModelService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "ML Model Services" ],
        "summary" : "Create an ML model service",
        "description" : "Create a new mlModel service.",
        "operationId" : "createMlModelService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateMlModelService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "MlModel service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModelService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/services/mlmodelServices/name/{name}" : {
      "get" : {
        "tags" : [ "ML Model Services" ],
        "summary" : "Get an ML model service by name",
        "description" : "Get a mlModel service by the service `name`.",
        "operationId" : "getMlModelServiceByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the ML Model service",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,tags,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "MlModel service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModelService"
                }
              }
            }
          },
          "404" : {
            "description" : "MlModel service for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "ML Model Services" ],
        "summary" : "Delete an ML model service by name",
        "description" : "Delete a mlModel services by `name`. If mlModels (and tasks) belong to the service, it can't be deleted.",
        "operationId" : "deleteMlModelServiceByName",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the ML Model service",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "MlModel service for instance {name} is not found"
          }
        }
      }
    },
    "/v1/services/mlmodelServices/restore" : {
      "put" : {
        "tags" : [ "ML Model Services" ],
        "summary" : "Restore a soft deleted ML model service",
        "description" : "Restore a soft deleted Ml model service.",
        "operationId" : "restore_19",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the MlModelService ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModelService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/mlmodelServices/{id}" : {
      "get" : {
        "tags" : [ "ML Model Services" ],
        "summary" : "Get an ML model service by Id",
        "description" : "Get a mlModel service by `Id`.",
        "operationId" : "getMlModelServiceByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the ML Model service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,tags,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "MlModel service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModelService"
                }
              }
            }
          },
          "404" : {
            "description" : "MlModel service for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "ML Model Services" ],
        "summary" : "Delete an ML model service by Id",
        "description" : "Delete a mlModel services. If mlModels (and tasks) belong to the service, it can't be deleted.",
        "operationId" : "deleteMlModelService",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the ML Model service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "MlModel service for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "ML Model Services" ],
        "summary" : "Update an ML model service",
        "description" : "Update an existing MlModelService service using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchMlModelService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the ML Model service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/services/mlmodelServices/{id}/testConnectionResult" : {
      "put" : {
        "tags" : [ "ML Model Services" ],
        "summary" : "Add test connection result",
        "description" : "Add test connection result to the service.",
        "operationId" : "addTestConnectionResult_4",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestConnectionResult"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/mlmodelServices/{id}/versions" : {
      "get" : {
        "tags" : [ "ML Model Services" ],
        "summary" : "List ML model service versions",
        "description" : "Get a list of all the versions of a mlModel service identified by `Id`",
        "operationId" : "listAllMlModelServiceVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the ML Model service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of mlModel service versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/mlmodelServices/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "ML Model Services" ],
        "summary" : "Get a version of the ML model service",
        "description" : "Get a version of the mlModel service by given `Id`",
        "operationId" : "getSpecificMlModelService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the ML Model service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "mlModel service version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "mlModel service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MlModelService"
                }
              }
            }
          },
          "404" : {
            "description" : "MlModel service for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/services/pipelineServices" : {
      "get" : {
        "tags" : [ "Pipeline Services" ],
        "summary" : "List pipeline services",
        "description" : "Get a list of pipeline services. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listPipelineService",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,domain"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit number services returned. (1 to 1000000, default 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of services before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of services after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of pipeline services",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PipelineServiceList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Pipeline Services" ],
        "summary" : "Update pipeline service",
        "description" : "Create a new pipeline service or update an existing pipeline service identified by `id`.",
        "operationId" : "createOrUpdatePipelineService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePipelineService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Pipeline service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PipelineService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Pipeline Services" ],
        "summary" : "Create a pipeline service",
        "description" : "Create a new pipeline service.",
        "operationId" : "createPipelineService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePipelineService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Pipeline service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PipelineService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/services/pipelineServices/name/{fqn}" : {
      "get" : {
        "tags" : [ "Pipeline Services" ],
        "summary" : "Get pipeline service by fully qualified name",
        "description" : "Get a pipeline service by the service `fullyQualifiedName`.",
        "operationId" : "getPipelineServiceByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the pipeline service",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Pipeline service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PipelineService"
                }
              }
            }
          },
          "404" : {
            "description" : "Pipeline service for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Pipeline Services" ],
        "summary" : "Delete a pipeline service by fully qualified name",
        "description" : "Delete a pipeline services by `fullyQualifiedName`. If pipelines (and tasks) belong to the service, it can't be deleted.",
        "operationId" : "deletePipelineServiceByName",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the pipeline service",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Pipeline service for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/services/pipelineServices/restore" : {
      "put" : {
        "tags" : [ "Pipeline Services" ],
        "summary" : "Restore a soft deleted pipeline service.",
        "description" : "Restore a soft deleted pipeline service.",
        "operationId" : "restore_20",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the PipelineService ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PipelineService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/pipelineServices/{id}" : {
      "get" : {
        "tags" : [ "Pipeline Services" ],
        "summary" : "Get a pipeline service by Id",
        "description" : "Get a pipeline service by `Id`.",
        "operationId" : "getPipelineServiceByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the pipeline service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Pipeline service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PipelineService"
                }
              }
            }
          },
          "404" : {
            "description" : "Pipeline service for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Pipeline Services" ],
        "summary" : "Delete a pipeline service by Id",
        "description" : "Delete a pipeline services. If pipelines (and tasks) belong to the service, it can't be deleted.",
        "operationId" : "deletePipelineService",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the pipeline service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Pipeline service for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Pipeline Services" ],
        "summary" : "Update a pipeline service",
        "description" : "Update an existing pipeline service using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchPipelineService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the pipeline service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/services/pipelineServices/{id}/testConnectionResult" : {
      "put" : {
        "tags" : [ "Pipeline Services" ],
        "summary" : "Add test connection result",
        "description" : "Add test connection result to the service.",
        "operationId" : "addTestConnectionResult_5",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestConnectionResult"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/pipelineServices/{id}/versions" : {
      "get" : {
        "tags" : [ "Pipeline Services" ],
        "summary" : "List pipeline service versions",
        "description" : "Get a list of all the versions of a pipeline service identified by `Id`",
        "operationId" : "listAllPipelineServiceVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the pipeline service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of pipeline service versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/pipelineServices/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Pipeline Services" ],
        "summary" : "Get a version of the pipeline service",
        "description" : "Get a version of the pipeline service by given `Id`",
        "operationId" : "getSpecificPipelineService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the pipeline service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "pipeline service version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "pipeline service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PipelineService"
                }
              }
            }
          },
          "404" : {
            "description" : "Pipeline service for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/services/storageServices" : {
      "get" : {
        "tags" : [ "Object Store Services" ],
        "summary" : "List storage services",
        "description" : "Get a list of storage services.",
        "operationId" : "listStorageServices",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,tags,domain"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of storage services before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of storage services after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of storage service instances",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StorageServiceList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Object Store Services" ],
        "summary" : "Update storage service",
        "description" : "Update an existing or create a new storage service.",
        "operationId" : "createOrUpdateStorageService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateStorageService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Object store service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StorageService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Object Store Services" ],
        "summary" : "Create storage service",
        "description" : "Create a new storage service.",
        "operationId" : "createStorageService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateStorageService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Object store service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StorageService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/services/storageServices/name/{fqn}" : {
      "delete" : {
        "tags" : [ "Object Store Services" ],
        "summary" : "Delete an StorageService by fully qualified name",
        "description" : "Delete an StorageService by `fullyQualifiedName`.",
        "operationId" : "deleteStorageServiceByFQN",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Name of the StorageService",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "StorageService for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/services/storageServices/name/{name}" : {
      "get" : {
        "tags" : [ "Object Store Services" ],
        "summary" : "Get storage service by name",
        "description" : "Get a storage service by the service `name`.",
        "operationId" : "getStorageServiceByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,tags,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object store service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StorageService"
                }
              }
            }
          },
          "404" : {
            "description" : "Object store service for instance {id} is not found"
          }
        }
      }
    },
    "/v1/services/storageServices/restore" : {
      "put" : {
        "tags" : [ "Object Store Services" ],
        "summary" : "Restore a soft deleted StorageService.",
        "description" : "Restore a soft deleted StorageService.",
        "operationId" : "restore_21",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the StorageService.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StorageService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/storageServices/{id}" : {
      "get" : {
        "tags" : [ "Object Store Services" ],
        "summary" : "Get an storage service",
        "description" : "Get an storage service by `id`.",
        "operationId" : "getStorageServiceByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "pipelines,owner,tags,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object store service instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StorageService"
                }
              }
            }
          },
          "404" : {
            "description" : "Object store service for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Object Store Services" ],
        "summary" : "Delete an storage service",
        "description" : "Delete an storage services. If containers belong the service, it can't be deleted.",
        "operationId" : "deleteStorageService",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the storage service",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "StorageService service for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Object Store Services" ],
        "summary" : "Update an storage service",
        "description" : "Update an existing storage service using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchStorageService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/services/storageServices/{id}/testConnectionResult" : {
      "put" : {
        "tags" : [ "Object Store Services" ],
        "summary" : "Add test connection result",
        "description" : "Add test connection result to the service.",
        "operationId" : "addTestConnectionResult_6",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the service",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestConnectionResult"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatabaseService"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/storageServices/{id}/versions" : {
      "get" : {
        "tags" : [ "Object Store Services" ],
        "summary" : "List storage service versions",
        "description" : "Get a list of all the versions of an storage service identified by `id`",
        "operationId" : "listAllStorageServiceVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "storage service Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of storage service versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/services/storageServices/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Object Store Services" ],
        "summary" : "Get a version of the storage service",
        "description" : "Get a version of the storage service by given `id`",
        "operationId" : "getSpecificStorageServiceVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "storage service Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "storage service version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "storage service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StorageService"
                }
              }
            }
          },
          "404" : {
            "description" : "Object store service for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/storedProcedures" : {
      "get" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "List Stored Procedures",
        "description" : "Get a list of stored procedures, optionally filtered by `databaseSchema` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listStoredProcedures",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owners,tags,followers,extension,domain,sourceHash"
          }
        }, {
          "name" : "databaseSchema",
          "in" : "query",
          "description" : "Filter stored procedures by database schema",
          "schema" : {
            "type" : "string",
            "example" : "customerDatabaseSchema"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number schemas returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of schemas before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of schemas after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of stored  procedures",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoredProcedureList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "Create or update Stored Procedure",
        "description" : "Create a stored procedure, if it does not exist or update an existing stored procedure.",
        "operationId" : "createOrUpdateStoredProcedure",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateStoredProcedure"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The updated schema ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoredProcedure"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "Create a Stored Procedure",
        "description" : "Create a Stored Procedure under an existing `service`.",
        "operationId" : "createStoredProcedure",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateStoredProcedure"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The Stored Procedure",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoredProcedure"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/storedProcedures/name/{fqn}" : {
      "get" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "Get a Stored Procedure by fully qualified name",
        "description" : "Get a Stored Procedure by fully qualified name.",
        "operationId" : "getStoredProcedureByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the Stored Procedure",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owners,tags,followers,extension,domain,sourceHash"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The schema",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoredProcedure"
                }
              }
            }
          },
          "404" : {
            "description" : "Stored Procedure for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "Delete a schema by fully qualified name",
        "description" : "Delete a schema by `fullyQualifiedName`. Schema can only be deleted if it has no tables.",
        "operationId" : "deleteDBSchemaByFQN_1",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Name of the DBSchema",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Schema for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/storedProcedures/restore" : {
      "put" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "Restore a soft deleted stored procedure.",
        "description" : "Restore a soft deleted stored procedure.",
        "operationId" : "restore_5",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the StoredProcedure ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoredProcedure"
                }
              }
            }
          }
        }
      }
    },
    "/v1/storedProcedures/{id}" : {
      "get" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "Get a stored procedure by Id",
        "description" : "Get a stored procedure by `Id`.",
        "operationId" : "getStoredProcedureByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Stored Procedure Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owners,tags,followers,extension,domain,sourceHash"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Stored Procedure",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoredProcedure"
                }
              }
            }
          },
          "404" : {
            "description" : "Schema for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "Delete a StoredProcedure by Id",
        "description" : "Delete a StoredProcedure by `Id`.",
        "operationId" : "deleteStoredProcedure",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Database schema Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "StoredProcedure for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "Update a Stored Procedure",
        "description" : "Update an existing StoredProcedure using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchStoredProcedure",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Stored Procedure Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/storedProcedures/{id}/followers" : {
      "put" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "Add a follower",
        "description" : "Add current user as followed of this procedure",
        "operationId" : "addFollower_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the procedure",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          },
          "404" : {
            "description" : "Topic for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "Remove a follower",
        "description" : "Remove current user from the followers of this procedure.",
        "operationId" : "deleteFollower_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the procedure",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          }
        }
      }
    },
    "/v1/storedProcedures/{id}/versions" : {
      "get" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "List stored procedure versions",
        "description" : "Get a list of all the versions of a stored procedure identified by `Id`",
        "operationId" : "listAllStoredProceduresVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Stored Procedure Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of schema versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/storedProcedures/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "Get a version of the Stored Procedure",
        "description" : "Get a version of the Stored Procedure by given `Id`",
        "operationId" : "getSpecificStoredProcedureVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Stored Procedure Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Stored Procedure version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "database schema",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoredProcedure"
                }
              }
            }
          },
          "404" : {
            "description" : "Stored Procedure for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/storedProcedures/{id}/vote" : {
      "put" : {
        "tags" : [ "Stored Procedures" ],
        "summary" : "Update Vote for a Entity",
        "description" : "Update vote for a Entity",
        "operationId" : "updateVoteForEntity",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the Entity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VoteRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          },
          "404" : {
            "description" : "model for instance {id} is not found"
          }
        }
      }
    },
    "/v1/system/version" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get version of metadata service",
        "description" : "Get the build version of OpenMetadata service and build timestamp.",
        "operationId" : "getCatalogVersion",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenMetadataServerVersion"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "List tables",
        "description" : "Get a list of tables, optionally filtered by `database` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listTables",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "tableConstraints,tablePartition,usageSummary,owner,customMetrics,tags,followers,joins,viewDefinition,dataModel,extension,testSuite,domain,dataProducts"
          }
        }, {
          "name" : "database",
          "in" : "query",
          "description" : "Filter tables by database fully qualified name",
          "schema" : {
            "type" : "string",
            "example" : "snowflakeWestCoast.financeDB"
          }
        }, {
          "name" : "databaseSchema",
          "in" : "query",
          "description" : "Filter tables by databaseSchema fully qualified name",
          "schema" : {
            "type" : "string",
            "example" : "snowflakeWestCoast.financeDB.schema"
          }
        }, {
          "name" : "includeEmptyTestSuite",
          "in" : "query",
          "description" : "Include tables with an empty test suite (i.e. no test cases have been created for this table). Default to true",
          "schema" : {
            "type" : "boolean",
            "example" : true,
            "default" : true
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number tables returned. (1 to 1000000, default = 10) ",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of tables before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of tables after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of tables",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Create or update a table",
        "description" : "Create a table, if it does not exist. If a table already exists, update the table.",
        "operationId" : "createOrUpdateTable",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTable"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The table",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Tables" ],
        "summary" : "Create a table",
        "description" : "Create a new table under an existing `database`.",
        "operationId" : "createTable",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTable"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "table",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/tables/fullType/byCreateEntity" : {
      "post" : {
        "tags" : [ "adcEntityAdditionTypes", "Tables" ],
        "summary" : "Get a entity addition type by createEntity request",
        "description" : "Get a entity addition type by createEntity request",
        "operationId" : "getAdcTypeByCreateEntity_1",
        "parameters" : [ {
          "name" : "prepare",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTable"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcType"
                }
              }
            }
          },
          "400" : {
            "description" : "If type or entity aren't specified"
          }
        }
      }
    },
    "/v1/tables/name/{fqn}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get a table by fully qualified name",
        "description" : "Get a table by fully qualified table name.",
        "operationId" : "getTableByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the table",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "tableConstraints,tablePartition,usageSummary,owner,customMetrics,tags,followers,joins,viewDefinition,dataModel,extension,testSuite,domain,dataProducts"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "table",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          },
          "404" : {
            "description" : "Table for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Tables" ],
        "summary" : "Delete a table by fully qualified name",
        "description" : "Delete a table by `fullyQualifiedName`.",
        "operationId" : "deleteTable_1",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Name of the table",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Table for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/tables/restore" : {
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Restore a soft deleted table",
        "description" : "Restore a soft deleted table.",
        "operationId" : "restore_6",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Table ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{fqn}/columnProfile" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "List of column profiles",
        "description" : "Get a list of all the column profiles for the given table fqn, optionally filtered by `extension`, `startTs` and `endTs` of the profile. Use cursor-based pagination to limit the number of entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "list column Profiles",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "FQN of the column",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startTs",
          "in" : "query",
          "description" : "Filter table/column profiles after the given start timestamp",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "endTs",
          "in" : "query",
          "description" : "Filter table/column profiles before the given end timestamp",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of table profiles",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ColumnProfileList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{fqn}/systemProfile" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "List of system profiles",
        "description" : "Get a list of all the system profiles for the given table fqn, filtered by `extension`, `startTs` and `endTs` of the profile. Use cursor-based pagination to limit the number of entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "list system Profiles",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "FQN of the table",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startTs",
          "in" : "query",
          "description" : "Filter system profiles after the given start timestamp",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "endTs",
          "in" : "query",
          "description" : "Filter system profiles before the given end timestamp",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of system profiles",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SystemProfileList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{fqn}/tableProfile" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "List of table profiles",
        "description" : "Get a list of all the table profiles for the given table fqn, optionally filtered by `extension`, `startTs` and `endTs` of the profile. Use cursor-based pagination to limit the number of entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "list Profiles",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "FQN of the table or column",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startTs",
          "in" : "query",
          "description" : "Filter table/column profiles after the given start timestamp",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "endTs",
          "in" : "query",
          "description" : "Filter table/column profiles before the given end timestamp",
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of table profiles",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableProfileList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{fqn}/tableProfile/latest" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get the latest table profile",
        "description" : "Get the latest table and column profile ",
        "operationId" : "Get the latest table and column profile",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "FQN of the table or column",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Table with profile and column profile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{fqn}/{entityType}/{timestamp}/profile" : {
      "delete" : {
        "tags" : [ "Tables" ],
        "summary" : "Delete table profile data",
        "description" : "Delete table profile data to the table.",
        "operationId" : "deleteDataProfiler",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "FQN of the table or column",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entityType",
          "in" : "path",
          "description" : "type of the entity table or column",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "timestamp",
          "in" : "path",
          "description" : "Timestamp of the table profile",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the Table Profile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableProfile"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{id}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get a table by Id",
        "description" : "Get a table by `Id`",
        "operationId" : "getTableByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "table Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "tableConstraints,tablePartition,usageSummary,owner,customMetrics,tags,followers,joins,viewDefinition,dataModel,extension,testSuite,domain,dataProducts"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "table",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          },
          "404" : {
            "description" : "Table for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Tables" ],
        "summary" : "Delete a table by Id",
        "description" : "Delete a table by `Id`.",
        "operationId" : "deleteTable",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Table for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Tables" ],
        "summary" : "Update a table",
        "description" : "Update an existing table using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchTable",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/tables/{id}/customMetric" : {
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Add column custom metrics",
        "description" : "Add column custom metrics.",
        "operationId" : "addCustomMetric",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCustomMetric"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{id}/customMetric/{columnName}/{customMetricName}" : {
      "delete" : {
        "tags" : [ "Tables" ],
        "summary" : "Delete custom metric from a column",
        "description" : "Delete a custom metric from a column.",
        "operationId" : "deleteCustomMetric",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "column of the table",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customMetricName",
          "in" : "path",
          "description" : "column Test Type",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{id}/dataModel" : {
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Add data modeling information to a table",
        "description" : "Add data modeling (such as DBT model) information on how the table was created to the table.",
        "operationId" : "addDataModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DataModel"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{id}/followers" : {
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Add a follower",
        "description" : "Add a user identified by `userId` as followed of this table",
        "operationId" : "addFollowerToTable",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Id of the user to be added as follower",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          },
          "404" : {
            "description" : "Table for instance {id} is not found"
          }
        }
      }
    },
    "/v1/tables/{id}/followers/{userId}" : {
      "delete" : {
        "tags" : [ "Tables" ],
        "summary" : "Remove a follower",
        "description" : "Remove the user identified `userId` as a follower of the table.",
        "operationId" : "deleteFollower_2",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "Id of the user being removed as follower",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{id}/joins" : {
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Add table join information",
        "description" : "Add information about other tables that this table is joined with. Join information can only be added for the last 30 days starting today.",
        "operationId" : "addTableJoinInfo",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableJoins"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the Table",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          },
          "404" : {
            "description" : "Table for instance {id} is not found"
          },
          "400" : {
            "description" : "Date range can only include past 30 days starting today"
          }
        }
      }
    },
    "/v1/tables/{id}/sampleData" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get sample data",
        "description" : "Get sample data from the table.",
        "operationId" : "getSampleData",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully update the Table",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Add sample data",
        "description" : "Add sample data to the table.",
        "operationId" : "addSampleData",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableData"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully update the Table",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Tables" ],
        "summary" : "Delete sample data",
        "description" : "Delete sample data from the table.",
        "operationId" : "deleteSampleData",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully update the Table",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{id}/tableProfile" : {
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Add table profile data",
        "description" : "Add table profile data to the table.",
        "operationId" : "addDataProfiler",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTableProfile"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the Table ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{id}/tableProfilerConfig" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get table profile config",
        "description" : "Get table profile config to the table.",
        "operationId" : "getDataProfilerConfig",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated the Table ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "Add table profile config",
        "description" : "Add table profile config to the table.",
        "operationId" : "addDataProfilerConfig",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableProfilerConfig"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the Table ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Tables" ],
        "summary" : "Delete table profiler config",
        "description" : "delete table profile config to the table.",
        "operationId" : "delete DataProfilerConfig",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the Table profiler config",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{id}/versions" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "List table versions",
        "description" : "Get a list of all the versions of a table identified by `Id`",
        "operationId" : "listAllTableVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Table Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of table versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tables/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "Get a version of the table",
        "description" : "Get a version of the table by given `Id`",
        "operationId" : "getSpecificDatabaseVersion_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Table Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Table version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "table",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Table"
                }
              }
            }
          },
          "404" : {
            "description" : "Table for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/tags" : {
      "get" : {
        "tags" : [ "Classifications" ],
        "summary" : "List tags",
        "description" : "Get a list of tags. Use `fields` parameter to get only necessary fields.  Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listTags",
        "parameters" : [ {
          "name" : "parent",
          "in" : "query",
          "description" : "List tags filtered by children of tag identified by fqn given in `parent` parameter. The fqn can either be classificationName or fqn of a parent tag",
          "schema" : {
            "type" : "string",
            "example" : "children, usageCount"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "children, usageCount"
          }
        }, {
          "name" : "disabled",
          "in" : "query",
          "description" : "Filter Disabled Classifications",
          "schema" : {
            "type" : "string",
            "example" : "children, usageCount",
            "default" : "false"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number tags returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of tags before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of tags after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of tags",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Classifications" ],
        "summary" : "Create or update a tag",
        "description" : "Create a new tag, if it does not exist or update an existing tag.",
        "operationId" : "createOrUpdateTag",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The tag",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Classifications" ],
        "summary" : "Create a tag",
        "description" : "Create a new tag.",
        "operationId" : "createTag",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The tag",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/tags/name/{fqn}" : {
      "get" : {
        "tags" : [ "Classifications" ],
        "summary" : "Get a tag by fully qualified name",
        "description" : "Get a tag by `fullyQualifiedName`.",
        "operationId" : "getTagByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the tag",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "children, usageCount"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The tag",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "404" : {
            "description" : "Tag for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Classifications" ],
        "summary" : "Delete a tag by fully qualified name",
        "description" : "Delete a tag by `fullyQualifiedName`.",
        "operationId" : "deleteTagByName",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the tag",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "tag for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/tags/restore" : {
      "put" : {
        "tags" : [ "Classifications" ],
        "summary" : "Restore a soft deleted tag.",
        "description" : "Restore a soft deleted tag.",
        "operationId" : "restoreTag",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Tag ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tags/usage/{tagEntityType}/{tagEntityId}" : {
      "get" : {
        "tags" : [ "TagUsage" ],
        "summary" : "getting a list of objects that use the specified object as a tag",
        "description" : "getting a list of objects that use the specified object as a tag",
        "operationId" : "targetList",
        "parameters" : [ {
          "name" : "tagEntityType",
          "in" : "path",
          "description" : "The type of tag entity",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "adcSubjectArea", "adcGlossaryTermType", "glossaryTerm", "glossary", "team", "user", "role", "politic", "testSuite", "testCase", "testDefinition", "table", "database", "databaseService", "databaseSchema", "storedProcedure", "dashboardService", "dashboard", "dashboardDataModel", "chart", "dataInsightChart", "pipelineService", "pipeline", "messagingService", "topic", "metadataService", "mlModel", "mlModelService", "container", "storageService", "kpi", "eventSubscription", "adcSettings", "adcUserSettings", "ingestionPipeline", "adcRelationship", "adcEntityAttribute", "classification", "tag" ]
          }
        }, {
          "name" : "tagEntityId",
          "in" : "path",
          "description" : "Id of the entity that is the tag",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "targetEntityType",
          "in" : "query",
          "description" : "The type of target entities (owners) of the tag",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "adcSubjectArea", "adcGlossaryTermType", "glossaryTerm", "glossary", "team", "user", "role", "politic", "testSuite", "testCase", "testDefinition", "table", "database", "databaseService", "databaseSchema", "storedProcedure", "dashboardService", "dashboard", "dashboardDataModel", "chart", "dataInsightChart", "pipelineService", "pipeline", "messagingService", "topic", "metadataService", "mlModel", "mlModelService", "container", "storageService", "kpi", "eventSubscription", "adcSettings", "adcUserSettings", "ingestionPipeline", "adcRelationship", "adcEntityAttribute", "classification", "tag" ]
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number target entities returned. (1 to 1000000, default = 50)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 50
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of target entities before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of target entities after this cursor",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success get",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TypedEntityResultList"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid id or type"
          },
          "404" : {
            "description" : "Not found process by id"
          }
        }
      }
    },
    "/v1/tags/{id}" : {
      "get" : {
        "tags" : [ "Classifications" ],
        "summary" : "Get a tag by id",
        "description" : "Get a tag by `id`.",
        "operationId" : "getTagByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the tag",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "children, usageCount"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The tag",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "404" : {
            "description" : "Tag for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Classifications" ],
        "summary" : "Delete a tag by id",
        "description" : "Delete a tag by `id`.",
        "operationId" : "deleteTag",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this entity and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the tag",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "tag for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Classifications" ],
        "summary" : "Update a tag",
        "description" : "Update an existing tag using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchTag",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the tag",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/tags/{id}/versions" : {
      "get" : {
        "tags" : [ "Classifications" ],
        "summary" : "List tag versions",
        "description" : "Get a list of all the versions of a tag identified by `id`",
        "operationId" : "listAllTagVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the tag",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of tag versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tags/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Classifications" ],
        "summary" : "Get a version of the tags",
        "description" : "Get a version of the tag by given `id`",
        "operationId" : "getSpecificTagVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the tag",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "tag version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "tags",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "404" : {
            "description" : "Tag for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/teams" : {
      "get" : {
        "tags" : [ "Teams" ],
        "summary" : "List teams",
        "description" : "Get a list of teams. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listTeams",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,profile,users,owns,defaultRoles,parents,children,policies,userCount,childrenCount,domain"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number of teams returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of teams before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of teams after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "parentTeam",
          "in" : "query",
          "description" : "Filter the results by parent team name",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "isJoinable",
          "in" : "query",
          "description" : "Filter the results by whether the team can be joined by any user or not",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of teams",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Teams" ],
        "summary" : "Update team",
        "description" : "Create or Update a team.",
        "operationId" : "createOrUpdateTeam",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTeam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The team ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Teams" ],
        "summary" : "Create a team",
        "description" : "Create a new team.",
        "operationId" : "createTeam",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTeam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The team",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/teams/documentation/csv" : {
      "get" : {
        "tags" : [ "Teams" ],
        "summary" : "Get CSV documentation for team import/export",
        "operationId" : "getCsvDocumentation",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/fullType/byCreateEntity" : {
      "post" : {
        "tags" : [ "adcEntityAdditionTypes", "Teams" ],
        "summary" : "Get a entity addition type by createEntity request",
        "description" : "Get a entity addition type by createEntity request",
        "operationId" : "getAdcTypeByCreateEntity_4",
        "parameters" : [ {
          "name" : "prepare",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTeam"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcType"
                }
              }
            }
          },
          "400" : {
            "description" : "If type or entity aren't specified"
          }
        }
      }
    },
    "/v1/teams/hierarchy" : {
      "get" : {
        "tags" : [ "Teams" ],
        "summary" : "List teams with hierarchy",
        "description" : "Get a list of teams with hierarchy.",
        "operationId" : "listTeamsHierarchy",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number of teams returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 1000,
            "type" : "integer",
            "format" : "int32",
            "default" : 10000
          }
        }, {
          "name" : "isJoinable",
          "in" : "query",
          "description" : "Filter the results by whether the team can be joined by any user or not",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of teams with hierarchy",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/name/{name}" : {
      "get" : {
        "tags" : [ "Teams" ],
        "summary" : "Get a team by name",
        "description" : "Get a team by `name`.",
        "operationId" : "getTeamByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the team",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,profile,users,owns,defaultRoles,parents,children,policies,userCount,childrenCount,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The team",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            }
          },
          "404" : {
            "description" : "Team for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Teams" ],
        "summary" : "Delete a team by name",
        "description" : "Delete a team by given `name`.",
        "operationId" : "deleteTeamByName",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the team",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Team for instance {name} is not found"
          }
        }
      }
    },
    "/v1/teams/name/{name}/export" : {
      "get" : {
        "tags" : [ "Teams" ],
        "summary" : "Export teams in CSV format",
        "operationId" : "exportTeams",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Exported csv with teams information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/name/{name}/import" : {
      "put" : {
        "tags" : [ "Teams" ],
        "summary" : "Import from CSV to create, and update teams.",
        "operationId" : "importTeams",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dryRun",
          "in" : "query",
          "description" : "Dry-run when true is used for validating the CSV without really importing it. (default=true)",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "requestBody" : {
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Import result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CsvImportResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/ownedCount" : {
      "get" : {
        "tags" : [ "Teams" ],
        "operationId" : "getCountOfOwned",
        "parameters" : [ {
          "name" : "teamIds",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/restore" : {
      "put" : {
        "tags" : [ "Teams" ],
        "summary" : "Restore a soft deleted team",
        "description" : "Restore a soft deleted team.",
        "operationId" : "restore_24",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Team ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/{id}" : {
      "get" : {
        "tags" : [ "Teams" ],
        "summary" : "Get a team by id",
        "description" : "Get a team by `id`.",
        "operationId" : "getTeamByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the team",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,profile,users,owns,defaultRoles,parents,children,policies,userCount,childrenCount,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The team",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            }
          },
          "404" : {
            "description" : "Team for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Teams" ],
        "summary" : "Delete a team by id",
        "description" : "Delete a team by given `id`.",
        "operationId" : "deleteTeam",
        "parameters" : [ {
          "name" : "recursive",
          "in" : "query",
          "description" : "Recursively delete this team and it's children. (Default `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the team",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Team for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Teams" ],
        "summary" : "Update a team",
        "description" : "Update an existing team with JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchTeam",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the team",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/teams/{id}/versions" : {
      "get" : {
        "tags" : [ "Teams" ],
        "summary" : "List team versions",
        "description" : "Get a list of all the versions of a team identified by `id`",
        "operationId" : "listAllTeamVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the team",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of team versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Teams" ],
        "summary" : "Get a version of the team",
        "description" : "Get a version of the team by given `id`",
        "operationId" : "getSpecificRoleVersion_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the team",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Team version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "team",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            }
          },
          "404" : {
            "description" : "Team for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/topics" : {
      "get" : {
        "tags" : [ "Topics" ],
        "summary" : "List topics",
        "description" : "Get a list of topics, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listTopics",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,followers,tags,extension,domain,dataProducts"
          }
        }, {
          "name" : "service",
          "in" : "query",
          "description" : "Filter topics by service name",
          "schema" : {
            "type" : "string",
            "example" : "kafkaWestCoast"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number topics returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of topics before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of topics after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of topics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TopicList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Topics" ],
        "summary" : "Update topic",
        "description" : "Create a topic, it it does not exist or update an existing topic.",
        "operationId" : "createOrUpdateTopic",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTopic"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The updated topic ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Topic"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Topics" ],
        "summary" : "Create a topic",
        "description" : "Create a topic under an existing `service`.",
        "operationId" : "createTopic",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTopic"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The topic",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Topic"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/topics/name/{fqn}" : {
      "get" : {
        "tags" : [ "Topics" ],
        "summary" : "Get a topic by fully qualified name",
        "description" : "Get a topic by fully qualified name.",
        "operationId" : "getTopicByFQN",
        "parameters" : [ {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the topic",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,followers,tags,extension,domain,dataProducts"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The topic",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Topic"
                }
              }
            }
          },
          "404" : {
            "description" : "Topic for instance {fqn} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Topics" ],
        "summary" : "Delete a topic by fully qualified name",
        "description" : "Delete a topic by `fullyQualifiedName`.",
        "operationId" : "deleteTopicByFQN",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the topic",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Topic for instance {fqn} is not found"
          }
        }
      }
    },
    "/v1/topics/restore" : {
      "put" : {
        "tags" : [ "Topics" ],
        "summary" : "Restore a soft deleted topic",
        "description" : "Restore a soft deleted topic.",
        "operationId" : "restore_26",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the Topic. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Topic"
                }
              }
            }
          }
        }
      }
    },
    "/v1/topics/{id}" : {
      "get" : {
        "tags" : [ "Topics" ],
        "summary" : "Get a topic by id",
        "description" : "Get a topic by `id`.",
        "operationId" : "get_5",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the topic",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "owner,followers,tags,extension,domain,dataProducts"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The topic",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Topic"
                }
              }
            }
          },
          "404" : {
            "description" : "Topic for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Topics" ],
        "summary" : "Delete a topic by id",
        "description" : "Delete a topic by `id`.",
        "operationId" : "deleteTopic",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the topic",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Topic for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Topics" ],
        "summary" : "Update a topic",
        "description" : "Update an existing topic using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchTopic",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the topic",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/topics/{id}/followers" : {
      "put" : {
        "tags" : [ "Topics" ],
        "summary" : "Add a follower",
        "description" : "Add a user identified by `userId` as followed of this topic",
        "operationId" : "addFollower_8",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the topic",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Id of the user to be added as follower",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "format" : "uuid"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          },
          "404" : {
            "description" : "Topic for instance {id} is not found"
          }
        }
      }
    },
    "/v1/topics/{id}/followers/{userId}" : {
      "delete" : {
        "tags" : [ "Topics" ],
        "summary" : "Remove a follower",
        "description" : "Remove the user identified `userId` as a follower of the topic.",
        "operationId" : "deleteFollower_9",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the topic",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "Id of the user being removed as follower",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeEvent"
                }
              }
            }
          }
        }
      }
    },
    "/v1/topics/{id}/sampleData" : {
      "get" : {
        "tags" : [ "Topics" ],
        "summary" : "Get sample data",
        "description" : "Get sample data from the topic.",
        "operationId" : "getSampleData_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the topic",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully obtained the Topic",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Topic"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Topics" ],
        "summary" : "Add sample data",
        "description" : "Add sample data to the topic.",
        "operationId" : "addSampleData_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the topic",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TopicSampleData"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The topic",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Topic"
                }
              }
            }
          }
        }
      }
    },
    "/v1/topics/{id}/versions" : {
      "get" : {
        "tags" : [ "Topics" ],
        "summary" : "List topic versions",
        "description" : "Get a list of all the versions of a topic identified by `id`",
        "operationId" : "listAllTopicVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the topic",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of topic versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/topics/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Topics" ],
        "summary" : "Get a version of the topic",
        "description" : "Get a version of the topic by given `id`",
        "operationId" : "getSpecificTopicVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the topic",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Topic version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "topic",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Topic"
                }
              }
            }
          },
          "404" : {
            "description" : "Topic for instance {id} and version {version} is not found"
          }
        }
      }
    },
    "/v1/usage/{entity}/name/{fqn}" : {
      "get" : {
        "tags" : [ "Usage" ],
        "summary" : "Get usage by fully qualified name",
        "description" : "Get usage details for an entity identified by fully qualified name.",
        "operationId" : "getEntityUsageByFQN",
        "parameters" : [ {
          "name" : "entity",
          "in" : "path",
          "description" : "Entity type for which usage is requested",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "table, report, metrics, or dashboard"
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the entity that uniquely identifies an entity",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "days",
          "in" : "query",
          "description" : "Usage for number of days going back from the given date (default=1, min=1, max=30)",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "Usage for number of days going back from this date in ISO 8601 format (default = currentDate)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Entity usage",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityUsage"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity for instance {fqn} is not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Usage" ],
        "summary" : "Report usage by fully qualified name",
        "description" : "Report usage information for an entity by name on a given date. System stores last 30 days of usage information. Usage information older than 30 days is deleted.",
        "operationId" : "reportEntityUsageWithFQN_1",
        "parameters" : [ {
          "name" : "entity",
          "in" : "path",
          "description" : "Entity type for which usage is reported",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "table, report, metrics, or dashboard"
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the entity that uniquely identifies an entity",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Usage information a given date",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DailyCount"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Usage information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityUsage"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Usage" ],
        "summary" : "Report usage by fully qualified name",
        "description" : "Report usage information for an entity by name on a given date. System stores last 30 days of usage information. Usage information older than 30 days is deleted.",
        "operationId" : "reportEntityUsageWithFQN",
        "parameters" : [ {
          "name" : "entity",
          "in" : "path",
          "description" : "Entity type for which usage is reported",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "table, report, metrics, or dashboard"
          }
        }, {
          "name" : "fqn",
          "in" : "path",
          "description" : "Fully qualified name of the entity that uniquely identifies an entity",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Usage information a given date",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DailyCount"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Usage information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityUsage"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/usage/{entity}/{id}" : {
      "get" : {
        "tags" : [ "Usage" ],
        "summary" : "Get usage by id",
        "description" : "Get usage details for an entity identified by `id`.",
        "operationId" : "getEntityUsageByID",
        "parameters" : [ {
          "name" : "entity",
          "in" : "path",
          "description" : "Entity type for which usage is requested",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "table, report, metrics, or dashboard"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Entity id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "days",
          "in" : "query",
          "description" : "Usage for number of days going back from the given date (default=1, min=1, max=30)",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "Usage for number of days going back from this date in ISO 8601 format. (default = currentDate)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Entity usage",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityUsage"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity for instance {id} is not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Usage" ],
        "summary" : "Report usage",
        "description" : "Report usage information for an entity on a given date. System stores last 30 days of usage information. Usage information older than 30 days is deleted.",
        "operationId" : "reportEntityUsageWithID_1",
        "parameters" : [ {
          "name" : "entity",
          "in" : "path",
          "description" : "Entity type for which usage is reported",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "table, report, metrics, or dashboard"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Entity id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Usage information a given date",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DailyCount"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Usage information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityUsage"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Usage" ],
        "summary" : "Report usage",
        "description" : "Report usage information for an entity on a given date. System stores last 30 days of usage information. Usage information older than 30 days is deleted.",
        "operationId" : "reportEntityUsageWithID",
        "parameters" : [ {
          "name" : "entity",
          "in" : "path",
          "description" : "Entity type for which usage is reported",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "table, report, metrics, or dashboard"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Entity id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Usage information a given date",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DailyCount"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Usage information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityUsage"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "List users",
        "description" : "Get a list of users. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
        "operationId" : "listUsers",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "profile,roles,teams,follows,owns,domain"
          }
        }, {
          "name" : "team",
          "in" : "query",
          "description" : "Filter users by team name. To get users without team set value 'filterNoTeam'",
          "schema" : {
            "type" : "string",
            "example" : "Legal"
          }
        }, {
          "name" : "role",
          "in" : "query",
          "description" : "Filter users by role name. To get users without team set value 'filterNoRole'",
          "schema" : {
            "type" : "string",
            "example" : "Bot"
          }
        }, {
          "name" : "naturalSort",
          "in" : "query",
          "description" : "Natural sort",
          "schema" : {
            "type" : "boolean",
            "example" : false,
            "default" : true
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Field for sorting: team/role/name/dname",
          "schema" : {
            "type" : "string",
            "example" : "dname"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number users returned. (1 to 1000000, default = 10)",
          "schema" : {
            "maximum" : 1000000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Returns list of users before this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Returns list of users after this cursor",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "isAdmin",
          "in" : "query",
          "description" : "Returns list of admin users if set to true",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "isBot",
          "in" : "query",
          "description" : "Returns list of bot users if set to true",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserList"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Update user",
        "description" : "Create or Update a user.",
        "operationId" : "createOrUpdateUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateUser"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateUser"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Create a user",
        "description" : "Create a new user.",
        "operationId" : "createUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateUser"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/auth-mechanism/{id}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get Authentication Mechanism for a Bot User",
        "description" : "Get Authentication Mechanism for a Bot User.",
        "operationId" : "getAuthenticationMechanismBotUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticationMechanism"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/changePassword" : {
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Change Password For User",
        "description" : "Create a new user.",
        "operationId" : "changeUserPassword",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/checkEmailInUse" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Check if a mail is already in use",
        "description" : "Check if a mail is already in use",
        "operationId" : "checkEmailInUse",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Return true or false",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/checkEmailVerified" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Check if a mail is verified",
        "description" : "Check if a mail is already in use",
        "operationId" : "checkEmailIsVerified",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Return true or false",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/documentation/csv" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get CSV documentation for user import/export",
        "operationId" : "getCsvDocumentation_1",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/export" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Export users in a team in CSV format",
        "operationId" : "exportUsers",
        "parameters" : [ {
          "name" : "team",
          "in" : "query",
          "description" : "Name of the team to under which the users are imported to",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Exported csv with user information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/fullType/byCreateEntity" : {
      "post" : {
        "tags" : [ "adcEntityAdditionTypes", "Users" ],
        "summary" : "Get a entity addition type by createEntity request",
        "description" : "Get a entity addition type by createEntity request",
        "operationId" : "getAdcTypeByCreateEntity_5",
        "parameters" : [ {
          "name" : "prepare",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateUser"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The entity addition type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdcType"
                }
              }
            }
          },
          "400" : {
            "description" : "If type or entity aren't specified"
          }
        }
      }
    },
    "/v1/users/generatePasswordResetLink" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Generate Password Reset Link",
        "description" : "Generate Password Reset Link",
        "operationId" : "generatePasswordResetLink",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The user "
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/generateRandomPwd" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Generate a random password",
        "description" : "Generate a random password",
        "operationId" : "generateRandomPwd",
        "responses" : {
          "200" : {
            "description" : "Random pwd"
          }
        }
      }
    },
    "/v1/users/generateToken/{id}" : {
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Generate JWT Token for a Bot User",
        "description" : "Generate JWT Token for a Bot User.",
        "operationId" : "generateJWTTokenForBotUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenerateTokenRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "enum" : [ "OneHour", "1", "7", "30", "60", "90", "Unlimited" ]
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/import" : {
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Import from CSV to create, and update teams.",
        "operationId" : "importTeams_1",
        "parameters" : [ {
          "name" : "team",
          "in" : "query",
          "description" : "Name of the team to under which the users are imported to",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dryRun",
          "in" : "query",
          "description" : "Dry-run when true is used for validating the CSV without really importing it. (default=true)",
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "requestBody" : {
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Import result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CsvImportResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/loggedInUser" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get current logged in user",
        "description" : "Get the user who is authenticated and is currently logged in.",
        "operationId" : "getCurrentLoggedInUser",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "profile,roles,teams,follows,owns,domain"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/v1/users/loggedInUser/groupTeams" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get group type of teams for current logged in user",
        "description" : "Get the group type of teams of user who is authenticated and is currently logged in.",
        "operationId" : "getCurrentLoggedInUserGroupTeams",
        "responses" : {
          "200" : {
            "description" : "The teams of type 'Group' that a user belongs to",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EntityReference"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/v1/users/login" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Login User with email (plain-text) and Password (encoded in base 64)",
        "description" : "Login User with email(plain-text) and Password (encoded in base 64)",
        "operationId" : "loginUserWithPwd",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns the Jwt Token Response ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JwtResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/logout" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Logout a User(Only called for saml and basic Auth)",
        "description" : "Logout a User(Only called for saml and basic Auth)",
        "operationId" : "logoutUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LogoutRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The user "
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/name/{name}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get a user by name",
        "description" : "Get a user by `name`.",
        "operationId" : "getUserByFQN",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "profile,roles,teams,follows,owns,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "404" : {
            "description" : "User for instance {name} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Delete a user",
        "description" : "Users can't be deleted but are soft-deleted.",
        "operationId" : "deleteUserByName",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "User for instance {name} is not found"
          }
        }
      }
    },
    "/v1/users/password/reset" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Reset Password For User",
        "description" : "Reset User Password",
        "operationId" : "resetUserPassword",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PasswordResetRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/refresh" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Provide access token to User with refresh token",
        "description" : "Provide access token to User with refresh token",
        "operationId" : "refreshToken",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TokenRefreshRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JwtResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/registrationConfirmation" : {
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Confirm User Email",
        "description" : "Confirm User Email",
        "operationId" : "confirmUserEmail",
        "parameters" : [ {
          "name" : "token",
          "in" : "query",
          "description" : "Token sent for Email Confirmation",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user "
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/resendRegistrationToken" : {
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Resend Registration Token",
        "description" : "Resend Registration Token",
        "operationId" : "resendRegistrationToken",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "Token sent for Email Confirmation Earlier",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user "
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/restore" : {
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Restore a soft deleted User.",
        "description" : "Restore a soft deleted User.",
        "operationId" : "restore_25",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestoreEntity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully restored the User ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/revokeToken" : {
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Revoke JWT Token for a Bot User",
        "description" : "Revoke JWT Token for a Bot User.",
        "operationId" : "revokeJWTTokenForBotUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RevokeTokenRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWTAuthMechanism"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/security/token" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get personal access token to User",
        "description" : "Get a personal access token",
        "operationId" : "getPersonalAccessToken",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "User Name of the User for which to get. (Default = `false`)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List Of Personal Access Tokens ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonalAccessTokenList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Provide access token to User",
        "description" : "Provide access token to User",
        "operationId" : "createPersonalAccessToken",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePersonalToken"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonalAccessToken"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/security/token/revoke" : {
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Revoke personal access token to User",
        "description" : "Revoke personal access token",
        "operationId" : "revokePersonalAccessToken",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "Username in case admin is revoking. (Default = `false`)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "removeAll",
          "in" : "query",
          "description" : "Remove All tokens of the user. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RevokePersonalTokenRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The Personal access token ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonalAccessTokenList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/signup" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Register User",
        "description" : "Register a new User",
        "operationId" : "registerUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The user "
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/token/{id}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get JWT Token for a Bot User",
        "description" : "Get JWT Token for a Bot User.",
        "operationId" : "getJWTTokenForBotUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWTAuthMechanism"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/v1/users/{id}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get a user",
        "description" : "Get a user by `id`",
        "operationId" : "getUserByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields requested in the returned resource",
          "schema" : {
            "type" : "string",
            "example" : "profile,roles,teams,follows,owns,domain"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "Include all, deleted, or non-deleted entities.",
          "schema" : {
            "type" : "string",
            "default" : "non-deleted",
            "enum" : [ "all", "deleted", "non-deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "404" : {
            "description" : "User for instance {id} is not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Delete a user",
        "description" : "Users can't be deleted but are soft-deleted.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "hardDelete",
          "in" : "query",
          "description" : "Hard delete the entity. (Default = `false`)",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "User for instance {id} is not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Users" ],
        "summary" : "Update a user",
        "description" : "Update an existing user using JsonPatch.",
        "externalDocs" : {
          "description" : "JsonPatch RFC",
          "url" : "https://tools.ietf.org/html/rfc6902"
        },
        "operationId" : "patchUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "JsonPatch with array of operations",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "object"
              },
              "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/v1/users/{id}/versions" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "List user versions",
        "description" : "Get a list of all the versions of a user identified by `id`",
        "operationId" : "listAllUserVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of user versions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityHistory"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{id}/versions/{version}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get a version of the user",
        "description" : "Get a version of the user by given `id`",
        "operationId" : "getSpecificUserVersion",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the user",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "User version number in the form `major`.`minor`",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "0.1 or 1.1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "404" : {
            "description" : "User for instance {id} and version {version} is not found"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AdcAdditionDirective" : {
        "required" : [ "adcEntityAddition", "condition", "id", "targetType" ],
        "type" : "object",
        "properties" : {
          "adcEntityAddition" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "condition" : {
            "$ref" : "#/components/schemas/Condition"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "targetType" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "AdcAdditionDirectiveList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcAdditionDirective"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "AdcAdditionTriadOfGlossary" : {
        "required" : [ "addition", "directive", "glossary" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/AdcEntityAddition"
          },
          "directive" : {
            "$ref" : "#/components/schemas/AdcAdditionDirective"
          },
          "glossary" : {
            "$ref" : "#/components/schemas/Glossary"
          }
        }
      },
      "AdcAdditionTriadOfTermType" : {
        "required" : [ "addition", "directive", "glossaryTermType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/AdcEntityAddition"
          },
          "directive" : {
            "$ref" : "#/components/schemas/AdcAdditionDirective"
          },
          "glossaryTermType" : {
            "$ref" : "#/components/schemas/AdcGlossaryTermType"
          }
        }
      },
      "AdcEntityAddition" : {
        "required" : [ "attributes", "id", "name", "schema" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "schema" : {
            "$ref" : "#/components/schemas/ObjectNode"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "AdcEntityAdditionAttributeConfig" : {
        "required" : [ "class", "hidden", "order", "placeholder", "required", "segment", "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityReferencePayload"
        }, {
          "type" : "object",
          "properties" : {
            "required" : {
              "type" : "boolean"
            },
            "frozen" : {
              "type" : "boolean"
            },
            "hidden" : {
              "type" : "boolean"
            },
            "segment" : {
              "type" : "string",
              "enum" : [ "baseLeft", "baseRight", "relatedTerms", "dataQuality", "ttLeft", "ttRight", "saLeft", "saRight" ]
            },
            "order" : {
              "type" : "integer",
              "format" : "int32"
            },
            "class" : {
              "type" : "string",
              "enum" : [ "link", "tag", "reference", "markdown", "mathFormula", "date" ]
            },
            "placeholder" : {
              "type" : "string"
            }
          }
        } ]
      },
      "AdcEntityAdditionList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcEntityAddition"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "AdcEntityAttribute" : {
        "required" : [ "definition", "id", "isArray", "keyName", "name", "renderSpec", "required" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "arrayConstraints" : {
            "$ref" : "#/components/schemas/AdcEntityAttributeArrayConstraints"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "definition" : {
            "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 128,
            "minLength" : 2,
            "pattern" : "^(?U)(?![-_ ,—])[\\w()\\[\\]`%+!?\"/\\\\][\\w ()\\[\\]_\\-`,%+—!?\"/\\\\]+(?<![-_ ,—])$",
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "isArray" : {
            "type" : "boolean"
          },
          "isBasic" : {
            "type" : "boolean"
          },
          "isFrozen" : {
            "type" : "boolean"
          },
          "keyName" : {
            "maxLength" : 1024,
            "minLength" : 1,
            "pattern" : "^(?U)(?! |\\d+$|.*-$)[\\w()\\[\\]`%+!?#\\\\]+$",
            "type" : "string"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 2,
            "pattern" : "^(?U)(?![-_ ,—])[\\w()\\[\\]`%+!?\"/\\\\][\\w ()\\[\\]_\\-`,%+—!?\"/\\\\]+(?<![-_ ,—])$",
            "type" : "string"
          },
          "overridable" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "renderSpec" : {
            "$ref" : "#/components/schemas/AdcEntityAttributeComplexRenderSpec"
          },
          "required" : {
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "unpowered" : {
            "type" : "boolean"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "AdcEntityAttributeArrayConstraints" : {
        "type" : "object",
        "properties" : {
          "maxItems" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minItems" : {
            "type" : "integer",
            "format" : "int32"
          },
          "uniqueItems" : {
            "type" : "boolean"
          }
        }
      },
      "AdcEntityAttributeComplexRenderSpec" : {
        "required" : [ "renderSpec" ],
        "type" : "object",
        "properties" : {
          "nestedRenderSpecs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NestedRenderSpec"
            }
          },
          "renderSpec" : {
            "$ref" : "#/components/schemas/AdcEntityAttributeRenderSpec"
          }
        }
      },
      "AdcEntityAttributeDefinition" : {
        "type" : "object",
        "properties" : {
          "schema" : {
            "type" : "object"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "string", "stringConst", "markdown", "mathFormula", "date", "number", "boolean", "link", "enum", "reference", "tag", "code", "increment" ]
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "AdcEntityAttributeDto" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "$ref" : "#/components/schemas/AttributeDtoConfig"
          },
          "configOverridable" : {
            "$ref" : "#/components/schemas/AttributeDtoConfigReadOnly"
          },
          "definition" : {
            "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
          },
          "displayName" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "isArray" : {
            "type" : "boolean"
          },
          "isBasic" : {
            "type" : "boolean"
          },
          "isFrozen" : {
            "type" : "boolean"
          },
          "keyName" : {
            "type" : "string"
          },
          "useAs" : {
            "type" : "string",
            "enum" : [ "name", "displayName", "other" ]
          }
        }
      },
      "AdcEntityAttributeList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcEntityAttribute"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "AdcEntityAttributeRenderSpec" : {
        "type" : "object",
        "properties" : {
          "class" : {
            "type" : "string",
            "enum" : [ "link", "tag", "reference", "markdown", "mathFormula", "date" ]
          },
          "hidden" : {
            "type" : "boolean"
          },
          "hint" : {
            "type" : "string"
          },
          "order" : {
            "type" : "integer",
            "format" : "int32"
          },
          "placeholder" : {
            "type" : "string"
          },
          "segment" : {
            "type" : "string",
            "enum" : [ "baseLeft", "baseRight", "relatedTerms", "dataQuality", "ttLeft", "ttRight", "saLeft", "saRight" ]
          }
        }
      },
      "AdcEntityAttributeWithTargets" : {
        "required" : [ "attribute", "targets" ],
        "type" : "object",
        "properties" : {
          "attribute" : {
            "$ref" : "#/components/schemas/AdcEntityAttribute"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          }
        }
      },
      "AdcEntityMetadataResponse" : {
        "type" : "object",
        "properties" : {
          "attributeArgumentsPaths" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "schema" : {
            "$ref" : "#/components/schemas/ObjectNode"
          }
        }
      },
      "AdcEntityReferencePayload" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "additionAttributeConfig", "relationshipConditionBasedDirectiveKey", "glossaryTermInfo", "testCaseResult" ]
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "AdcEntityTypePairPairingCondition" : {
        "required" : [ "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcRelationshipPairingCondition"
        } ]
      },
      "AdcEntityWithErrors" : {
        "required" : [ "entity", "errors" ],
        "type" : "object",
        "properties" : {
          "entity" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcErrorResponse"
            }
          }
        }
      },
      "AdcError" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "enum" : [ "exception_unexpected", "entity_tags_notFound", "entity_tags_mutuallyExclusive", "entity_validation_schemaConstraintViolation_base", "entity_validation_schemaConstraintViolation_addition", "entity_validation_referencedEntityNotFound", "entity_validation_adcStewardsWithoutOwner", "entity_validation_selfReference", "entity_validation_attributeValueIsNotUnique", "entity_validation_relConstraint_invalidValue", "entity_validation_relConstraint_referencedEntityAlreadyLinked", "entity_validation_relPairing_pairOfEntityTypesAreNotSupported", "entity_validation_relPairing_thisEntityTypeIsNotSupported", "entity_validation_relPairing_otherEntityTypeIsNotSupported", "entity_validation_relPairing_termTypePair_badThisTermType", "entity_validation_relPairing_termTypePair_badOtherTermType", "entity_validation_relPairing_termType_badThisTermType", "entity_validation_relPairing_termType_badOtherTermType", "entity_validation_relCheck_mustHave", "entity_validation_glossaryTerm_invalidHierarchy", "entity_validation_glossaryTerm_intersectionOfSynonymsAndAntonyms", "entity_validation_glossaryTerm_ownerMustBeSet", "entity_validation_glossaryTerm_subjectAreaMustBeSet", "entity_validation_glossaryTerm_subjectAreaNotInTheSameGlossary", "entity_validation_glossaryTerm_nameMustBeUniqueCaseInsensitive", "entity_validation_glossaryTerm_creation_invalidTermTypeStatus_archived", "entity_validation_glossaryTerm_creation_invalidTermTypeStatus_blocked", "entity_validation_glossaryTerm_update_invalidTermTypeStatus_archived", "entity_validation_glossaryTerm_update_invalidTermTypeStatus_blocked", "entity_validation_adcEntityAttribute_keyNameAlreadyInUse", "entity_validation_adcEntityAttribute_keyNameAlreadyInUseInTheBasicAttributes", "entity_validation_adcEntityAttribute_nameAlreadyInUseInTheBasicAttributes", "entity_validation_adcEntityAttribute_attributeIsNotOverridable", "entity_validation_adcEntityAttribute_attributeConstraintsChange", "entity_validation_adcEntityAttribute_attributeArrayConstraintsChange", "entity_validation_adcEntityAttribute_attributeRequireChange", "entity_validation_adcEntityAddition_customRoleAttributeInUse", "entity_validation_adcRelationship_attributeNameAlreadyInUse", "entity_validation_adcRelationship_condition_cantFindTermType", "entity_validation_adcRelationship_update_mustNotBeRelationshipsRecordsForTermTypesPairing", "entity_validation_adcRelationship_update_cantRemoveSomePairingBecauseOfRelInstance", "entity_validation_adcEntityBaseSchemaConfig_attributeCantBeUnpowered", "entity_validation_adcEntityBaseSchemaConfig_attributeCantBeOptional", "entity_validation_adcEntityBaseSchemaConfig_attributeCantBeReordered", "entity_validation_adcEntityBaseSchemaConfig_attributeCantChangeSegment", "entity_validation_adcEntityBaseSchemaConfig_termTypeIsBlocked", "entity_deletion_adcRelationship_mustNotBeRelationshipsRecords", "importing_referenceRestoring_noFqn", "importing_validation_cantSetFqn", "importing_validation_glossaryTerm_updateWithInvalidStatus", "importing_referenceRestoring_cantLookupType", "importing_csv_unknownHeader", "importing_csv_duplicateHeaders", "importing_csv_badFormatting", "importing_csv_emptyFile", "importing_csv_parsing_badAttributeType", "importing_csv_parsing_badAttributeTypeValue", "importing_csv_parsing_badDateFormat", "importing_csv_assets_get_entity_error", "importing_csv_assets_entity_not_found", "importing_csv_assets_tag_adding_error", "importing_csv_assets_unsupported_asset_type", "importing_csv_assets_incorrect_fields_length", "importing_s2t_require_field_missed", "importing_s2t_invalid_type_prefix", "groupUpdate_validation_updateInUnmodifiableStatus", "groupUpdate_validation_authorizationError", "groupUpdate_unsuccessfulPatch", "approval_deletion_entity_validation_invalidStatus_anyCandidate", "approval_deletion_entity_validation_invalidStatus_deprecated", "approval_update_entity_validation_invalidStatus_approved", "approval_update_entity_validation_invalidStatus_anyCandidate", "approval_update_entity_validation_invalidStatus_deprecated", "approval_entity_validation_glossaryTerm_termTypeBlocked", "approval_entity_validation_glossaryTerm_termTypeDeleted", "addition_is_empty", "addition_attribute_is_null", "exporting_parsing_attribute_serialize_error", "exporting_unsupported_attribute_type", "exporting_missing_attribute_value", "lineage_details_validation_column_can_not_be_use_with_asset", "lineage_details_validation_invalid_column_fqn", "lineage_details_columns_validation_column_source_and_target_empty", "lineage_details_columns_validation_function_used_without_column_source_and_target", "lineage_details_validation_entity_not_found", "object_locked", "workflow_configurationHasUnFinishedProcesses", "entity_validation_nameInconsistency", "entity_validation_nameAlreadyExists", "increment_valueAlreadyExists", "policy_invalid_resource", "policy_invalid_operations", "searchEngine_securityConfigurationException", "searchEngine_connectionFailed", "authorization_methodAccessForbidden", "authorization_entityAccessForbidden", "authorization_notAdmin", "authorization_unsupportedUser", "authorization_providerNotFound", "searchClient_exceededMaxQueryResultWindow", "exporting_import_result_process_already_exist", "exporting_import_result_invalid_import_status", "exporting_process_failed", "exporting_process_canceled", "exporting_process_not_finished", "typed_process_service_already_paused", "typed_process_service_already_finished", "typed_process_service_unknown_status", "typed_process_service_resume_process_not_paused", "typed_process_service_delete_can_not_during_processing", "starter_file_invalid_type", "inputRules_condition_notSupportedAttributeType", "inputRules_condition_cannotBeProcessed", "inputRules_constraints_condition_exceedMaxCount", "inputRules_constraints_exceedMaxCount", "inputRules_condition_invalid", "entity_notFound", "inputRules_condition_notSupportedInputType", "entity_validation_attribute_enum_notContainsValue", "entity_validation_attribute_notPresent", "inputRules_dependencies_precondition_exceedMaxCount", "inputRules_dependencies_consequenceCondition_exceedMaxCount", "inputRules_dependencies_exceedMaxCount", "entity_needSpecifySubType", "directive_unsupportedEntityType", "entity_validation_displayNameAlreadyExists" ]
          },
          "params" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "AdcErrorListAdcError" : {
        "type" : "array",
        "properties" : {
          "empty" : {
            "type" : "boolean"
          },
          "messages" : {
            "type" : "string"
          }
        },
        "items" : {
          "$ref" : "#/components/schemas/AdcError"
        }
      },
      "AdcErrorResponse" : {
        "required" : [ "code", "description" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "enum" : [ "exception_unexpected", "entity_tags_notFound", "entity_tags_mutuallyExclusive", "entity_validation_schemaConstraintViolation_base", "entity_validation_schemaConstraintViolation_addition", "entity_validation_referencedEntityNotFound", "entity_validation_adcStewardsWithoutOwner", "entity_validation_selfReference", "entity_validation_attributeValueIsNotUnique", "entity_validation_relConstraint_invalidValue", "entity_validation_relConstraint_referencedEntityAlreadyLinked", "entity_validation_relPairing_pairOfEntityTypesAreNotSupported", "entity_validation_relPairing_thisEntityTypeIsNotSupported", "entity_validation_relPairing_otherEntityTypeIsNotSupported", "entity_validation_relPairing_termTypePair_badThisTermType", "entity_validation_relPairing_termTypePair_badOtherTermType", "entity_validation_relPairing_termType_badThisTermType", "entity_validation_relPairing_termType_badOtherTermType", "entity_validation_relCheck_mustHave", "entity_validation_glossaryTerm_invalidHierarchy", "entity_validation_glossaryTerm_intersectionOfSynonymsAndAntonyms", "entity_validation_glossaryTerm_ownerMustBeSet", "entity_validation_glossaryTerm_subjectAreaMustBeSet", "entity_validation_glossaryTerm_subjectAreaNotInTheSameGlossary", "entity_validation_glossaryTerm_nameMustBeUniqueCaseInsensitive", "entity_validation_glossaryTerm_creation_invalidTermTypeStatus_archived", "entity_validation_glossaryTerm_creation_invalidTermTypeStatus_blocked", "entity_validation_glossaryTerm_update_invalidTermTypeStatus_archived", "entity_validation_glossaryTerm_update_invalidTermTypeStatus_blocked", "entity_validation_adcEntityAttribute_keyNameAlreadyInUse", "entity_validation_adcEntityAttribute_keyNameAlreadyInUseInTheBasicAttributes", "entity_validation_adcEntityAttribute_nameAlreadyInUseInTheBasicAttributes", "entity_validation_adcEntityAttribute_attributeIsNotOverridable", "entity_validation_adcEntityAttribute_attributeConstraintsChange", "entity_validation_adcEntityAttribute_attributeArrayConstraintsChange", "entity_validation_adcEntityAttribute_attributeRequireChange", "entity_validation_adcEntityAddition_customRoleAttributeInUse", "entity_validation_adcRelationship_attributeNameAlreadyInUse", "entity_validation_adcRelationship_condition_cantFindTermType", "entity_validation_adcRelationship_update_mustNotBeRelationshipsRecordsForTermTypesPairing", "entity_validation_adcRelationship_update_cantRemoveSomePairingBecauseOfRelInstance", "entity_validation_adcEntityBaseSchemaConfig_attributeCantBeUnpowered", "entity_validation_adcEntityBaseSchemaConfig_attributeCantBeOptional", "entity_validation_adcEntityBaseSchemaConfig_attributeCantBeReordered", "entity_validation_adcEntityBaseSchemaConfig_attributeCantChangeSegment", "entity_validation_adcEntityBaseSchemaConfig_termTypeIsBlocked", "entity_deletion_adcRelationship_mustNotBeRelationshipsRecords", "importing_referenceRestoring_noFqn", "importing_validation_cantSetFqn", "importing_validation_glossaryTerm_updateWithInvalidStatus", "importing_referenceRestoring_cantLookupType", "importing_csv_unknownHeader", "importing_csv_duplicateHeaders", "importing_csv_badFormatting", "importing_csv_emptyFile", "importing_csv_parsing_badAttributeType", "importing_csv_parsing_badAttributeTypeValue", "importing_csv_parsing_badDateFormat", "importing_csv_assets_get_entity_error", "importing_csv_assets_entity_not_found", "importing_csv_assets_tag_adding_error", "importing_csv_assets_unsupported_asset_type", "importing_csv_assets_incorrect_fields_length", "importing_s2t_require_field_missed", "importing_s2t_invalid_type_prefix", "groupUpdate_validation_updateInUnmodifiableStatus", "groupUpdate_validation_authorizationError", "groupUpdate_unsuccessfulPatch", "approval_deletion_entity_validation_invalidStatus_anyCandidate", "approval_deletion_entity_validation_invalidStatus_deprecated", "approval_update_entity_validation_invalidStatus_approved", "approval_update_entity_validation_invalidStatus_anyCandidate", "approval_update_entity_validation_invalidStatus_deprecated", "approval_entity_validation_glossaryTerm_termTypeBlocked", "approval_entity_validation_glossaryTerm_termTypeDeleted", "addition_is_empty", "addition_attribute_is_null", "exporting_parsing_attribute_serialize_error", "exporting_unsupported_attribute_type", "exporting_missing_attribute_value", "lineage_details_validation_column_can_not_be_use_with_asset", "lineage_details_validation_invalid_column_fqn", "lineage_details_columns_validation_column_source_and_target_empty", "lineage_details_columns_validation_function_used_without_column_source_and_target", "lineage_details_validation_entity_not_found", "object_locked", "workflow_configurationHasUnFinishedProcesses", "entity_validation_nameInconsistency", "entity_validation_nameAlreadyExists", "increment_valueAlreadyExists", "policy_invalid_resource", "policy_invalid_operations", "searchEngine_securityConfigurationException", "searchEngine_connectionFailed", "authorization_methodAccessForbidden", "authorization_entityAccessForbidden", "authorization_notAdmin", "authorization_unsupportedUser", "authorization_providerNotFound", "searchClient_exceededMaxQueryResultWindow", "exporting_import_result_process_already_exist", "exporting_import_result_invalid_import_status", "exporting_process_failed", "exporting_process_canceled", "exporting_process_not_finished", "typed_process_service_already_paused", "typed_process_service_already_finished", "typed_process_service_unknown_status", "typed_process_service_resume_process_not_paused", "typed_process_service_delete_can_not_during_processing", "starter_file_invalid_type", "inputRules_condition_notSupportedAttributeType", "inputRules_condition_cannotBeProcessed", "inputRules_constraints_condition_exceedMaxCount", "inputRules_constraints_exceedMaxCount", "inputRules_condition_invalid", "entity_notFound", "inputRules_condition_notSupportedInputType", "entity_validation_attribute_enum_notContainsValue", "entity_validation_attribute_notPresent", "inputRules_dependencies_precondition_exceedMaxCount", "inputRules_dependencies_consequenceCondition_exceedMaxCount", "inputRules_dependencies_exceedMaxCount", "entity_needSpecifySubType", "directive_unsupportedEntityType", "entity_validation_displayNameAlreadyExists" ]
          },
          "description" : {
            "type" : "string"
          },
          "details" : {
            "type" : "object"
          },
          "type" : {
            "type" : "string",
            "format" : "uri"
          }
        }
      },
      "AdcExportingProcess" : {
        "required" : [ "exportAssets", "fileFormat", "globalErrors", "id", "owner", "status" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "entityQuery" : {
            "$ref" : "#/components/schemas/ObjectNode"
          },
          "exportAssets" : {
            "type" : "boolean"
          },
          "extension" : {
            "type" : "object"
          },
          "file" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "fileFormat" : {
            "type" : "string",
            "enum" : [ "xlsx", "csv", "bpmn" ]
          },
          "finishedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "type" : "string"
          },
          "globalErrors" : {
            "type" : "array",
            "properties" : {
              "empty" : {
                "type" : "boolean"
              },
              "messages" : {
                "type" : "string"
              }
            },
            "items" : {
              "$ref" : "#/components/schemas/AdcError"
            }
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "startedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "pending", "canceled", "paused", "processing", "finished", "failed" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "AdcExportingProcessList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcExportingProcess"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "AdcGlossaryTermType" : {
        "required" : [ "description", "id", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "reviewers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Active", "Blocked" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "AdcGlossaryTermTypeList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcGlossaryTermType"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "AdcGroupChangeErrorsResponse" : {
        "required" : [ "entityWithErrors", "updatedAt" ],
        "type" : "object",
        "properties" : {
          "entityWithErrors" : {
            "$ref" : "#/components/schemas/AdcEntityWithErrors"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "AdcGroupUpdateProcess" : {
        "required" : [ "entityType", "globalErrors", "id", "owner", "patches", "status" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "entityType" : {
            "type" : "string",
            "enum" : [ "glossaryTerm", "glossary", "adcSubjectArea", "lineage" ]
          },
          "extension" : {
            "type" : "object"
          },
          "finishedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "type" : "string"
          },
          "globalErrors" : {
            "type" : "array",
            "properties" : {
              "empty" : {
                "type" : "boolean"
              },
              "messages" : {
                "type" : "string"
              }
            },
            "items" : {
              "$ref" : "#/components/schemas/AdcError"
            }
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "patches" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "publish" : {
            "type" : "boolean"
          },
          "startedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "pending", "processing", "canceled", "paused", "finished", "failed" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "AdcGroupUpdateProcessInfo" : {
        "required" : [ "processId", "status", "totalItems" ],
        "type" : "object",
        "properties" : {
          "failedItems" : {
            "type" : "integer",
            "format" : "int32"
          },
          "processId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "pending", "processing", "canceled", "paused", "finished", "failed" ]
          },
          "totalItems" : {
            "type" : "integer",
            "format" : "int32"
          },
          "updatedItems" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "AdcImportingHandle" : {
        "required" : [ "processId" ],
        "type" : "object",
        "properties" : {
          "processId" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "AdcImportingProcess" : {
        "required" : [ "entityType", "fileFormat", "fileHash", "fileName", "globalErrors", "id", "owner", "status" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "entityType" : {
            "type" : "string",
            "enum" : [ "glossaryTerm", "glossary", "adcSubjectArea", "lineage" ]
          },
          "extension" : {
            "type" : "object"
          },
          "file" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "fileFormat" : {
            "type" : "string",
            "enum" : [ "csv", "xlsx" ]
          },
          "fileHash" : {
            "type" : "string"
          },
          "fileName" : {
            "maxLength" : 2147483647,
            "minLength" : 1,
            "type" : "string"
          },
          "finalizedSchema" : {
            "$ref" : "#/components/schemas/ObjectNode"
          },
          "finishedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "type" : "string"
          },
          "globalErrors" : {
            "type" : "array",
            "properties" : {
              "empty" : {
                "type" : "boolean"
              },
              "messages" : {
                "type" : "string"
              }
            },
            "items" : {
              "$ref" : "#/components/schemas/AdcError"
            }
          },
          "headers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "startedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "pending", "validating", "validating-canceled", "validating-paused", "validating-failed", "validated", "importing_pending", "importing", "importing-canceled", "importing-paused", "importing-failed", "imported" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "validationSchema" : {
            "$ref" : "#/components/schemas/ObjectNode"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "AdcImportingResults" : {
        "required" : [ "commonSchema", "globalErrors", "items" ],
        "type" : "object",
        "properties" : {
          "commonSchema" : {
            "$ref" : "#/components/schemas/ObjectNode"
          },
          "globalErrors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcErrorResponse"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ImportingResult"
            }
          }
        }
      },
      "AdcImportingStatus" : {
        "required" : [ "entityType", "itemsImported", "itemsValidated", "processId", "status", "totalItems" ],
        "type" : "object",
        "properties" : {
          "createdItems" : {
            "type" : "integer",
            "format" : "int32"
          },
          "deletedItems" : {
            "type" : "integer",
            "format" : "int32"
          },
          "entityType" : {
            "type" : "string",
            "enum" : [ "glossaryTerm", "glossary", "adcSubjectArea", "lineage" ]
          },
          "failedItems" : {
            "type" : "integer",
            "format" : "int32"
          },
          "itemsImported" : {
            "type" : "integer",
            "format" : "int32"
          },
          "itemsValidated" : {
            "type" : "integer",
            "format" : "int32"
          },
          "processId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "pending", "validating", "validating-canceled", "validating-paused", "validating-failed", "validated", "importing_pending", "importing", "importing-canceled", "importing-paused", "importing-failed", "imported" ]
          },
          "totalItems" : {
            "type" : "integer",
            "format" : "int32"
          },
          "updatedItems" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "AdcReferenceAttributeRelationshipSchema" : {
        "required" : [ "direction", "neighborTypes", "type" ],
        "type" : "object",
        "properties" : {
          "anchor" : {
            "type" : "string"
          },
          "condition" : {
            "$ref" : "#/components/schemas/AdcRelationshipPairingCondition"
          },
          "direction" : {
            "type" : "string",
            "enum" : [ "FROM", "TO", "BI" ]
          },
          "id" : {
            "$ref" : "#/components/schemas/RelationshipId"
          },
          "isNeighborAttributeSingular" : {
            "type" : "boolean"
          },
          "neighborTypes" : {
            "maxItems" : 2147483647,
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "pairings" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Pairing"
            }
          },
          "type" : {
            "type" : "string",
            "enum" : [ "contains", "createdBy", "repliedTo", "isAbout", "addressedTo", "mentionedIn", "testedBy", "uses", "owns", "parentOf", "has", "follows", "joinedWith", "upstream", "appliedTo", "relatedTo", "reviews", "reactedTo", "adcTypeOf", "adcStewards", "adcConsumes", "adcSchemaEmbeddedEnumVal", "adcDirectiveTargetType", "adcDirectiveTargetAddition", "adcAssignedTo", "adcClaimedTo", "adcInstanceOf", "adcDoerOf", "adcAdditionalSubjectAreaOf", "adcSynonymOf", "adcParentOf_EntityGlossaryTerm", "adcHas_AttributeGlossaryTerm", "adcUses_KpiArgGlossaryTerm", "adcAntonymOf", "adcOwnerOfUserSettings", "adcDefaultUserSettings", "adcReferenceForUserSettings", "adcRelatedTo_WithAnchoredRelation", "voted", "expert", "adcCustomRelationship", "adcAssignedBy", "adcBaseSchemaConfigTargetType", "usedAsValueConstraintCondition", "constraintSensitivityOnAttributeChanges", "usedAsValueDependencyCondition", "dependencySensitivityOnAttributeChanges" ]
          }
        }
      },
      "AdcRelationship" : {
        "required" : [ "attribute", "attributeKeyName", "bidirectional", "description", "id", "multipleDestinations", "multipleSources", "name", "numId", "pairings", "reverseAttribute", "reverseAttributeKeyName", "reverseName" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "attribute" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "attributeKeyName" : {
            "maxLength" : 1024,
            "minLength" : 1,
            "pattern" : "^(?U)(?! |\\d+$|.*-$)[\\w()\\[\\]`%+!?#\\\\]+$",
            "type" : "string"
          },
          "bidirectional" : {
            "type" : "boolean"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "directives" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "entityAddition" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 128,
            "minLength" : 2,
            "pattern" : "^(?U)(?![-_ ,—])[\\w()\\[\\]`%+!?\"/\\\\][\\w ()\\[\\]_\\-`,%+—!?\"/\\\\]+(?<![-_ ,—])$",
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "multipleDestinations" : {
            "type" : "boolean"
          },
          "multipleSources" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 2,
            "pattern" : "^(?U)(?![-_ ,—])[\\w()\\[\\]`%+!?\"/\\\\][\\w ()\\[\\]_\\-`,%+—!?\"/\\\\]+(?<![-_ ,—])$",
            "type" : "string"
          },
          "numId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "pairings" : {
            "maxItems" : 2147483647,
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Pairing"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "reverseAttribute" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "reverseAttributeKeyName" : {
            "maxLength" : 1024,
            "minLength" : 1,
            "pattern" : "^(?U)(?! |\\d+$|.*-$)[\\w()\\[\\]`%+!?#\\\\]+$",
            "type" : "string"
          },
          "reverseDirectives" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "reverseEntityAddition" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "reverseName" : {
            "maxLength" : 128,
            "minLength" : 2,
            "pattern" : "^(?U)(?![-_ ,—])[\\w()\\[\\]`%+!?\"/\\\\][\\w ()\\[\\]_\\-`,%+—!?\"/\\\\]+(?<![-_ ,—])$",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "AdcRelationshipConditionBasedDirectiveKey" : {
        "required" : [ "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityReferencePayload"
        }, {
          "type" : "object",
          "properties" : {
            "pairingSnapshot" : {
              "$ref" : "#/components/schemas/Pairing"
            }
          }
        } ]
      },
      "AdcRelationshipPairingCondition" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "entityTypePair", "termTypeIn", "termTypePair", "termType" ]
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "AdcSearchStatsRequest" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string"
          },
          "gsas" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Gsa"
            }
          }
        }
      },
      "AdcSearchStatsResponse" : {
        "type" : "object",
        "properties" : {
          "stats" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Stats"
            }
          },
          "subjectAreaCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "termCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "total_found" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "AdcSettings" : {
        "required" : [ "description", "id", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "AdcSubjectArea" : {
        "required" : [ "displayName", "glossary", "id", "name" ],
        "type" : "object",
        "properties" : {
          "adcStewards" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "glossary" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "hasChildren" : {
            "type" : "boolean"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "isFollower" : {
            "type" : "boolean"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parent" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Draft", "Approved", "Deprecated", "Candidate", "CandidateForDeletion" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "AdcSubjectAreaList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcSubjectArea"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "AdcTermTypePairPairingCondition" : {
        "required" : [ "destTermTypeId", "destTermTypeName", "sourceTermTypeId", "sourceTermTypeName", "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcRelationshipPairingCondition"
        }, {
          "type" : "object",
          "properties" : {
            "sourceTermTypeId" : {
              "type" : "string",
              "format" : "uuid"
            },
            "sourceTermTypeName" : {
              "maxLength" : 128,
              "minLength" : 1,
              "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
              "type" : "string"
            },
            "destTermTypeId" : {
              "type" : "string",
              "format" : "uuid"
            },
            "destTermTypeName" : {
              "maxLength" : 128,
              "minLength" : 1,
              "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
              "type" : "string"
            }
          }
        } ]
      },
      "AdcTermTypePairingCondition" : {
        "required" : [ "termTypeId", "termTypeName", "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcRelationshipPairingCondition"
        }, {
          "type" : "object",
          "properties" : {
            "termTypeId" : {
              "type" : "string",
              "format" : "uuid"
            },
            "termTypeName" : {
              "maxLength" : 128,
              "minLength" : 1,
              "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
              "type" : "string"
            }
          }
        } ]
      },
      "AdcType" : {
        "required" : [ "category", "description", "id", "name", "propertyParametersPaths", "schema" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "category" : {
            "type" : "string",
            "enum" : [ "entity", "addition", "full" ]
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "propertyParametersPaths" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "schema" : {
            "$ref" : "#/components/schemas/ObjectNode"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "AdcTypeList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcType"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "AdcUserDescriptionEntityReference" : {
        "required" : [ "id", "type" ],
        "type" : "object",
        "properties" : {
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "fullyQualifiedName" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string"
          },
          "payload" : {
            "$ref" : "#/components/schemas/AdcEntityReferencePayload"
          },
          "type" : {
            "type" : "string"
          },
          "userDescription" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "AdcUserSettings" : {
        "required" : [ "displayName", "id", "object", "objectType", "settingReference" ],
        "type" : "object",
        "properties" : {
          "adcMigrationVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "default" : {
            "type" : "boolean"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "maxLength" : 128,
            "minLength" : 1,
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "favorite" : {
            "type" : "boolean"
          },
          "favoriteForShared" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "boolean"
            }
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string"
          },
          "object" : {
            "type" : "string"
          },
          "objectType" : {
            "type" : "string",
            "enum" : [ "View", "Global", "NewNotificationFlagForMentions", "NewNotificationFlagForRequests", "NewNotificationFlagForTasks", "Local", "Shared", "FiltersVisibility", "Selected" ]
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "settingReference" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "sharedHref" : {
            "type" : "string",
            "format" : "uri"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "AddLineage" : {
        "required" : [ "edge" ],
        "type" : "object",
        "properties" : {
          "edge" : {
            "$ref" : "#/components/schemas/EntitiesEdge"
          }
        }
      },
      "AdditionAndDirective" : {
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/AdcEntityAddition"
          },
          "directive" : {
            "$ref" : "#/components/schemas/AdcAdditionDirective"
          }
        }
      },
      "Aggregation" : {
        "type" : "object",
        "properties" : {
          "fragment" : {
            "type" : "boolean"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "AggregationProfileShardResult" : {
        "type" : "object",
        "properties" : {
          "fragment" : {
            "type" : "boolean"
          },
          "profileResults" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProfileResult"
            }
          }
        }
      },
      "Aggregations" : {
        "type" : "object",
        "properties" : {
          "asMap" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Aggregation"
            }
          },
          "fragment" : {
            "type" : "boolean"
          }
        }
      },
      "AssigneesConfig" : {
        "type" : "object",
        "properties" : {
          "automaticActionForEmptyAssignees" : {
            "type" : "string",
            "enum" : [ "requireAssignees", "complete" ]
          },
          "glossaryTermAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "roles" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "initiator", "owner", "steward", "subjectAreaOwner", "subjectAreaSteward", "glossaryOwner", "glossarySteward", "subjectAreaAttributes", "glossaryTermAttributes" ]
            }
          },
          "subjectAreaAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          }
        }
      },
      "AttributeDtoConfig" : {
        "type" : "object",
        "properties" : {
          "class" : {
            "type" : "string",
            "enum" : [ "link", "tag", "reference", "markdown", "mathFormula", "date" ]
          },
          "hidden" : {
            "type" : "boolean"
          },
          "order" : {
            "type" : "integer",
            "format" : "int32"
          },
          "placeholder" : {
            "type" : "string"
          },
          "required" : {
            "type" : "boolean"
          },
          "segment" : {
            "type" : "string",
            "enum" : [ "baseLeft", "baseRight", "relatedTerms", "dataQuality", "ttLeft", "ttRight", "saLeft", "saRight" ]
          },
          "unpowered" : {
            "type" : "boolean"
          }
        }
      },
      "AttributeDtoConfigReadOnly" : {
        "type" : "object",
        "properties" : {
          "class" : {
            "type" : "boolean"
          },
          "hidden" : {
            "type" : "boolean"
          },
          "order" : {
            "type" : "boolean"
          },
          "placeholder" : {
            "type" : "boolean"
          },
          "required" : {
            "type" : "boolean"
          },
          "segment" : {
            "type" : "boolean"
          },
          "unpowered" : {
            "type" : "boolean"
          }
        }
      },
      "AttributeFilter" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "limit" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "values" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Value"
            }
          }
        }
      },
      "AttributeReferenceWithTargets" : {
        "type" : "object",
        "properties" : {
          "attribute" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          }
        }
      },
      "Attributes" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/AdcEntityAttributeDto"
        }
      },
      "AuthenticationMechanism" : {
        "type" : "object",
        "properties" : {
          "authType" : {
            "type" : "string",
            "enum" : [ "JWT", "SSO", "BASIC" ]
          },
          "config" : {
            "type" : "object"
          }
        }
      },
      "AvailableConditionConfigurationDto" : {
        "type" : "object",
        "properties" : {
          "attributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConditionAttributeDto"
            }
          },
          "functions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConditionFunctionDto"
            }
          },
          "isValidCondition" : {
            "type" : "boolean"
          },
          "operators" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConditionOperatorDto"
            }
          }
        }
      },
      "BooleanAttributeDefinition" : {
        "required" : [ "schema", "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
        }, {
          "type" : "object",
          "properties" : {
            "schema" : {
              "$ref" : "#/components/schemas/Schema"
            }
          }
        } ]
      },
      "Bot" : {
        "required" : [ "botUser", "id", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "botUser" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 64,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w\\-.]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "BotList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Bot"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "BytesReference" : {
        "type" : "object",
        "properties" : {
          "fragment" : {
            "type" : "boolean"
          }
        }
      },
      "ChangeDescription" : {
        "type" : "object",
        "properties" : {
          "fieldsAdded" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldChange"
            }
          },
          "fieldsDeleted" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldChange"
            }
          },
          "fieldsUpdated" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldChange"
            }
          },
          "previousVersion" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "ChangeEvent" : {
        "required" : [ "entityId", "entityType", "eventType", "timestamp" ],
        "type" : "object",
        "properties" : {
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "currentVersion" : {
            "type" : "number",
            "format" : "double"
          },
          "entity" : {
            "type" : "object"
          },
          "entityFullyQualifiedName" : {
            "type" : "string"
          },
          "entityId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "entityType" : {
            "type" : "string"
          },
          "eventType" : {
            "type" : "string",
            "enum" : [ "entityCreated", "entityUpdated", "entitySoftDeleted", "entityDeleted", "created", "claimed", "approved", "declined", "delegate", "completed", "terminated", "overdue" ]
          },
          "previousVersion" : {
            "type" : "number",
            "format" : "double"
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userName" : {
            "type" : "string"
          }
        }
      },
      "ChangePasswordRequest" : {
        "required" : [ "confirmPassword", "newPassword" ],
        "type" : "object",
        "properties" : {
          "confirmPassword" : {
            "type" : "string"
          },
          "newPassword" : {
            "type" : "string"
          },
          "oldPassword" : {
            "type" : "string"
          },
          "requestType" : {
            "type" : "string",
            "enum" : [ "SELF", "USER" ]
          },
          "username" : {
            "type" : "string"
          }
        }
      },
      "Chart" : {
        "required" : [ "id", "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "chartType" : {
            "type" : "string",
            "enum" : [ "Line", "Table", "Bar", "Area", "Pie", "Histogram", "Scatter", "Text", "BoxPlot", "Other" ]
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Superset", "Looker", "Tableau", "Redash", "Metabase", "PowerBI", "PowerBILocal", "Mode", "LuxmsBI", "FineBI", "CustomDashboard", "DomoDashboard", "QuickSight", "QlikSense", "DeltaBI", "Visiology", "SSRS", "Foresight" ]
          },
          "sourceUrl" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageSummary" : {
            "$ref" : "#/components/schemas/UsageDetails"
          },
          "userDescription" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "ChartList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Chart"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "Classification" : {
        "required" : [ "description", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "mutuallyExclusive" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^(?U)[\\w'\\- .&()]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "termCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "ClassificationList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Classification"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "Clusters" : {
        "type" : "object",
        "properties" : {
          "fragment" : {
            "type" : "boolean"
          },
          "skipped" : {
            "type" : "integer",
            "format" : "int32"
          },
          "successful" : {
            "type" : "integer",
            "format" : "int32"
          },
          "total" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "CodeAttributeDefinition" : {
        "required" : [ "schema", "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
        }, {
          "type" : "object",
          "properties" : {
            "schema" : {
              "$ref" : "#/components/schemas/CodeSchema"
            }
          }
        } ]
      },
      "CodeSchema" : {
        "required" : [ "syntax" ],
        "type" : "object",
        "properties" : {
          "syntax" : {
            "type" : "string",
            "enum" : [ "SQL" ]
          }
        }
      },
      "CollectorResult" : {
        "type" : "object",
        "properties" : {
          "fragment" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          },
          "profiledChildren" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CollectorResult"
            }
          },
          "reason" : {
            "type" : "string"
          },
          "time" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "Column" : {
        "required" : [ "dataType", "name" ],
        "type" : "object",
        "properties" : {
          "arrayDataType" : {
            "type" : "string",
            "enum" : [ "NUMBER", "TINYINT", "SMALLINT", "INT", "BIGINT", "BYTEINT", "BYTES", "FLOAT", "DOUBLE", "DECIMAL", "NUMERIC", "TIMESTAMP", "TIMESTAMPZ", "TIME", "DATE", "DATETIME", "INTERVAL", "STRING", "MEDIUMTEXT", "TEXT", "CHAR", "LONG", "VARCHAR", "BOOLEAN", "BINARY", "VARBINARY", "ARRAY", "BLOB", "LONGBLOB", "MEDIUMBLOB", "MAP", "STRUCT", "UNION", "SET", "GEOGRAPHY", "ENUM", "JSON", "UUID", "VARIANT", "GEOMETRY", "BYTEA", "AGGREGATEFUNCTION", "ERROR", "FIXED", "RECORD", "NULL", "SUPER", "HLLSKETCH", "PG_LSN", "PG_SNAPSHOT", "TSQUERY", "TXID_SNAPSHOT", "XML", "MACADDR", "TSVECTOR", "UNKNOWN", "CIDR", "INET", "CLOB", "ROWID", "LOWCARDINALITY", "YEAR", "POINT", "POLYGON", "TUPLE", "SPATIAL", "TABLE", "NTEXT", "IMAGE", "IPV4", "IPV6", "DATETIMERANGE" ]
          },
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Column"
            }
          },
          "constraint" : {
            "type" : "string",
            "enum" : [ "NULL", "NOT_NULL", "UNIQUE", "PRIMARY_KEY" ]
          },
          "customMetrics" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomMetric"
            }
          },
          "dataLength" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataType" : {
            "type" : "string",
            "enum" : [ "NUMBER", "TINYINT", "SMALLINT", "INT", "BIGINT", "BYTEINT", "BYTES", "FLOAT", "DOUBLE", "DECIMAL", "NUMERIC", "TIMESTAMP", "TIMESTAMPZ", "TIME", "DATE", "DATETIME", "INTERVAL", "STRING", "MEDIUMTEXT", "TEXT", "CHAR", "LONG", "VARCHAR", "BOOLEAN", "BINARY", "VARBINARY", "ARRAY", "BLOB", "LONGBLOB", "MEDIUMBLOB", "MAP", "STRUCT", "UNION", "SET", "GEOGRAPHY", "ENUM", "JSON", "UUID", "VARIANT", "GEOMETRY", "BYTEA", "AGGREGATEFUNCTION", "ERROR", "FIXED", "RECORD", "NULL", "SUPER", "HLLSKETCH", "PG_LSN", "PG_SNAPSHOT", "TSQUERY", "TXID_SNAPSHOT", "XML", "MACADDR", "TSVECTOR", "UNKNOWN", "CIDR", "INET", "CLOB", "ROWID", "LOWCARDINALITY", "YEAR", "POINT", "POLYGON", "TUPLE", "SPATIAL", "TABLE", "NTEXT", "IMAGE", "IPV4", "IPV6", "DATETIMERANGE" ]
          },
          "dataTypeDisplay" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "jsonSchema" : {
            "type" : "string"
          },
          "name" : {
            "maxLength" : 256,
            "minLength" : 1,
            "pattern" : "^((?!::).)*$",
            "type" : "string"
          },
          "ordinalPosition" : {
            "type" : "integer",
            "format" : "int32"
          },
          "precision" : {
            "type" : "integer",
            "format" : "int32"
          },
          "profile" : {
            "$ref" : "#/components/schemas/ColumnProfile"
          },
          "scale" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "userDescription" : {
            "type" : "string"
          }
        }
      },
      "ColumnJoin" : {
        "type" : "object",
        "properties" : {
          "columnName" : {
            "maxLength" : 256,
            "minLength" : 1,
            "pattern" : "^((?!::).)*$",
            "type" : "string"
          },
          "joinedWith" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JoinedWith"
            }
          }
        }
      },
      "ColumnLineage" : {
        "type" : "object",
        "properties" : {
          "fromColumns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "function" : {
            "type" : "string"
          },
          "toColumn" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          }
        }
      },
      "ColumnProfile" : {
        "required" : [ "name", "timestamp" ],
        "type" : "object",
        "properties" : {
          "customMetricsProfile" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomMetricProfile"
            }
          },
          "distinctCount" : {
            "type" : "number",
            "format" : "double"
          },
          "distinctProportion" : {
            "type" : "number",
            "format" : "double"
          },
          "duplicateCount" : {
            "type" : "number",
            "format" : "double"
          },
          "firstQuartile" : {
            "type" : "number",
            "format" : "double"
          },
          "histogram" : {
            "$ref" : "#/components/schemas/Histogram"
          },
          "interQuartileRange" : {
            "type" : "number",
            "format" : "double"
          },
          "max" : {
            "type" : "object"
          },
          "maxLength" : {
            "type" : "number",
            "format" : "double"
          },
          "mean" : {
            "type" : "number",
            "format" : "double"
          },
          "median" : {
            "type" : "number",
            "format" : "double"
          },
          "medianLength" : {
            "type" : "number",
            "format" : "double"
          },
          "min" : {
            "type" : "object"
          },
          "minLength" : {
            "type" : "number",
            "format" : "double"
          },
          "missingCount" : {
            "type" : "number",
            "format" : "double"
          },
          "missingPercentage" : {
            "type" : "number",
            "format" : "double"
          },
          "name" : {
            "type" : "string"
          },
          "nonParametricSkew" : {
            "type" : "number",
            "format" : "double"
          },
          "nullCount" : {
            "type" : "number",
            "format" : "double"
          },
          "nullProportion" : {
            "type" : "number",
            "format" : "double"
          },
          "stddev" : {
            "type" : "number",
            "format" : "double"
          },
          "stringPatternAnalysis" : {
            "$ref" : "#/components/schemas/StringPatternAnalysis"
          },
          "sum" : {
            "type" : "number",
            "format" : "double"
          },
          "textualDataHistogram" : {
            "$ref" : "#/components/schemas/TextualDataHistogram"
          },
          "thirdQuartile" : {
            "type" : "number",
            "format" : "double"
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "top" : {
            "$ref" : "#/components/schemas/Top"
          },
          "uniqueCount" : {
            "type" : "number",
            "format" : "double"
          },
          "uniqueProportion" : {
            "type" : "number",
            "format" : "double"
          },
          "validCount" : {
            "type" : "number",
            "format" : "double"
          },
          "valuesCount" : {
            "type" : "number",
            "format" : "double"
          },
          "valuesPercentage" : {
            "type" : "number",
            "format" : "double"
          },
          "variance" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "ColumnProfileList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ColumnProfile"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ColumnProfilerConfig" : {
        "type" : "object",
        "properties" : {
          "columnName" : {
            "type" : "string"
          },
          "metrics" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "CompleteWorkflowUserTaskParams" : {
        "required" : [ "approved", "comment" ],
        "type" : "object",
        "properties" : {
          "approved" : {
            "type" : "boolean"
          },
          "comment" : {
            "type" : "string"
          }
        }
      },
      "Condition" : {
        "required" : [ "parameters", "type" ],
        "type" : "object",
        "properties" : {
          "parameters" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "alwaysTrue", "attributeEquals", "refersTo", "refersToOneOf", "schemaEmbeddedEnum", "compound" ]
          }
        }
      },
      "ConditionAttributeDto" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          }
        }
      },
      "ConditionFunctionDto" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "paramTypes" : {
            "type" : "object"
          }
        }
      },
      "ConditionOperatorDto" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          }
        }
      },
      "Container" : {
        "required" : [ "id", "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "dataModel" : {
            "$ref" : "#/components/schemas/ContainerDataModel"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "fileFormats" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "zip", "gz", "zstd", "csv", "tsv", "json", "parquet", "avro" ]
            }
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^((?!::).)*$",
            "type" : "string"
          },
          "numberOfObjects" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parent" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "prefix" : {
            "type" : "string"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "S3", "CustomStorage" ]
          },
          "size" : {
            "type" : "number",
            "format" : "double"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "userDescription" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "ContainerDataModel" : {
        "required" : [ "columns" ],
        "type" : "object",
        "properties" : {
          "columns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Column"
            }
          },
          "isPartitioned" : {
            "type" : "boolean"
          }
        }
      },
      "ContainerList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Container"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "CreateAdcAdditionDirective" : {
        "required" : [ "adcEntityAddition", "condition", "targetType" ],
        "type" : "object",
        "properties" : {
          "adcEntityAddition" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "condition" : {
            "$ref" : "#/components/schemas/Condition"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "targetType" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "CreateAdcEntityAddition" : {
        "required" : [ "attributes", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "CreateAdcEntityAttribute" : {
        "required" : [ "definition", "isArray", "name", "renderSpec", "required" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "arrayConstraints" : {
            "$ref" : "#/components/schemas/AdcEntityAttributeArrayConstraints"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "definition" : {
            "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "isArray" : {
            "type" : "boolean"
          },
          "keyName" : {
            "maxLength" : 1024,
            "minLength" : 1,
            "pattern" : "^(?U)(?! |\\d+$|.*-$)[\\w()\\[\\]`%+!?#\\\\]+$",
            "type" : "string"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 2,
            "pattern" : "^(?U)(?![-_ ,—])[\\w()\\[\\]`%+!?\"/\\\\][\\w ()\\[\\]_\\-`,%+—!?\"/\\\\]+(?<![-_ ,—])$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "renderSpec" : {
            "$ref" : "#/components/schemas/AdcEntityAttributeComplexRenderSpec"
          },
          "required" : {
            "type" : "boolean"
          }
        }
      },
      "CreateAdcGlossaryTermType" : {
        "required" : [ "description", "displayName", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "reviewers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateAdcRelationship" : {
        "required" : [ "bidirectional", "description", "multipleDestinations", "multipleSources", "name", "pairings" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "attributeKeyName" : {
            "maxLength" : 1024,
            "minLength" : 1,
            "pattern" : "^(?U)(?! |\\d+$|.*-$)[\\w()\\[\\]`%+!?#\\\\]+$",
            "type" : "string"
          },
          "bidirectional" : {
            "type" : "boolean"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "multipleDestinations" : {
            "type" : "boolean"
          },
          "multipleSources" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 2,
            "pattern" : "^(?U)(?![-_ ,—])[\\w()\\[\\]`%+!?\"/\\\\][\\w ()\\[\\]_\\-`,%+—!?\"/\\\\]+(?<![-_ ,—])$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "pairings" : {
            "maxItems" : 2147483647,
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Pairing"
            }
          },
          "reverseAttributeKeyName" : {
            "maxLength" : 1024,
            "minLength" : 1,
            "pattern" : "^(?U)(?! |\\d+$|.*-$)[\\w()\\[\\]`%+!?#\\\\]+$",
            "type" : "string"
          },
          "reverseName" : {
            "maxLength" : 128,
            "minLength" : 2,
            "pattern" : "^(?U)(?![-_ ,—])[\\w()\\[\\]`%+!?\"/\\\\][\\w ()\\[\\]_\\-`,%+—!?\"/\\\\]+(?<![-_ ,—])$",
            "type" : "string"
          }
        }
      },
      "CreateAdcSettings" : {
        "required" : [ "description", "name", "value" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "CreateAdcSubjectArea" : {
        "required" : [ "description", "displayName", "glossary", "name" ],
        "type" : "object",
        "properties" : {
          "adcStewards" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "fullyQualifiedName" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string"
          },
          "glossary" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parent" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          }
        }
      },
      "CreateAdcType" : {
        "required" : [ "category", "description", "name", "schema" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "category" : {
            "type" : "string",
            "enum" : [ "entity", "addition", "full" ]
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "schema" : {
            "$ref" : "#/components/schemas/ObjectNode"
          }
        }
      },
      "CreateAdcUserSettings" : {
        "required" : [ "displayName", "object", "objectType", "owner", "settingReference" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "default" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "maxLength" : 128,
            "minLength" : 1,
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "favorite" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string"
          },
          "object" : {
            "type" : "string"
          },
          "objectType" : {
            "type" : "string",
            "enum" : [ "View", "Global", "NewNotificationFlagForMentions", "NewNotificationFlagForRequests", "NewNotificationFlagForTasks", "Local", "Shared", "FiltersVisibility", "Selected" ]
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "settingReference" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "CreateBot" : {
        "required" : [ "botUser", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "botUser" : {
            "type" : "string"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 64,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w\\-.]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          }
        }
      },
      "CreateChart" : {
        "required" : [ "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "chartType" : {
            "type" : "string",
            "enum" : [ "Line", "Table", "Bar", "Area", "Pie", "Histogram", "Scatter", "Text", "BoxPlot", "Other" ]
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "service" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "sourceUrl" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateClassification" : {
        "required" : [ "description", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "mutuallyExclusive" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^(?U)[\\w'\\- .&()]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          }
        }
      },
      "CreateContainer" : {
        "required" : [ "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataModel" : {
            "$ref" : "#/components/schemas/ContainerDataModel"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "fileFormats" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "zip", "gz", "zstd", "csv", "tsv", "json", "parquet", "avro" ]
            }
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^((?!::).)*$",
            "type" : "string"
          },
          "numberOfObjects" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parent" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "prefix" : {
            "type" : "string"
          },
          "service" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "size" : {
            "type" : "number",
            "format" : "double"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateCustomMetric" : {
        "required" : [ "columnName", "expression", "name" ],
        "type" : "object",
        "properties" : {
          "columnName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "expression" : {
            "type" : "string"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          }
        }
      },
      "CreateDashboard" : {
        "required" : [ "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "charts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dashboardType" : {
            "type" : "string",
            "enum" : [ "Dashboard", "Report" ]
          },
          "dataModels" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "project" : {
            "type" : "string"
          },
          "service" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "sourceUrl" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateDashboardDataModel" : {
        "required" : [ "columns", "dataModelType", "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "columns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Column"
            }
          },
          "dataModelType" : {
            "type" : "string",
            "enum" : [ "TableauDataModel", "SupersetDataModel", "MetabaseDataModel", "LookMlView", "LookMlExplore", "FineBIDataModel", "PowerBIDataModel", "PowerBILocalDataModel", "QlikSenseDataModel", "DeltaBIDataModel", "LuxmsBIDataModel", "VisiologyDataModel", "SSRSDataModel", "ForesightDataModel" ]
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "project" : {
            "type" : "string"
          },
          "service" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Superset", "Looker", "Tableau", "Redash", "Metabase", "PowerBI", "PowerBILocal", "Mode", "LuxmsBI", "FineBI", "CustomDashboard", "DomoDashboard", "QuickSight", "QlikSense", "DeltaBI", "Visiology", "SSRS", "Foresight" ]
          },
          "sql" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateDashboardService" : {
        "required" : [ "connection", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "connection" : {
            "$ref" : "#/components/schemas/DashboardConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Superset", "Looker", "Tableau", "Redash", "Metabase", "PowerBI", "PowerBILocal", "Mode", "LuxmsBI", "FineBI", "CustomDashboard", "DomoDashboard", "QuickSight", "QlikSense", "DeltaBI", "Visiology", "SSRS", "Foresight" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateDataProduct" : {
        "required" : [ "description", "domain", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "experts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "extension" : {
            "type" : "object"
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "CreateDatabase" : {
        "required" : [ "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "default" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^((?!::).)*$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "retentionPeriod" : {
            "type" : "string"
          },
          "service" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateDatabaseSchema" : {
        "required" : [ "database", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "database" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^((?!::).)*$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "retentionPeriod" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateDatabaseService" : {
        "required" : [ "connection", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "connection" : {
            "$ref" : "#/components/schemas/DatabaseConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "BigQuery", "Mysql", "Redshift", "Snowflake", "Postgres", "Mssql", "Oracle", "Athena", "Hive", "Impala", "Presto", "Trino", "Vertica", "Glue", "MariaDB", "Druid", "Db2", "Clickhouse", "Databricks", "AzureSQL", "DynamoDB", "SingleStore", "SQLite", "DeltaLake", "Salesforce", "PinotDB", "Datalake", "Greenplum", "DomoDatabase", "QueryLog", "CustomDatabase", "Dbt", "SapHana", "MongoDB", "ImportExportDB", "QlikSenseQvd", "SapBW", "Picodata", "Platform1C" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateDomain" : {
        "required" : [ "description", "domainType", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "domainType" : {
            "type" : "string",
            "enum" : [ "Source-aligned", "Consumer-aligned", "Aggregate" ]
          },
          "experts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "extension" : {
            "type" : "object"
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parent" : {
            "type" : "string"
          }
        }
      },
      "CreateEventPublisherJob" : {
        "type" : "object",
        "properties" : {
          "afterCursor" : {
            "type" : "string"
          },
          "batchSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "entities" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "string"
          },
          "publisherType" : {
            "type" : "string",
            "enum" : [ "elasticSearch", "kafka" ]
          },
          "recreateIndex" : {
            "type" : "boolean"
          },
          "runMode" : {
            "type" : "string",
            "enum" : [ "stream", "batch" ]
          },
          "searchIndexMappingLanguage" : {
            "type" : "string",
            "enum" : [ "EN", "JP", "ZH" ]
          }
        }
      },
      "CreateEventSubscription" : {
        "required" : [ "alertType", "name", "subscriptionType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "alertType" : {
            "type" : "string",
            "enum" : [ "ChangeEvent", "DataInsightReport", "Task/Conversation/Announcement" ]
          },
          "batchSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "extension" : {
            "type" : "object"
          },
          "filteringRules" : {
            "$ref" : "#/components/schemas/FilteringRules"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "readTimeout" : {
            "type" : "integer",
            "format" : "int32"
          },
          "subscriptionConfig" : {
            "type" : "object"
          },
          "subscriptionType" : {
            "type" : "string",
            "enum" : [ "GenericWebhook", "SlackWebhook", "MsTeamsWebhook", "GChatWebhook", "Email", "ActivityFeed", "DataInsight" ]
          },
          "timeout" : {
            "type" : "integer",
            "format" : "int32"
          },
          "trigger" : {
            "$ref" : "#/components/schemas/TriggerConfig"
          }
        }
      },
      "CreateGlossary" : {
        "required" : [ "description", "displayName", "name" ],
        "type" : "object",
        "properties" : {
          "adcStewards" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "mutuallyExclusive" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "reviewers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateGlossaryTerm" : {
        "required" : [ "adcGlossaryTermType", "description", "displayName", "glossary", "name", "owner", "primarySubjectArea" ],
        "type" : "object",
        "properties" : {
          "adcAntonymTerms" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "adcGlossaryTermType" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "adcStewards" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "adcSynonymTerms" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "additionalSubjectAreas" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "glossary" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "mutuallyExclusive" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parent" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "primarySubjectArea" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "relatedTerms" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "reviewers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateGlossaryTermWorkflowConfig" : {
        "required" : [ "displayName", "name", "workflowScenario" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "taskConfigs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaskConfig"
            }
          },
          "triggers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "workflowScenario" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "CreateGlossaryTermWorkflowTrigger" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "adcGlossaryTermType" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "adcSubjectArea" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "glossary" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "triggerEvent" : {
            "type" : "string",
            "enum" : [ "create", "update", "delete", "import" ]
          }
        }
      },
      "CreateLogicalTestCases" : {
        "required" : [ "testCaseIds", "testSuiteId" ],
        "type" : "object",
        "properties" : {
          "testCaseIds" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          },
          "testSuiteId" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "CreateMessagingService" : {
        "required" : [ "connection", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "connection" : {
            "$ref" : "#/components/schemas/MessagingConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Kafka", "Redpanda", "Kinesis", "RabbitMQ", "CustomMessaging" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateMetadataService" : {
        "required" : [ "connection", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "connection" : {
            "$ref" : "#/components/schemas/MetadataConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Amundsen", "MetadataES", "OpenMetadata", "Atlas" ]
          }
        }
      },
      "CreateMlModel" : {
        "required" : [ "algorithm", "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "algorithm" : {
            "type" : "string"
          },
          "dashboard" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "mlFeatures" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MlFeature"
            }
          },
          "mlHyperParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MlHyperParameter"
            }
          },
          "mlStore" : {
            "$ref" : "#/components/schemas/MlStore"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "server" : {
            "type" : "string",
            "format" : "uri"
          },
          "service" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "target" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          }
        }
      },
      "CreateMlModelService" : {
        "required" : [ "connection", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "connection" : {
            "$ref" : "#/components/schemas/MlModelConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Mlflow", "Sklearn", "CustomMlModel", "SageMaker" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreatePersonalToken" : {
        "required" : [ "JWTTokenExpiry", "tokenName" ],
        "type" : "object",
        "properties" : {
          "JWTTokenExpiry" : {
            "type" : "string",
            "enum" : [ "OneHour", "1", "7", "30", "60", "90", "Unlimited" ]
          },
          "tokenName" : {
            "type" : "string"
          }
        }
      },
      "CreatePipeline" : {
        "required" : [ "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "concurrency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^((?!::).)*$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "pipelineLocation" : {
            "type" : "string"
          },
          "scheduleInterval" : {
            "type" : "string"
          },
          "service" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "sourceUrl" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "tasks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Task"
            }
          }
        }
      },
      "CreatePipelineService" : {
        "required" : [ "connection", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "connection" : {
            "$ref" : "#/components/schemas/PipelineConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "scheduleInterval" : {
            "type" : "string"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Airflow", "GluePipeline", "Airbyte", "Fivetran", "Dagster", "Nifi", "DomoPipeline", "CustomPipeline", "DatabricksPipeline", "Spline" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreatePolicy" : {
        "required" : [ "name", "rules" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "extension" : {
            "type" : "object"
          },
          "location" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "rules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Rule"
            }
          }
        }
      },
      "CreatePolitic" : {
        "required" : [ "effect", "name", "operations", "politicType", "resources" ],
        "type" : "object",
        "properties" : {
          "condition" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "effect" : {
            "type" : "string",
            "enum" : [ "Allow", "Deny" ]
          },
          "enabled" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "operations" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Create", "Read", "Delete", "Restore", "Update", "Publish", "Follow", "SetGlobalDefaultGlossary", "DoNotAuthorizeMe" ]
            }
          },
          "politicType" : {
            "type" : "string",
            "enum" : [ "Method", "Entity" ]
          },
          "resources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceInfoDTO"
            }
          },
          "value" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "CreateQuery" : {
        "required" : [ "query" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "duration" : {
            "type" : "number",
            "format" : "double"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "query" : {
            "type" : "string"
          },
          "queryDate" : {
            "type" : "integer",
            "format" : "int64"
          },
          "queryUsedIn" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "users" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "CreateRole" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "policies" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "politics" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "CreateStorageService" : {
        "required" : [ "connection", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "connection" : {
            "$ref" : "#/components/schemas/StorageConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "S3", "CustomStorage" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateStoredProcedure" : {
        "required" : [ "name", "storedProcedureCode" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "databaseSchema" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "sourceUrl" : {
            "type" : "string"
          },
          "storedProcedureCode" : {
            "$ref" : "#/components/schemas/StoredProcedureCode"
          },
          "storedProcedureType" : {
            "type" : "string",
            "enum" : [ "StoredProcedure", "StoredPackage", "UDF" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "CreateTable" : {
        "required" : [ "columns", "databaseSchema", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "columns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Column"
            }
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "databaseSchema" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 256,
            "minLength" : 1,
            "pattern" : "^((?!::).)*$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "retentionPeriod" : {
            "type" : "string"
          },
          "sourceUrl" : {
            "type" : "string"
          },
          "tableConstraints" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TableConstraint"
            }
          },
          "tablePartition" : {
            "$ref" : "#/components/schemas/TablePartition"
          },
          "tableProfilerConfig" : {
            "$ref" : "#/components/schemas/TableProfilerConfig"
          },
          "tableType" : {
            "type" : "string",
            "enum" : [ "Regular", "External", "View", "SecureView", "MaterializedView", "Iceberg", "Local", "Partitioned", "Foreign", "Transient", "IOBJ", "ADSO", "RSDS", "Catalog", "AccountingRegister", "AccumulationRegister", "CalculationRegister", "ChartOfAccounts", "ChartOfCalculationTypes", "ChartOfCharacteristicTypes", "DocumentJournal", "Document", "InformationRegister", "ExternalDataSourceTable", "ExternalDataSourceCube", "ExternalDataSourceCubeDimensionTable" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "viewDefinition" : {
            "type" : "string"
          }
        }
      },
      "CreateTableProfile" : {
        "required" : [ "tableProfile" ],
        "type" : "object",
        "properties" : {
          "columnProfile" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ColumnProfile"
            }
          },
          "systemProfile" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SystemProfile"
            }
          },
          "tableProfile" : {
            "$ref" : "#/components/schemas/TableProfile"
          }
        }
      },
      "CreateTag" : {
        "required" : [ "description", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "associatedTags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "classification" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "mutuallyExclusive" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^(?U)[\\w'\\- .&()]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parent" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          }
        }
      },
      "CreateTeam" : {
        "required" : [ "name", "teamType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "children" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "defaultRoles" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "email" : {
            "maxLength" : 127,
            "minLength" : 6,
            "pattern" : "^[\\S.!#$%&’*+/=?^_`{|}~-]+@\\S+\\.\\S+$",
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "isJoinable" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parents" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          },
          "policies" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          },
          "profile" : {
            "$ref" : "#/components/schemas/Profile"
          },
          "teamType" : {
            "type" : "string",
            "enum" : [ "Group", "Department", "Division", "BusinessUnit", "Organization" ]
          },
          "users" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }
      },
      "CreateTestCase" : {
        "required" : [ "entityLink", "name", "testDefinition", "testSuite" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "entityLink" : {
            "pattern" : "^(?U)<#E::\\w+::[\\w'\\- .&/:+\"\\\\()$#%]+>$",
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parameterValues" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestCaseParameterValue"
            }
          },
          "testDefinition" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "testSuite" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          }
        }
      },
      "CreateTestDefinition" : {
        "required" : [ "description", "entityType", "name", "testPlatforms" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "entityType" : {
            "type" : "string",
            "enum" : [ "TABLE", "COLUMN" ]
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parameterDefinition" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestCaseParameter"
            }
          },
          "supportedDataTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "NUMBER", "TINYINT", "SMALLINT", "INT", "BIGINT", "BYTEINT", "BYTES", "FLOAT", "DOUBLE", "DECIMAL", "NUMERIC", "TIMESTAMP", "TIMESTAMPZ", "TIME", "DATE", "DATETIME", "INTERVAL", "STRING", "MEDIUMTEXT", "TEXT", "CHAR", "LONG", "VARCHAR", "BOOLEAN", "BINARY", "VARBINARY", "ARRAY", "BLOB", "LONGBLOB", "MEDIUMBLOB", "MAP", "STRUCT", "UNION", "SET", "GEOGRAPHY", "ENUM", "JSON", "UUID", "VARIANT", "GEOMETRY", "BYTEA", "AGGREGATEFUNCTION", "ERROR", "FIXED", "RECORD", "NULL", "SUPER", "HLLSKETCH", "PG_LSN", "PG_SNAPSHOT", "TSQUERY", "TXID_SNAPSHOT", "XML", "MACADDR", "TSVECTOR", "UNKNOWN", "CIDR", "INET", "CLOB", "ROWID", "LOWCARDINALITY", "YEAR", "POINT", "POLYGON", "TUPLE", "SPATIAL", "TABLE", "NTEXT", "IMAGE", "IPV4", "IPV6", "DATETIMERANGE" ]
            }
          },
          "testPlatforms" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "OpenMetadata", "GreatExpectations", "DBT", "Deequ", "Soda", "Other" ]
            }
          }
        }
      },
      "CreateTestSuite" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "executableEntityReference" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "CreateTopic" : {
        "required" : [ "name", "partitions", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "cleanupPolicies" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "delete", "compact" ]
            }
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "maximumMessageSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "messageSchema" : {
            "$ref" : "#/components/schemas/MessageSchema"
          },
          "minimumInSyncReplicas" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "partitions" : {
            "type" : "integer",
            "format" : "int32"
          },
          "replicationFactor" : {
            "type" : "integer",
            "format" : "int32"
          },
          "retentionSize" : {
            "type" : "number",
            "format" : "double"
          },
          "retentionTime" : {
            "type" : "number",
            "format" : "double"
          },
          "service" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "topicConfig" : {
            "$ref" : "#/components/schemas/TopicConfig"
          }
        }
      },
      "CreateType" : {
        "required" : [ "description", "name", "nameSpace", "schema" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "category" : {
            "type" : "string",
            "enum" : [ "field", "entity" ]
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "name" : {
            "pattern" : "^(?U)[\\w]+$",
            "type" : "string"
          },
          "nameSpace" : {
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "schema" : {
            "type" : "string"
          }
        }
      },
      "CreateUser" : {
        "required" : [ "email", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "authenticationMechanism" : {
            "$ref" : "#/components/schemas/AuthenticationMechanism"
          },
          "botName" : {
            "type" : "string"
          },
          "confirmPassword" : {
            "type" : "string"
          },
          "createPasswordType" : {
            "type" : "string",
            "enum" : [ "ADMIN_CREATE", "USER_CREATE" ]
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "email" : {
            "maxLength" : 127,
            "minLength" : 6,
            "pattern" : "^[\\S.!#$%&’*+/=?^_`{|}~-]+@\\S+\\.\\S+$",
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "isAdmin" : {
            "type" : "boolean"
          },
          "isBot" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 64,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w\\-.]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "password" : {
            "type" : "string"
          },
          "profile" : {
            "$ref" : "#/components/schemas/Profile"
          },
          "roles" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          },
          "teams" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          },
          "timezone" : {
            "type" : "string"
          }
        }
      },
      "CsvImportResult" : {
        "type" : "object",
        "properties" : {
          "abortReason" : {
            "type" : "string"
          },
          "dryRun" : {
            "type" : "boolean"
          },
          "importResultsCsv" : {
            "type" : "string"
          },
          "numberOfRowsFailed" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfRowsPassed" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfRowsProcessed" : {
            "type" : "integer",
            "format" : "int32"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "success", "failure", "aborted", "partialSuccess" ]
          }
        }
      },
      "CustomMetric" : {
        "required" : [ "columnName", "expression", "name" ],
        "type" : "object",
        "properties" : {
          "columnName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "expression" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          }
        }
      },
      "CustomMetricProfile" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "CustomProperty" : {
        "required" : [ "description", "name", "propertyType" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "name" : {
            "pattern" : "^(?U)[\\w]+$",
            "type" : "string"
          },
          "propertyType" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "DailyCount" : {
        "required" : [ "count", "date" ],
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int32"
          },
          "date" : {
            "type" : "string"
          }
        }
      },
      "Dashboard" : {
        "required" : [ "id", "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "charts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "dashboardType" : {
            "type" : "string",
            "enum" : [ "Dashboard", "Report" ]
          },
          "dataModels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "project" : {
            "type" : "string"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Superset", "Looker", "Tableau", "Redash", "Metabase", "PowerBI", "PowerBILocal", "Mode", "LuxmsBI", "FineBI", "CustomDashboard", "DomoDashboard", "QuickSight", "QlikSense", "DeltaBI", "Visiology", "SSRS", "Foresight" ]
          },
          "sourceUrl" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageSummary" : {
            "$ref" : "#/components/schemas/UsageDetails"
          },
          "userDescription" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "DashboardConnection" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "object"
          }
        }
      },
      "DashboardDataModel" : {
        "required" : [ "columns", "dataModelType", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "columns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Column"
            }
          },
          "dataModelType" : {
            "type" : "string",
            "enum" : [ "TableauDataModel", "SupersetDataModel", "MetabaseDataModel", "LookMlView", "LookMlExplore", "FineBIDataModel", "PowerBIDataModel", "PowerBILocalDataModel", "QlikSenseDataModel", "DeltaBIDataModel", "LuxmsBIDataModel", "VisiologyDataModel", "SSRSDataModel", "ForesightDataModel" ]
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "project" : {
            "type" : "string"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Superset", "Looker", "Tableau", "Redash", "Metabase", "PowerBI", "PowerBILocal", "Mode", "LuxmsBI", "FineBI", "CustomDashboard", "DomoDashboard", "QuickSight", "QlikSense", "DeltaBI", "Visiology", "SSRS", "Foresight" ]
          },
          "sql" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "userDescription" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "DashboardDataModelList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardDataModel"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "DashboardList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Dashboard"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "DashboardResponse" : {
        "required" : [ "id", "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "charts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcUserDescriptionEntityReference"
            }
          },
          "dashboardType" : {
            "type" : "string",
            "enum" : [ "Dashboard", "Report" ]
          },
          "dataModels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "project" : {
            "type" : "string"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Superset", "Looker", "Tableau", "Redash", "Metabase", "PowerBI", "PowerBILocal", "Mode", "LuxmsBI", "FineBI", "CustomDashboard", "DomoDashboard", "QuickSight", "QlikSense", "DeltaBI", "Visiology", "SSRS", "Foresight" ]
          },
          "sourceUrl" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageSummary" : {
            "$ref" : "#/components/schemas/UsageDetails"
          },
          "userDescription" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "DashboardService" : {
        "required" : [ "id", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "connection" : {
            "$ref" : "#/components/schemas/DashboardConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "pipelines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Superset", "Looker", "Tableau", "Redash", "Metabase", "PowerBI", "PowerBILocal", "Mode", "LuxmsBI", "FineBI", "CustomDashboard", "DomoDashboard", "QuickSight", "QlikSense", "DeltaBI", "Visiology", "SSRS", "Foresight" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "testConnectionResult" : {
            "$ref" : "#/components/schemas/TestConnectionResult"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "DashboardServiceList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "DataModel" : {
        "required" : [ "modelType", "sql" ],
        "type" : "object",
        "properties" : {
          "columns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Column"
            }
          },
          "description" : {
            "type" : "string"
          },
          "generatedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modelType" : {
            "type" : "string",
            "enum" : [ "DBT" ]
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "path" : {
            "type" : "string"
          },
          "rawSql" : {
            "type" : "string"
          },
          "sql" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "upstream" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "DataProduct" : {
        "required" : [ "description", "domain", "id", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "experts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "DataProductList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DataProduct"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "Database" : {
        "required" : [ "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "databaseSchemas" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "default" : {
            "type" : "boolean"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "location" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^((?!::).)*$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "retentionPeriod" : {
            "type" : "string"
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "BigQuery", "Mysql", "Redshift", "Snowflake", "Postgres", "Mssql", "Oracle", "Athena", "Hive", "Impala", "Presto", "Trino", "Vertica", "Glue", "MariaDB", "Druid", "Db2", "Clickhouse", "Databricks", "AzureSQL", "DynamoDB", "SingleStore", "SQLite", "DeltaLake", "Salesforce", "PinotDB", "Datalake", "Greenplum", "DomoDatabase", "QueryLog", "CustomDatabase", "Dbt", "SapHana", "MongoDB", "ImportExportDB", "QlikSenseQvd", "SapBW", "Picodata", "Platform1C" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageSummary" : {
            "$ref" : "#/components/schemas/UsageDetails"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "DatabaseConnection" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "object"
          }
        }
      },
      "DatabaseList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Database"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "DatabaseSchema" : {
        "required" : [ "database", "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "database" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^((?!::).)*$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "retentionPeriod" : {
            "type" : "string"
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "BigQuery", "Mysql", "Redshift", "Snowflake", "Postgres", "Mssql", "Oracle", "Athena", "Hive", "Impala", "Presto", "Trino", "Vertica", "Glue", "MariaDB", "Druid", "Db2", "Clickhouse", "Databricks", "AzureSQL", "DynamoDB", "SingleStore", "SQLite", "DeltaLake", "Salesforce", "PinotDB", "Datalake", "Greenplum", "DomoDatabase", "QueryLog", "CustomDatabase", "Dbt", "SapHana", "MongoDB", "ImportExportDB", "QlikSenseQvd", "SapBW", "Picodata", "Platform1C" ]
          },
          "tables" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageSummary" : {
            "$ref" : "#/components/schemas/UsageDetails"
          },
          "userDescription" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "DatabaseSchemaList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DatabaseSchema"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "DatabaseService" : {
        "required" : [ "id", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "connection" : {
            "$ref" : "#/components/schemas/DatabaseConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "pipelines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "BigQuery", "Mysql", "Redshift", "Snowflake", "Postgres", "Mssql", "Oracle", "Athena", "Hive", "Impala", "Presto", "Trino", "Vertica", "Glue", "MariaDB", "Druid", "Db2", "Clickhouse", "Databricks", "AzureSQL", "DynamoDB", "SingleStore", "SQLite", "DeltaLake", "Salesforce", "PinotDB", "Datalake", "Greenplum", "DomoDatabase", "QueryLog", "CustomDatabase", "Dbt", "SapHana", "MongoDB", "ImportExportDB", "QlikSenseQvd", "SapBW", "Picodata", "Platform1C" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "testConnectionResult" : {
            "$ref" : "#/components/schemas/TestConnectionResult"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "DatabaseServiceList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DatabaseService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "DateAttributeDefinition" : {
        "required" : [ "schema", "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
        }, {
          "type" : "object",
          "properties" : {
            "schema" : {
              "$ref" : "#/components/schemas/Schema__1"
            }
          }
        } ]
      },
      "DiffEntity" : {
        "type" : "object",
        "properties" : {
          "attributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DiffItem"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/DiffMetadata"
          }
        }
      },
      "DiffItem" : {
        "type" : "object",
        "properties" : {
          "added" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "attributePath" : {
            "type" : "string"
          },
          "deleted" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "unchanged" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "DiffMetadata" : {
        "type" : "object",
        "properties" : {
          "objectType" : {
            "type" : "string"
          }
        }
      },
      "DocumentField" : {
        "type" : "object",
        "properties" : {
          "ignoredValues" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "ignoredValuesWriter" : {
            "$ref" : "#/components/schemas/ToXContentFragment"
          },
          "name" : {
            "type" : "string"
          },
          "validValuesWriter" : {
            "$ref" : "#/components/schemas/ToXContentFragment"
          },
          "value" : {
            "type" : "object"
          },
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "Domain" : {
        "required" : [ "description", "domainType", "id", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "domainType" : {
            "type" : "string",
            "enum" : [ "Source-aligned", "Consumer-aligned", "Aggregate" ]
          },
          "experts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parent" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "DomainList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Domain"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "Edge" : {
        "required" : [ "fromEntity", "toEntity" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "fromEntity" : {
            "type" : "string",
            "format" : "uuid"
          },
          "lineageDetails" : {
            "$ref" : "#/components/schemas/LineageDetails"
          },
          "toEntity" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "EmailRequest" : {
        "required" : [ "email" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "maxLength" : 127,
            "minLength" : 6,
            "pattern" : "^[\\S.!#$%&’*+/=?^_`{|}~-]+@\\S+\\.\\S+$",
            "type" : "string"
          }
        }
      },
      "EntitiesEdge" : {
        "required" : [ "fromEntity", "toEntity" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "fromEntity" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "lineageDetails" : {
            "$ref" : "#/components/schemas/LineageDetails"
          },
          "toEntity" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "EntityHistory" : {
        "required" : [ "entityType", "versions" ],
        "type" : "object",
        "properties" : {
          "entityType" : {
            "type" : "string"
          },
          "versions" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "EntityInterface" : {
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "EntityLineage" : {
        "required" : [ "entity" ],
        "type" : "object",
        "properties" : {
          "downstreamEdges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Edge"
            }
          },
          "entity" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "nodes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "upstreamEdges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Edge"
            }
          }
        }
      },
      "EntityMetadata" : {
        "type" : "object",
        "properties" : {
          "additionVersions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "attributeVersions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "entityTypeName" : {
            "type" : "string"
          },
          "entityTypeVersion" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "EntityReference" : {
        "required" : [ "id", "type" ],
        "type" : "object",
        "properties" : {
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "fullyQualifiedName" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string"
          },
          "payload" : {
            "$ref" : "#/components/schemas/AdcEntityReferencePayload"
          },
          "type" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "EntityUsage" : {
        "required" : [ "entity", "usage" ],
        "type" : "object",
        "properties" : {
          "entity" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "usage" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UsageDetails"
            }
          }
        }
      },
      "EntityUserTaskResponse" : {
        "required" : [ "lastComment", "workflowUserTask", "workflowUserTaskCreatedOrDelegatedAt" ],
        "type" : "object",
        "properties" : {
          "entities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "lastComment" : {
            "type" : "string"
          },
          "workflowInstanceInitiator" : {
            "$ref" : "#/components/schemas/User"
          },
          "workflowUserTask" : {
            "$ref" : "#/components/schemas/WorkflowUserTask"
          },
          "workflowUserTaskCreatedOrDelegatedAt" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "EnumAttributeDefinition" : {
        "required" : [ "schema", "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
        }, {
          "type" : "object",
          "properties" : {
            "schema" : {
              "$ref" : "#/components/schemas/Schema__2"
            }
          }
        } ]
      },
      "EventFilterRule" : {
        "required" : [ "condition", "effect" ],
        "type" : "object",
        "properties" : {
          "condition" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "effect" : {
            "type" : "string",
            "enum" : [ "include", "exclude" ]
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "EventList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChangeEvent"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "EventSubscription" : {
        "required" : [ "alertType", "id", "name", "subscriptionType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "alertType" : {
            "type" : "string",
            "enum" : [ "ChangeEvent", "DataInsightReport", "Task/Conversation/Announcement" ]
          },
          "batchSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "extension" : {
            "type" : "object"
          },
          "filteringRules" : {
            "$ref" : "#/components/schemas/FilteringRules"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "readTimeout" : {
            "type" : "integer",
            "format" : "int32"
          },
          "statusDetails" : {
            "$ref" : "#/components/schemas/SubscriptionStatus"
          },
          "subscriptionConfig" : {
            "type" : "object"
          },
          "subscriptionType" : {
            "type" : "string",
            "enum" : [ "GenericWebhook", "SlackWebhook", "MsTeamsWebhook", "GChatWebhook", "Email", "ActivityFeed", "DataInsight" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "timeout" : {
            "type" : "integer",
            "format" : "int32"
          },
          "trigger" : {
            "$ref" : "#/components/schemas/TriggerConfig"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "EventSubscriptionList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EventSubscription"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "Explanation" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Explanation"
            }
          },
          "match" : {
            "type" : "boolean"
          },
          "value" : {
            "type" : "number"
          }
        }
      },
      "ExportingImportResultProcessDto" : {
        "required" : [ "description", "displayName", "id", "name", "status" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "entityType" : {
            "type" : "string",
            "enum" : [ "glossaryTerm", "glossary", "adcSubjectArea", "lineage" ]
          },
          "errors" : {
            "type" : "array",
            "properties" : {
              "empty" : {
                "type" : "boolean"
              },
              "messages" : {
                "type" : "string"
              }
            },
            "items" : {
              "$ref" : "#/components/schemas/AdcError"
            }
          },
          "extension" : {
            "type" : "object"
          },
          "fileFormat" : {
            "type" : "string",
            "enum" : [ "csv", "xlsx" ]
          },
          "fileName" : {
            "maxLength" : 2147483647,
            "minLength" : 1,
            "type" : "string"
          },
          "finishedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "importingProcessId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "startedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "pending", "canceled", "paused", "processing", "finished", "failed" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "ExtensionVersions" : {
        "type" : "object",
        "properties" : {
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "Field" : {
        "required" : [ "dataType", "name" ],
        "type" : "object",
        "properties" : {
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Field"
            }
          },
          "dataType" : {
            "type" : "string",
            "enum" : [ "RECORD", "NULL", "BOOLEAN", "INT", "LONG", "BYTES", "FLOAT", "DOUBLE", "TIMESTAMP", "TIMESTAMPZ", "TIME", "DATE", "STRING", "ARRAY", "MAP", "ENUM", "UNION", "FIXED", "ERROR", "UNKNOWN" ]
          },
          "dataTypeDisplay" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "userDescription" : {
            "type" : "string"
          }
        }
      },
      "FieldChange" : {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "newValue" : {
            "type" : "object"
          },
          "oldValue" : {
            "type" : "object"
          }
        }
      },
      "FieldComparatorSource" : {
        "type" : "object"
      },
      "Filter" : {
        "required" : [ "field" ],
        "type" : "object",
        "properties" : {
          "field" : {
            "type" : "string",
            "enum" : [ "name", "subType", "attributeKey" ]
          },
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "FilteringRules" : {
        "required" : [ "resources" ],
        "type" : "object",
        "properties" : {
          "resources" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "rules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EventFilterRule"
            }
          }
        }
      },
      "FormDataContentDisposition" : {
        "type" : "object",
        "properties" : {
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "fileName" : {
            "type" : "string"
          },
          "modificationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "name" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "readDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "size" : {
            "type" : "integer",
            "format" : "int64"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "Function" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "examples" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "input" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "paramAdditionalContext" : {
            "$ref" : "#/components/schemas/ParamAdditionalContext"
          },
          "parameterInputType" : {
            "type" : "string",
            "enum" : [ "NotRequired", "AllIndexElasticSearch", "SpecificIndexElasticSearch", "ReadFromParamContext" ]
          }
        }
      },
      "GenerateTokenRequest" : {
        "required" : [ "JWTTokenExpiry" ],
        "type" : "object",
        "properties" : {
          "JWTTokenExpiry" : {
            "type" : "string",
            "enum" : [ "OneHour", "1", "7", "30", "60", "90", "Unlimited" ]
          }
        }
      },
      "GlobalSearchFiltersRequest" : {
        "required" : [ "page" ],
        "type" : "object",
        "properties" : {
          "caseSensitive" : {
            "type" : "boolean"
          },
          "expression" : {
            "type" : "string"
          },
          "field" : {
            "type" : "string"
          },
          "include" : {
            "type" : "string"
          },
          "page" : {
            "$ref" : "#/components/schemas/Page"
          }
        }
      },
      "GlobalSearchRequest" : {
        "required" : [ "page", "sort" ],
        "type" : "object",
        "properties" : {
          "expression" : {
            "type" : "string"
          },
          "page" : {
            "$ref" : "#/components/schemas/Page"
          },
          "sort" : {
            "$ref" : "#/components/schemas/Sort"
          }
        }
      },
      "Glossary" : {
        "required" : [ "description", "displayName", "id", "name" ],
        "type" : "object",
        "properties" : {
          "adcStewards" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "isFollower" : {
            "type" : "boolean"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "mutuallyExclusive" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "reviewers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "termCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "GlossaryList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Glossary"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "GlossaryTerm" : {
        "required" : [ "adcGlossaryTermType", "description", "displayName", "glossary", "id", "name", "owner", "primarySubjectArea" ],
        "type" : "object",
        "properties" : {
          "adcAntonymTerms" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "adcGlossaryTermType" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "adcStewards" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "adcSynonymTerms" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "additionalSubjectAreas" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "approvedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "createdAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "glossary" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "isFollower" : {
            "type" : "boolean"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "mutuallyExclusive" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parent" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "primarySubjectArea" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "references" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TermReference"
            }
          },
          "relatedTerms" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "reviewers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Draft", "Approved", "Deprecated", "Candidate", "CandidateForDeletion" ]
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "GlossaryTermInfo" : {
        "required" : [ "glossaryDisplayName", "glossaryTermTypeDisplayName" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityReferencePayload"
        }, {
          "type" : "object",
          "properties" : {
            "glossaryDisplayName" : {
              "type" : "string"
            },
            "glossaryTermTypeDisplayName" : {
              "type" : "string"
            }
          }
        } ]
      },
      "GlossaryTermList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GlossaryTerm"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "GlossaryTermWorkflowConfig" : {
        "required" : [ "enabled", "id", "name", "workflowScenario" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "default" : {
            "type" : "boolean"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "taskConfigs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaskConfig"
            }
          },
          "triggers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          },
          "workflowScenario" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "GlossaryTermWorkflowConfigList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GlossaryTermWorkflowConfig"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "GlossaryTermWorkflowConfigResponse" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "adcGlossaryTermType" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "adcSubjectAreas" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "displayName" : {
            "type" : "string"
          },
          "enable" : {
            "type" : "boolean"
          },
          "glossaries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "isDefault" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "type" : "string"
          },
          "triggers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "workflowScenario" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "GlossaryTermWorkflowTrigger" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "adcGlossaryTermType" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "adcSubjectArea" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "glossary" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 500,
            "minLength" : 0,
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "triggerEvent" : {
            "type" : "string",
            "enum" : [ "create", "update", "delete", "import" ]
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "GlossaryTermWorkflowTriggerList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GlossaryTermWorkflowTrigger"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "GroupApprovalResponse" : {
        "required" : [ "errors" ],
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcEntityWithErrors"
            }
          }
        }
      },
      "Gsa" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "is_glossary" : {
            "type" : "boolean"
          }
        }
      },
      "HighlightField" : {
        "type" : "object",
        "properties" : {
          "fragment" : {
            "type" : "boolean"
          },
          "fragments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Text"
            }
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Histogram" : {
        "type" : "object",
        "properties" : {
          "boundaries" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "frequencies" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "Hit" : {
        "required" : [ "entityAsMap", "id", "score" ],
        "type" : "object",
        "properties" : {
          "entityAsMap" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "score" : {
            "type" : "number",
            "format" : "float"
          }
        }
      },
      "ImageList" : {
        "type" : "object",
        "properties" : {
          "image" : {
            "type" : "string",
            "format" : "uri"
          },
          "image192" : {
            "type" : "string",
            "format" : "uri"
          },
          "image24" : {
            "type" : "string",
            "format" : "uri"
          },
          "image32" : {
            "type" : "string",
            "format" : "uri"
          },
          "image48" : {
            "type" : "string",
            "format" : "uri"
          },
          "image512" : {
            "type" : "string",
            "format" : "uri"
          },
          "image72" : {
            "type" : "string",
            "format" : "uri"
          }
        }
      },
      "ImportingResult" : {
        "type" : "object",
        "properties" : {
          "additionalColumns" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "entity" : {
            "$ref" : "#/components/schemas/EntityInterface"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcErrorResponse"
            }
          },
          "itemNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "created", "updated", "deleted", "error" ]
          }
        }
      },
      "IncrementAttributeDefinition" : {
        "required" : [ "schema", "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
        }, {
          "type" : "object",
          "properties" : {
            "schema" : {
              "$ref" : "#/components/schemas/IncrementSchema"
            }
          }
        } ]
      },
      "IncrementSchema" : {
        "required" : [ "isEditablePostfix", "isEditablePrefix", "isEditableValue", "isUnique", "minValueWidth", "postfix", "prefix", "startValue" ],
        "type" : "object",
        "properties" : {
          "isEditablePostfix" : {
            "type" : "boolean"
          },
          "isEditablePrefix" : {
            "type" : "boolean"
          },
          "isEditableValue" : {
            "type" : "boolean"
          },
          "isUnique" : {
            "type" : "boolean"
          },
          "minValueWidth" : {
            "type" : "integer",
            "format" : "int32"
          },
          "postfix" : {
            "type" : "string"
          },
          "prefix" : {
            "type" : "string"
          },
          "startValue" : {
            "type" : "integer",
            "format" : "int32"
          },
          "useAs" : {
            "type" : "string",
            "enum" : [ "name", "displayName", "other" ]
          }
        }
      },
      "Index" : {
        "type" : "object",
        "properties" : {
          "fragment" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          },
          "uuid" : {
            "type" : "string"
          }
        }
      },
      "IndexSorter" : {
        "type" : "object",
        "properties" : {
          "providerName" : {
            "type" : "string"
          }
        }
      },
      "JWTAuthMechanism" : {
        "required" : [ "JWTToken", "JWTTokenExpiry" ],
        "type" : "object",
        "properties" : {
          "JWTToken" : {
            "type" : "string"
          },
          "JWTTokenExpiresAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "JWTTokenExpiry" : {
            "type" : "string",
            "enum" : [ "OneHour", "1", "7", "30", "60", "90", "Unlimited" ]
          }
        }
      },
      "JoinedWith" : {
        "required" : [ "fullyQualifiedName", "joinCount" ],
        "type" : "object",
        "properties" : {
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "joinCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "JsonEntity" : {
        "type" : "object"
      },
      "JsonNode" : {
        "type" : "object"
      },
      "JwtResponse" : {
        "type" : "object",
        "properties" : {
          "accessToken" : {
            "type" : "string"
          },
          "expiryDuration" : {
            "type" : "integer",
            "format" : "int64"
          },
          "refreshToken" : {
            "type" : "string"
          },
          "tokenType" : {
            "type" : "string"
          }
        }
      },
      "LineageDetails" : {
        "type" : "object",
        "properties" : {
          "columnsLineage" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ColumnLineage"
            }
          },
          "createSourceType" : {
            "type" : "string",
            "enum" : [ "Manual", "Import", "Automated" ]
          },
          "createdAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdBy" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "description" : {
            "type" : "string"
          },
          "pipeline" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "sqlQuery" : {
            "type" : "string"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "LinkAttributeDefinition" : {
        "required" : [ "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
        } ]
      },
      "LoginRequest" : {
        "required" : [ "email", "password" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        }
      },
      "LogoutRequest" : {
        "required" : [ "token" ],
        "type" : "object",
        "properties" : {
          "logoutTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "refreshToken" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          }
        }
      },
      "MarkdownAttributeDefinition" : {
        "required" : [ "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
        }, {
          "type" : "object",
          "properties" : {
            "schema" : {
              "$ref" : "#/components/schemas/Schema__3"
            }
          }
        } ]
      },
      "MathFormulaAttributeDefinition" : {
        "required" : [ "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
        } ]
      },
      "MessageSchema" : {
        "type" : "object",
        "properties" : {
          "schemaFields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Field"
            }
          },
          "schemaText" : {
            "type" : "string"
          },
          "schemaType" : {
            "type" : "string",
            "enum" : [ "Avro", "Protobuf", "JSON", "Other", "None" ]
          }
        }
      },
      "MessagingConnection" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "object"
          }
        }
      },
      "MessagingService" : {
        "required" : [ "id", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "connection" : {
            "$ref" : "#/components/schemas/MessagingConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "pipelines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Kafka", "Redpanda", "Kinesis", "RabbitMQ", "CustomMessaging" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "testConnectionResult" : {
            "$ref" : "#/components/schemas/TestConnectionResult"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "MessagingServiceList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MessagingService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "MetadataConnection" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "object"
          }
        }
      },
      "MetadataService" : {
        "required" : [ "id", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "connection" : {
            "$ref" : "#/components/schemas/MetadataConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "pipelines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Amundsen", "MetadataES", "OpenMetadata", "Atlas" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "testConnectionResult" : {
            "$ref" : "#/components/schemas/TestConnectionResult"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "MetadataServiceList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MetadataService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "Metrics" : {
        "required" : [ "id", "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageSummary" : {
            "$ref" : "#/components/schemas/UsageDetails"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "MetricsList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Metrics"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "MiConfig" : {
        "type" : "object",
        "properties" : {
          "inputDataItemKey" : {
            "type" : "string"
          },
          "loopCardinalityKey" : {
            "type" : "string"
          },
          "loopDataInputKey" : {
            "type" : "string"
          },
          "outputDataItemKey" : {
            "type" : "string"
          }
        }
      },
      "MiConfig__1" : {
        "type" : "object",
        "properties" : {
          "conditionKey" : {
            "type" : "string"
          },
          "inputDataItemKey" : {
            "type" : "string"
          },
          "loopCardinalityKey" : {
            "type" : "string"
          },
          "loopDataInputKey" : {
            "type" : "string"
          },
          "outputDataItemKey" : {
            "type" : "string"
          }
        }
      },
      "MlFeature" : {
        "type" : "object",
        "properties" : {
          "dataType" : {
            "type" : "string",
            "enum" : [ "numerical", "categorical" ]
          },
          "description" : {
            "type" : "string"
          },
          "featureAlgorithm" : {
            "type" : "string"
          },
          "featureSources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MlFeatureSource"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "userDescription" : {
            "type" : "string"
          }
        }
      },
      "MlFeatureSource" : {
        "type" : "object",
        "properties" : {
          "dataSource" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "dataType" : {
            "type" : "string",
            "enum" : [ "integer", "number", "string", "array", "date", "timestamp", "object", "boolean" ]
          },
          "description" : {
            "type" : "string"
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          }
        }
      },
      "MlHyperParameter" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "MlModel" : {
        "required" : [ "algorithm", "id", "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "algorithm" : {
            "type" : "string"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dashboard" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "mlFeatures" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MlFeature"
            }
          },
          "mlHyperParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MlHyperParameter"
            }
          },
          "mlStore" : {
            "$ref" : "#/components/schemas/MlStore"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "server" : {
            "type" : "string",
            "format" : "uri"
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Mlflow", "Sklearn", "CustomMlModel", "SageMaker" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "target" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageSummary" : {
            "$ref" : "#/components/schemas/UsageDetails"
          },
          "userDescription" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "MlModelConnection" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "object"
          }
        }
      },
      "MlModelList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MlModel"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "MlModelService" : {
        "required" : [ "id", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "connection" : {
            "$ref" : "#/components/schemas/MlModelConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "pipelines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Mlflow", "Sklearn", "CustomMlModel", "SageMaker" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "testConnectionResult" : {
            "$ref" : "#/components/schemas/TestConnectionResult"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "MlModelServiceList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MlModelService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "MlStore" : {
        "type" : "object",
        "properties" : {
          "imageRepository" : {
            "type" : "string",
            "format" : "uri"
          },
          "storage" : {
            "type" : "string",
            "format" : "uri"
          }
        }
      },
      "NestedIdentity" : {
        "type" : "object",
        "properties" : {
          "child" : {
            "$ref" : "#/components/schemas/NestedIdentity"
          },
          "field" : {
            "$ref" : "#/components/schemas/Text"
          },
          "fragment" : {
            "type" : "boolean"
          },
          "offset" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "NestedRenderSpec" : {
        "required" : [ "key", "renderSpec" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "nestedRenderSpecs" : {
            "maxItems" : 2147483647,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NestedRenderSpec"
            }
          },
          "renderSpec" : {
            "$ref" : "#/components/schemas/AdcEntityAttributeRenderSpec"
          }
        }
      },
      "NotificationConfig" : {
        "required" : [ "roles" ],
        "type" : "object",
        "properties" : {
          "glossaryTermAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "roles" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "initiator", "assignee", "owner", "steward", "subjectAreaOwner", "subjectAreaSteward", "glossaryOwner", "glossarySteward", "subjectAreaAttributes", "glossaryTermAttributes" ]
            }
          },
          "subjectAreaAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          }
        }
      },
      "NumberAttributeDefinition" : {
        "required" : [ "schema", "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
        }, {
          "type" : "object",
          "properties" : {
            "schema" : {
              "$ref" : "#/components/schemas/Schema__4"
            }
          }
        } ]
      },
      "ObjectLock" : {
        "type" : "object",
        "properties" : {
          "object" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "token" : {
            "type" : "string"
          },
          "unlockTime" : {
            "type" : "integer",
            "format" : "int64"
          },
          "user" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "ObjectLocksList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLock"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ObjectNode" : {
        "type" : "object"
      },
      "OpenMetadataServerVersion" : {
        "type" : "object",
        "properties" : {
          "revision" : {
            "type" : "string"
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "version" : {
            "type" : "string"
          }
        }
      },
      "OperationInfoDTO" : {
        "required" : [ "displayName", "name" ],
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string",
            "enum" : [ "Create", "Read", "Delete", "Restore", "Update", "Publish", "Follow", "SetGlobalDefaultGlossary", "DoNotAuthorizeMe" ]
          },
          "subAccess" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubAccess"
            }
          }
        }
      },
      "OriginProcess" : {
        "type" : "object"
      },
      "Page" : {
        "required" : [ "limit", "offset" ],
        "type" : "object",
        "properties" : {
          "limit" : {
            "type" : "integer",
            "format" : "int32"
          },
          "offset" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Paging" : {
        "required" : [ "total" ],
        "type" : "object",
        "properties" : {
          "after" : {
            "type" : "string"
          },
          "before" : {
            "type" : "string"
          },
          "total" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Pairing" : {
        "required" : [ "condition", "destType", "sourceType" ],
        "type" : "object",
        "properties" : {
          "condition" : {
            "$ref" : "#/components/schemas/AdcRelationshipPairingCondition"
          },
          "destType" : {
            "type" : "string"
          },
          "sourceType" : {
            "type" : "string"
          }
        }
      },
      "ParamAdditionalContext" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "PartitionProfilerConfig" : {
        "type" : "object",
        "properties" : {
          "enablePartitioning" : {
            "type" : "boolean"
          },
          "partitionColumnName" : {
            "type" : "string"
          },
          "partitionIntegerRangeEnd" : {
            "type" : "integer",
            "format" : "int32"
          },
          "partitionIntegerRangeStart" : {
            "type" : "integer",
            "format" : "int32"
          },
          "partitionInterval" : {
            "type" : "integer",
            "format" : "int32"
          },
          "partitionIntervalType" : {
            "type" : "string",
            "enum" : [ "TIME-UNIT", "INTEGER-RANGE", "INGESTION-TIME", "COLUMN-VALUE" ]
          },
          "partitionIntervalUnit" : {
            "type" : "string",
            "enum" : [ "YEAR", "MONTH", "DAY", "HOUR" ]
          },
          "partitionValues" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "PasswordResetRequest" : {
        "required" : [ "username" ],
        "type" : "object",
        "properties" : {
          "confirmPassword" : {
            "maxLength" : 16,
            "minLength" : 8,
            "type" : "string"
          },
          "password" : {
            "maxLength" : 16,
            "minLength" : 8,
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          }
        }
      },
      "Permission" : {
        "type" : "object",
        "properties" : {
          "access" : {
            "type" : "string",
            "enum" : [ "deny", "allow", "conditionalDeny", "conditionalAllow", "notAllow" ]
          },
          "operation" : {
            "type" : "string",
            "enum" : [ "All", "Create", "Delete", "ViewAll", "ViewBasic", "ViewUsage", "ViewTests", "ViewQueries", "ViewDataProfile", "ViewSampleData", "EditAll", "EditCustomFields", "EditDataProfile", "EditDescription", "EditDisplayName", "EditLineage", "EditPolicy", "EditOwner", "EditQueries", "EditReviewers", "EditRole", "EditSampleData", "EditStatus", "EditTags", "EditTeams", "EditTier", "EditTests", "EditUsage", "EditUsers" ]
          },
          "policy" : {
            "type" : "string"
          },
          "role" : {
            "type" : "string"
          },
          "rule" : {
            "$ref" : "#/components/schemas/Rule"
          }
        }
      },
      "PersonalAccessToken" : {
        "required" : [ "expiryDate", "token", "userId" ],
        "type" : "object",
        "properties" : {
          "expiryDate" : {
            "type" : "integer",
            "format" : "int64"
          },
          "jwtToken" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string",
            "format" : "uuid"
          },
          "tokenName" : {
            "type" : "string"
          },
          "tokenType" : {
            "type" : "string",
            "enum" : [ "REFRESH_TOKEN", "EMAIL_VERIFICATION", "PASSWORD_RESET", "PERSONAL_ACCESS_TOKEN" ]
          },
          "userId" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "PersonalAccessTokenList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PersonalAccessToken"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "Pipeline" : {
        "required" : [ "id", "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "concurrency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^((?!::).)*$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "pipelineLocation" : {
            "type" : "string"
          },
          "pipelineStatus" : {
            "$ref" : "#/components/schemas/PipelineStatus"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "scheduleInterval" : {
            "type" : "string"
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Airflow", "GluePipeline", "Airbyte", "Fivetran", "Dagster", "Nifi", "DomoPipeline", "CustomPipeline", "DatabricksPipeline", "Spline" ]
          },
          "sourceUrl" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "tasks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Task"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "userDescription" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "PipelineConnection" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "object"
          }
        }
      },
      "PipelineList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Pipeline"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "PipelineService" : {
        "required" : [ "id", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "connection" : {
            "$ref" : "#/components/schemas/PipelineConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "pipelines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Airflow", "GluePipeline", "Airbyte", "Fivetran", "Dagster", "Nifi", "DomoPipeline", "CustomPipeline", "DatabricksPipeline", "Spline" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "testConnectionResult" : {
            "$ref" : "#/components/schemas/TestConnectionResult"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "PipelineServiceList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PipelineService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "PipelineStatus" : {
        "type" : "object",
        "properties" : {
          "executionStatus" : {
            "type" : "string",
            "enum" : [ "Successful", "Failed", "Pending" ]
          },
          "taskStatus" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Status"
            }
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "Policy" : {
        "required" : [ "id", "name", "rules" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "allowDelete" : {
            "type" : "boolean"
          },
          "allowEdit" : {
            "type" : "boolean"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "location" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "roles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "rules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Rule"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "teams" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "PolicyList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Policy"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "PoliticDTO" : {
        "required" : [ "effect", "name", "operations", "politicType", "resources" ],
        "type" : "object",
        "properties" : {
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "condition" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "effect" : {
            "type" : "string",
            "enum" : [ "Allow", "Deny" ]
          },
          "enabled" : {
            "type" : "boolean"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "operations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OperationInfoDTO"
            }
          },
          "politicType" : {
            "$ref" : "#/components/schemas/PoliticTypeInfoDTO"
          },
          "resources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceInfoDTO"
            }
          },
          "roles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "value" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Value"
            }
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "PoliticTypeInfoDTO" : {
        "required" : [ "displayName", "politicType" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "politicType" : {
            "type" : "string",
            "enum" : [ "Method", "Entity" ]
          }
        }
      },
      "ProcessInfoInterface" : {
        "type" : "object"
      },
      "ProcessInfoResultList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProcessInfoInterface"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "Profile" : {
        "type" : "object",
        "properties" : {
          "images" : {
            "$ref" : "#/components/schemas/ImageList"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/SubscriptionConfig"
          }
        }
      },
      "ProfileResult" : {
        "type" : "object",
        "properties" : {
          "debugInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "fragment" : {
            "type" : "boolean"
          },
          "luceneDescription" : {
            "type" : "string"
          },
          "profiledChildren" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProfileResult"
            }
          },
          "queryName" : {
            "type" : "string"
          },
          "time" : {
            "type" : "integer",
            "format" : "int64"
          },
          "timeBreakdown" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "Query" : {
        "required" : [ "name", "query" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "checksum" : {
            "type" : "string"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "duration" : {
            "type" : "number",
            "format" : "double"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "query" : {
            "type" : "string"
          },
          "queryDate" : {
            "type" : "integer",
            "format" : "int64"
          },
          "queryUsedIn" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "QueryList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Query"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "QueryProfileShardResult" : {
        "type" : "object",
        "properties" : {
          "collectorResult" : {
            "$ref" : "#/components/schemas/CollectorResult"
          },
          "fragment" : {
            "type" : "boolean"
          },
          "queryResults" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProfileResult"
            }
          },
          "rewriteTime" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "RecordCountDto" : {
        "required" : [ "currentCount", "displayName", "id" ],
        "type" : "object",
        "properties" : {
          "currentCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "difference" : {
            "type" : "number"
          },
          "displayName" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "RecordCountDtoResultList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RecordCountDto"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ReferenceAttributeDefinition" : {
        "required" : [ "schema", "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
        }, {
          "type" : "object",
          "properties" : {
            "schema" : {
              "$ref" : "#/components/schemas/Schema__5"
            }
          }
        } ]
      },
      "RegistrationRequest" : {
        "required" : [ "email", "firstName", "lastName", "password" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "maxLength" : 127,
            "minLength" : 6,
            "pattern" : "^[\\S.!#$%&’*+/=?^_`{|}~-]+@\\S+\\.\\S+$",
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "password" : {
            "maxLength" : 16,
            "minLength" : 8,
            "type" : "string"
          }
        }
      },
      "RelationshipId" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "ordinal" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Report" : {
        "required" : [ "id", "name", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageSummary" : {
            "$ref" : "#/components/schemas/UsageDetails"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "ReportList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Report"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResourceDescriptor" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "operations" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "All", "Create", "Delete", "ViewAll", "ViewBasic", "ViewUsage", "ViewTests", "ViewQueries", "ViewDataProfile", "ViewSampleData", "EditAll", "EditCustomFields", "EditDataProfile", "EditDescription", "EditDisplayName", "EditLineage", "EditPolicy", "EditOwner", "EditQueries", "EditReviewers", "EditRole", "EditSampleData", "EditStatus", "EditTags", "EditTeams", "EditTier", "EditTests", "EditUsage", "EditUsers" ]
            }
          }
        }
      },
      "ResourceInfoDTO" : {
        "required" : [ "name", "politicType" ],
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "politicType" : {
            "type" : "string",
            "enum" : [ "Method", "Entity" ]
          }
        }
      },
      "ResourcePermission" : {
        "required" : [ "permissions", "resource" ],
        "type" : "object",
        "properties" : {
          "permissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Permission"
            }
          },
          "resource" : {
            "type" : "string"
          }
        }
      },
      "ResourcePermissionList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourcePermission"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "RestoreEntity" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "ResultListAdcAdditionDirective" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcAdditionDirective"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListAdcEntityAddition" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcEntityAddition"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListAdcEntityAttribute" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcEntityAttribute"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListAdcExportingProcess" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcExportingProcess"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListAdcGlossaryTermType" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcGlossaryTermType"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListAdcSubjectArea" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcSubjectArea"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListAdcType" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdcType"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListBot" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Bot"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListChangeEvent" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChangeEvent"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListChart" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Chart"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListClassification" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Classification"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListColumnProfile" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ColumnProfile"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListContainer" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Container"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListDashboard" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Dashboard"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListDashboardDataModel" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardDataModel"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListDashboardService" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListDataProduct" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DataProduct"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListDatabase" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Database"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListDatabaseSchema" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DatabaseSchema"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListDatabaseService" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DatabaseService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListDomain" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Domain"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListEventSubscription" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EventSubscription"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListFunction" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Function"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListGlossary" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Glossary"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListGlossaryTerm" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GlossaryTerm"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListGlossaryTermWorkflowConfig" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GlossaryTermWorkflowConfig"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListGlossaryTermWorkflowConfigResponse" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GlossaryTermWorkflowConfigResponse"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListGlossaryTermWorkflowTrigger" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GlossaryTermWorkflowTrigger"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListJsonEntity" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JsonEntity"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListMessagingService" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MessagingService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListMetadataService" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MetadataService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListMetrics" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Metrics"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListMlModel" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MlModel"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListMlModelService" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MlModelService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListObjectLock" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLock"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListPipeline" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Pipeline"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListPipelineService" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PipelineService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListPipelineStatus" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PipelineStatus"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListPolicy" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Policy"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListPoliticDTO" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PoliticDTO"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListProcessInfoInterface" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProcessInfoInterface"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListQuery" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Query"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListReport" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Report"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListResourceDescriptor" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceDescriptor"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListResourcePermission" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourcePermission"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListRole" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Role"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListStorageService" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StorageService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListStoredProcedure" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StoredProcedure"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListSubscriptionResourceDescriptor" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionResourceDescriptor"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListSystemProfile" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SystemProfile"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListTable" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Table"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListTag" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListTeam" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Team"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListTeamHierarchy" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamHierarchy"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListTestCase" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestCase"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListTestCaseResult" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestCaseResult"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListTestDefinition" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestDefinition"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListTestSuite" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestSuite"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListTopic" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Topic"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListType" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Type"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListTypedEntityDto" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TypedEntityDto"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "ResultListUser" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "RevokePersonalTokenRequest" : {
        "type" : "object",
        "properties" : {
          "tokenIds" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }
      },
      "RevokeTokenRequest" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "Role" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "allowDelete" : {
            "type" : "boolean"
          },
          "allowEdit" : {
            "type" : "boolean"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "policies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "politics" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "teams" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "RoleList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Role"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "Rule" : {
        "required" : [ "effect", "name", "operations", "resources" ],
        "type" : "object",
        "properties" : {
          "condition" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "effect" : {
            "type" : "string",
            "enum" : [ "allow", "deny" ]
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "operations" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "All", "Create", "Delete", "ViewAll", "ViewBasic", "ViewUsage", "ViewTests", "ViewQueries", "ViewDataProfile", "ViewSampleData", "EditAll", "EditCustomFields", "EditDataProfile", "EditDescription", "EditDisplayName", "EditLineage", "EditPolicy", "EditOwner", "EditQueries", "EditReviewers", "EditRole", "EditSampleData", "EditStatus", "EditTags", "EditTeams", "EditTier", "EditTests", "EditUsage", "EditUsers" ]
            }
          },
          "resources" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Schema" : {
        "required" : [ "default" ],
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "boolean"
          }
        }
      },
      "Schema__1" : {
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "string"
          },
          "maxDate" : {
            "type" : "string"
          },
          "minDate" : {
            "type" : "string"
          }
        }
      },
      "Schema__2" : {
        "required" : [ "enum" ],
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "string"
          },
          "enum" : {
            "maxItems" : 2147483647,
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Schema__3" : {
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "string"
          }
        }
      },
      "Schema__4" : {
        "required" : [ "maximum", "minimum", "scale" ],
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "number",
            "format" : "double"
          },
          "maximum" : {
            "type" : "number"
          },
          "minimum" : {
            "type" : "number"
          },
          "scale" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Schema__5" : {
        "required" : [ "relationship" ],
        "type" : "object",
        "properties" : {
          "relationship" : {
            "$ref" : "#/components/schemas/AdcReferenceAttributeRelationshipSchema"
          }
        }
      },
      "Schema__6" : {
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "string"
          },
          "maxLength" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minLength" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pattern" : {
            "type" : "string"
          }
        }
      },
      "Schema__7" : {
        "required" : [ "const" ],
        "type" : "object",
        "properties" : {
          "const" : {
            "type" : "string"
          }
        }
      },
      "SearchHit" : {
        "type" : "object",
        "properties" : {
          "clusterAlias" : {
            "type" : "string"
          },
          "documentFields" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/DocumentField"
            }
          },
          "explanation" : {
            "$ref" : "#/components/schemas/Explanation"
          },
          "fields" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/DocumentField"
            }
          },
          "fragment" : {
            "type" : "boolean"
          },
          "highlightFields" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/HighlightField"
            }
          },
          "id" : {
            "type" : "string"
          },
          "index" : {
            "type" : "string"
          },
          "innerHits" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/SearchHits"
            }
          },
          "matchedQueries" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadataFields" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/DocumentField"
            }
          },
          "nestedIdentity" : {
            "$ref" : "#/components/schemas/NestedIdentity"
          },
          "primaryTerm" : {
            "type" : "integer",
            "format" : "int64"
          },
          "rawSortValues" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "score" : {
            "type" : "number",
            "format" : "float"
          },
          "seqNo" : {
            "type" : "integer",
            "format" : "int64"
          },
          "shard" : {
            "$ref" : "#/components/schemas/SearchShardTarget"
          },
          "sortValues" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "sourceAsMap" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "sourceAsString" : {
            "type" : "string"
          },
          "sourceRef" : {
            "$ref" : "#/components/schemas/BytesReference"
          },
          "type" : {
            "type" : "string"
          },
          "version" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "SearchHits" : {
        "type" : "object",
        "properties" : {
          "collapseField" : {
            "type" : "string"
          },
          "collapseValues" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "fragment" : {
            "type" : "boolean"
          },
          "hits" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SearchHit"
            }
          },
          "maxScore" : {
            "type" : "number",
            "format" : "float"
          },
          "sortFields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SortField"
            }
          },
          "totalHits" : {
            "$ref" : "#/components/schemas/TotalHits"
          }
        }
      },
      "SearchHitsDto" : {
        "required" : [ "hits", "totalHits" ],
        "type" : "object",
        "properties" : {
          "hits" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Hit"
            }
          },
          "totalHits" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "SearchPaginationResponse" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "object"
          },
          "totalHits" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "SearchProfileQueryPhaseResult" : {
        "type" : "object",
        "properties" : {
          "aggregationProfileResults" : {
            "$ref" : "#/components/schemas/AggregationProfileShardResult"
          },
          "queryProfileResults" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QueryProfileShardResult"
            }
          }
        }
      },
      "SearchProfileShardResult" : {
        "type" : "object",
        "properties" : {
          "aggregationProfileResults" : {
            "$ref" : "#/components/schemas/AggregationProfileShardResult"
          },
          "fetchPhase" : {
            "$ref" : "#/components/schemas/ProfileResult"
          },
          "fragment" : {
            "type" : "boolean"
          },
          "queryPhase" : {
            "$ref" : "#/components/schemas/SearchProfileQueryPhaseResult"
          },
          "queryProfileResults" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QueryProfileShardResult"
            }
          }
        }
      },
      "SearchResponse" : {
        "type" : "object",
        "properties" : {
          "aggregations" : {
            "$ref" : "#/components/schemas/Aggregations"
          },
          "clusters" : {
            "$ref" : "#/components/schemas/Clusters"
          },
          "failedShards" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fragment" : {
            "type" : "boolean"
          },
          "hits" : {
            "$ref" : "#/components/schemas/SearchHits"
          },
          "internalResponse" : {
            "$ref" : "#/components/schemas/SearchResponseSections"
          },
          "numReducePhases" : {
            "type" : "integer",
            "format" : "int32"
          },
          "profileResults" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/SearchProfileShardResult"
            }
          },
          "scrollId" : {
            "type" : "string"
          },
          "shardFailures" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ShardSearchFailure"
            }
          },
          "skippedShards" : {
            "type" : "integer",
            "format" : "int32"
          },
          "successfulShards" : {
            "type" : "integer",
            "format" : "int32"
          },
          "suggest" : {
            "$ref" : "#/components/schemas/Suggest"
          },
          "terminatedEarly" : {
            "type" : "boolean"
          },
          "timedOut" : {
            "type" : "boolean"
          },
          "took" : {
            "$ref" : "#/components/schemas/TimeValue"
          },
          "totalShards" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "SearchResponseSections" : {
        "type" : "object",
        "properties" : {
          "fragment" : {
            "type" : "boolean"
          },
          "numReducePhases" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "SearchShardTarget" : {
        "type" : "object",
        "properties" : {
          "clusterAlias" : {
            "type" : "string"
          },
          "fullyQualifiedIndexName" : {
            "type" : "string"
          },
          "index" : {
            "type" : "string"
          },
          "nodeId" : {
            "type" : "string"
          },
          "nodeIdText" : {
            "$ref" : "#/components/schemas/Text"
          },
          "shardId" : {
            "$ref" : "#/components/schemas/ShardId"
          }
        }
      },
      "ServiceTaskDefinition" : {
        "required" : [ "definitionKey", "order", "taskType" ],
        "type" : "object",
        "properties" : {
          "definitionKey" : {
            "type" : "string"
          },
          "definitionName" : {
            "type" : "string"
          },
          "documentation" : {
            "type" : "string"
          },
          "miConfig" : {
            "$ref" : "#/components/schemas/MiConfig"
          },
          "order" : {
            "type" : "integer",
            "format" : "int32"
          },
          "taskType" : {
            "type" : "string",
            "enum" : [ "ServiceTask", "ParallelServiceTask", "SequentialServiceTask" ]
          },
          "variables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "ShardId" : {
        "type" : "object",
        "properties" : {
          "fragment" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "index" : {
            "$ref" : "#/components/schemas/Index"
          },
          "indexName" : {
            "type" : "string"
          }
        }
      },
      "ShardSearchFailure" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "type" : "object",
            "properties" : {
              "localizedMessage" : {
                "type" : "string"
              },
              "message" : {
                "type" : "string"
              },
              "stackTrace" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "classLoaderName" : {
                      "type" : "string"
                    },
                    "moduleName" : {
                      "type" : "string"
                    },
                    "moduleVersion" : {
                      "type" : "string"
                    },
                    "methodName" : {
                      "type" : "string"
                    },
                    "fileName" : {
                      "type" : "string"
                    },
                    "lineNumber" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "className" : {
                      "type" : "string"
                    },
                    "nativeMethod" : {
                      "type" : "boolean"
                    }
                  }
                }
              },
              "suppressed" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "stackTrace" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "classLoaderName" : {
                            "type" : "string"
                          },
                          "moduleName" : {
                            "type" : "string"
                          },
                          "moduleVersion" : {
                            "type" : "string"
                          },
                          "methodName" : {
                            "type" : "string"
                          },
                          "fileName" : {
                            "type" : "string"
                          },
                          "lineNumber" : {
                            "type" : "integer",
                            "format" : "int32"
                          },
                          "className" : {
                            "type" : "string"
                          },
                          "nativeMethod" : {
                            "type" : "boolean"
                          }
                        }
                      }
                    },
                    "message" : {
                      "type" : "string"
                    },
                    "localizedMessage" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "fragment" : {
            "type" : "boolean"
          },
          "localizedMessage" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "stackTrace" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "classLoaderName" : {
                  "type" : "string"
                },
                "moduleName" : {
                  "type" : "string"
                },
                "moduleVersion" : {
                  "type" : "string"
                },
                "methodName" : {
                  "type" : "string"
                },
                "fileName" : {
                  "type" : "string"
                },
                "lineNumber" : {
                  "type" : "integer",
                  "format" : "int32"
                },
                "className" : {
                  "type" : "string"
                },
                "nativeMethod" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "suppressed" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "stackTrace" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "classLoaderName" : {
                        "type" : "string"
                      },
                      "moduleName" : {
                        "type" : "string"
                      },
                      "moduleVersion" : {
                        "type" : "string"
                      },
                      "methodName" : {
                        "type" : "string"
                      },
                      "fileName" : {
                        "type" : "string"
                      },
                      "lineNumber" : {
                        "type" : "integer",
                        "format" : "int32"
                      },
                      "className" : {
                        "type" : "string"
                      },
                      "nativeMethod" : {
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "message" : {
                  "type" : "string"
                },
                "localizedMessage" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      },
      "ShortPoliticInfoDto" : {
        "type" : "object",
        "properties" : {
          "condition" : {
            "type" : "string"
          },
          "resourceInfos" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceInfoDTO"
            }
          }
        }
      },
      "Sort" : {
        "required" : [ "direction", "field" ],
        "type" : "object",
        "properties" : {
          "direction" : {
            "type" : "string",
            "enum" : [ "asc", "desc" ]
          },
          "field" : {
            "type" : "string"
          }
        }
      },
      "SortField" : {
        "type" : "object",
        "properties" : {
          "bytesComparator" : {
            "type" : "object"
          },
          "canUsePoints" : {
            "type" : "boolean"
          },
          "comparatorSource" : {
            "$ref" : "#/components/schemas/FieldComparatorSource"
          },
          "field" : {
            "type" : "string"
          },
          "indexSorter" : {
            "$ref" : "#/components/schemas/IndexSorter"
          },
          "missingValue" : {
            "type" : "object"
          },
          "reverse" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "SCORE", "DOC", "STRING", "INT", "FLOAT", "LONG", "DOUBLE", "CUSTOM", "STRING_VAL", "REWRITEABLE" ]
          }
        }
      },
      "Sort__1" : {
        "required" : [ "direction", "field" ],
        "type" : "object",
        "properties" : {
          "direction" : {
            "type" : "string",
            "enum" : [ "asc", "desc" ]
          },
          "field" : {
            "type" : "string",
            "enum" : [ "name", "subType", "attributeKey" ]
          }
        }
      },
      "StartWorkflowParams" : {
        "required" : [ "comment", "ids" ],
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string"
          },
          "ids" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }
      },
      "Stats" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int64"
          },
          "gsa_fqn" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Status" : {
        "required" : [ "executionStatus", "name" ],
        "type" : "object",
        "properties" : {
          "endTime" : {
            "type" : "integer",
            "format" : "int64"
          },
          "executionStatus" : {
            "type" : "string",
            "enum" : [ "Successful", "Failed", "Pending" ]
          },
          "logLink" : {
            "type" : "string",
            "format" : "uri"
          },
          "name" : {
            "type" : "string"
          },
          "startTime" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "StorageConnection" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "object"
          }
        }
      },
      "StorageService" : {
        "required" : [ "id", "name", "serviceType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "connection" : {
            "$ref" : "#/components/schemas/StorageConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "pipelines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "S3", "CustomStorage" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "testConnectionResult" : {
            "$ref" : "#/components/schemas/TestConnectionResult"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "StorageServiceList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StorageService"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "StoredProcedure" : {
        "required" : [ "id", "name", "storedProcedureCode" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "database" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "databaseSchema" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "BigQuery", "Mysql", "Redshift", "Snowflake", "Postgres", "Mssql", "Oracle", "Athena", "Hive", "Impala", "Presto", "Trino", "Vertica", "Glue", "MariaDB", "Druid", "Db2", "Clickhouse", "Databricks", "AzureSQL", "DynamoDB", "SingleStore", "SQLite", "DeltaLake", "Salesforce", "PinotDB", "Datalake", "Greenplum", "DomoDatabase", "QueryLog", "CustomDatabase", "Dbt", "SapHana", "MongoDB", "ImportExportDB", "QlikSenseQvd", "SapBW", "Picodata", "Platform1C" ]
          },
          "sourceUrl" : {
            "type" : "string"
          },
          "storedProcedureCode" : {
            "$ref" : "#/components/schemas/StoredProcedureCode"
          },
          "storedProcedureType" : {
            "type" : "string",
            "enum" : [ "StoredProcedure", "StoredPackage", "UDF" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "StoredProcedureCode" : {
        "required" : [ "language" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string",
            "enum" : [ "SQL", "Java", "JavaScript", "Python", "External", "Unknown" ]
          }
        }
      },
      "StoredProcedureList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StoredProcedure"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "StringAttributeDefinition" : {
        "required" : [ "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
        }, {
          "type" : "object",
          "properties" : {
            "schema" : {
              "$ref" : "#/components/schemas/Schema__6"
            }
          }
        } ]
      },
      "StringConstAttributeDefinition" : {
        "required" : [ "schema", "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
        }, {
          "type" : "object",
          "properties" : {
            "schema" : {
              "$ref" : "#/components/schemas/Schema__7"
            }
          }
        } ]
      },
      "StringPattern" : {
        "required" : [ "example", "nodes", "percentage", "regex" ],
        "type" : "object",
        "properties" : {
          "example" : {
            "type" : "string"
          },
          "nodes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StringPatternNode"
            }
          },
          "percentage" : {
            "type" : "number",
            "format" : "double"
          },
          "regex" : {
            "type" : "string"
          }
        }
      },
      "StringPatternAnalysis" : {
        "type" : "object",
        "properties" : {
          "patterns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StringPattern"
            }
          }
        }
      },
      "StringPatternNode" : {
        "required" : [ "quantifier", "symbolSet", "symbols" ],
        "type" : "object",
        "properties" : {
          "quantifier" : {
            "type" : "integer",
            "format" : "int32"
          },
          "symbolSet" : {
            "type" : "string",
            "enum" : [ "WORD", "ALPHA", "RU", "RU_LOWER", "RU_UPPER", "EN", "EN_LOWER", "EN_UPPER", "DIGITS", "SYMBOLS", "LITERAL" ]
          },
          "symbols" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SubAccess" : {
        "required" : [ "resource" ],
        "type" : "object",
        "properties" : {
          "resource" : {
            "$ref" : "#/components/schemas/ResourceInfoDTO"
          }
        }
      },
      "SubscriptionConfig" : {
        "type" : "object",
        "properties" : {
          "gChat" : {
            "$ref" : "#/components/schemas/Webhook"
          },
          "generic" : {
            "$ref" : "#/components/schemas/Webhook"
          },
          "msTeams" : {
            "$ref" : "#/components/schemas/Webhook"
          },
          "slack" : {
            "$ref" : "#/components/schemas/Webhook"
          }
        }
      },
      "SubscriptionResourceDescriptor" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "supportedFilters" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "matchAnySource", "matchAnyOwnerName", "matchAnyEntityFqn", "matchAnyEntityId", "matchAnyEventType", "matchTestResult", "matchUpdatedBy", "matchIngestionPipelineState", "matchAnyFieldChange" ]
            }
          }
        }
      },
      "SubscriptionStatus" : {
        "type" : "object",
        "properties" : {
          "lastFailedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastFailedReason" : {
            "type" : "string"
          },
          "lastFailedStatusCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastSuccessfulAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nextAttempt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "disabled", "failed", "retryLimitReached", "awaitingRetry", "active" ]
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "Suggest" : {
        "type" : "object",
        "properties" : {
          "fragment" : {
            "type" : "boolean"
          }
        }
      },
      "SystemProfile" : {
        "type" : "object",
        "properties" : {
          "operation" : {
            "type" : "string",
            "enum" : [ "UPDATE", "INSERT", "DELETE" ]
          },
          "rowsAffected" : {
            "type" : "integer",
            "format" : "int32"
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "SystemProfileList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SystemProfile"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "Table" : {
        "required" : [ "columns", "id", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "columns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Column"
            }
          },
          "dataModel" : {
            "$ref" : "#/components/schemas/DataModel"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "database" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "databaseSchema" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "joins" : {
            "$ref" : "#/components/schemas/TableJoins"
          },
          "location" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 256,
            "minLength" : 1,
            "pattern" : "^((?!::).)*$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "profile" : {
            "$ref" : "#/components/schemas/TableProfile"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "retentionPeriod" : {
            "type" : "string"
          },
          "sampleData" : {
            "$ref" : "#/components/schemas/TableData"
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "BigQuery", "Mysql", "Redshift", "Snowflake", "Postgres", "Mssql", "Oracle", "Athena", "Hive", "Impala", "Presto", "Trino", "Vertica", "Glue", "MariaDB", "Druid", "Db2", "Clickhouse", "Databricks", "AzureSQL", "DynamoDB", "SingleStore", "SQLite", "DeltaLake", "Salesforce", "PinotDB", "Datalake", "Greenplum", "DomoDatabase", "QueryLog", "CustomDatabase", "Dbt", "SapHana", "MongoDB", "ImportExportDB", "QlikSenseQvd", "SapBW", "Picodata", "Platform1C" ]
          },
          "sourceUrl" : {
            "type" : "string"
          },
          "tableConstraints" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TableConstraint"
            }
          },
          "tablePartition" : {
            "$ref" : "#/components/schemas/TablePartition"
          },
          "tableProfilerConfig" : {
            "$ref" : "#/components/schemas/TableProfilerConfig"
          },
          "tableType" : {
            "type" : "string",
            "enum" : [ "Regular", "External", "View", "SecureView", "MaterializedView", "Iceberg", "Local", "Partitioned", "Foreign", "Transient", "IOBJ", "ADSO", "RSDS", "Catalog", "AccountingRegister", "AccumulationRegister", "CalculationRegister", "ChartOfAccounts", "ChartOfCalculationTypes", "ChartOfCharacteristicTypes", "DocumentJournal", "Document", "InformationRegister", "ExternalDataSourceTable", "ExternalDataSourceCube", "ExternalDataSourceCubeDimensionTable" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "testSuite" : {
            "$ref" : "#/components/schemas/TestSuite"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageSummary" : {
            "$ref" : "#/components/schemas/UsageDetails"
          },
          "userDescription" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "viewDefinition" : {
            "type" : "string"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "TableConstraint" : {
        "type" : "object",
        "properties" : {
          "columns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "constraintType" : {
            "type" : "string",
            "enum" : [ "UNIQUE", "PRIMARY_KEY", "FOREIGN_KEY", "SORT_KEY", "DIST_KEY" ]
          },
          "referredColumns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "TableData" : {
        "type" : "object",
        "properties" : {
          "columns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "rows" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        }
      },
      "TableJoins" : {
        "type" : "object",
        "properties" : {
          "columnJoins" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ColumnJoin"
            }
          },
          "dayCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "directTableJoins" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JoinedWith"
            }
          },
          "startDate" : {
            "type" : "string"
          }
        }
      },
      "TableList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Table"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "TablePartition" : {
        "type" : "object",
        "properties" : {
          "columns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "interval" : {
            "type" : "string"
          },
          "intervalType" : {
            "type" : "string",
            "enum" : [ "TIME-UNIT", "INTEGER-RANGE", "INGESTION-TIME", "COLUMN-VALUE", "OTHER" ]
          }
        }
      },
      "TableProfile" : {
        "required" : [ "timestamp" ],
        "type" : "object",
        "properties" : {
          "columnCount" : {
            "type" : "number",
            "format" : "double"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "profileSample" : {
            "type" : "number",
            "format" : "double"
          },
          "profileSampleType" : {
            "type" : "string",
            "enum" : [ "PERCENTAGE", "ROWS" ]
          },
          "rowCount" : {
            "type" : "number",
            "format" : "double"
          },
          "sizeInByte" : {
            "type" : "number",
            "format" : "double"
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "TableProfileList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TableProfile"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "TableProfilerConfig" : {
        "type" : "object",
        "properties" : {
          "excludeColumns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "includeColumns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ColumnProfilerConfig"
            }
          },
          "partitioning" : {
            "$ref" : "#/components/schemas/PartitionProfilerConfig"
          },
          "profileQuery" : {
            "type" : "string"
          },
          "profileSample" : {
            "type" : "number",
            "format" : "double"
          },
          "profileSampleType" : {
            "type" : "string",
            "enum" : [ "PERCENTAGE", "ROWS" ]
          }
        }
      },
      "Tag" : {
        "required" : [ "description", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "classification" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "deprecated" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "mutuallyExclusive" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^(?U)[\\w'\\- .&()]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parent" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "usageCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "TagAttributeDefinition" : {
        "required" : [ "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityAttributeDefinition"
        } ]
      },
      "TagLabel" : {
        "required" : [ "labelType", "source", "state", "tagFQN" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "labelType" : {
            "type" : "string",
            "enum" : [ "Manual", "Propagated", "Automated", "Derived" ]
          },
          "source" : {
            "type" : "string",
            "enum" : [ "Classification", "Glossary" ]
          },
          "state" : {
            "type" : "string",
            "enum" : [ "Suggested", "Confirmed" ]
          },
          "tagFQN" : {
            "maxLength" : 3072,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "TagList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "Task" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "downstreamTasks" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "endDate" : {
            "type" : "string"
          },
          "fullyQualifiedName" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "sourceUrl" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "taskSQL" : {
            "type" : "string"
          },
          "taskType" : {
            "type" : "string"
          },
          "userDescription" : {
            "type" : "string"
          }
        }
      },
      "TaskConfig" : {
        "required" : [ "assigneesConfig", "notificationConfigs", "order", "taskDefinitionKey", "taskName", "timeFrame", "unlimitedTimeFrame" ],
        "type" : "object",
        "properties" : {
          "assigneesConfig" : {
            "$ref" : "#/components/schemas/AssigneesConfig"
          },
          "documentation" : {
            "type" : "string"
          },
          "miConditionValue" : {
            "type" : "integer",
            "format" : "int32"
          },
          "notificationConfigs" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/NotificationConfig"
            }
          },
          "order" : {
            "type" : "integer",
            "format" : "int32"
          },
          "taskDefinitionKey" : {
            "type" : "string"
          },
          "taskName" : {
            "type" : "string"
          },
          "timeFrame" : {
            "type" : "string"
          },
          "unlimitedTimeFrame" : {
            "type" : "boolean"
          },
          "warnAfterTimeFrame" : {
            "type" : "string"
          }
        }
      },
      "Team" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "childrenCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "defaultRoles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "email" : {
            "maxLength" : 127,
            "minLength" : 6,
            "pattern" : "^[\\S.!#$%&’*+/=?^_`{|}~-]+@\\S+\\.\\S+$",
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "inheritedRoles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "isJoinable" : {
            "type" : "boolean"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "owns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "parents" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "policies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "profile" : {
            "$ref" : "#/components/schemas/Profile"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "teamType" : {
            "type" : "string",
            "enum" : [ "Group", "Department", "Division", "BusinessUnit", "Organization" ]
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "userCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "TeamHierarchy" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamHierarchy"
            }
          },
          "displayName" : {
            "type" : "string"
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "isJoinable" : {
            "type" : "boolean"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "teamType" : {
            "type" : "string",
            "enum" : [ "Group", "Department", "Division", "BusinessUnit", "Organization" ]
          }
        }
      },
      "TeamList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Team"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "TermReference" : {
        "type" : "object",
        "properties" : {
          "endpoint" : {
            "type" : "string",
            "format" : "uri"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "TermTypeInCondition" : {
        "required" : [ "termTypeIds", "type" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcRelationshipPairingCondition"
        }, {
          "type" : "object",
          "properties" : {
            "termTypeIds" : {
              "maxItems" : 2147483647,
              "minItems" : 1,
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "uuid"
              }
            }
          }
        } ]
      },
      "TestCase" : {
        "required" : [ "entityLink", "name", "testDefinition", "testSuite" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "entityFQN" : {
            "type" : "string"
          },
          "entityLink" : {
            "pattern" : "^(?U)<#E::\\w+::[\\w'\\- .&/:+\"\\\\()$#%]+>$",
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parameterValues" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestCaseParameterValue"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "testCaseResult" : {
            "$ref" : "#/components/schemas/TestCaseResult"
          },
          "testDefinition" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "testSuite" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "testSuites" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestSuite"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "TestCaseFailureStatus" : {
        "type" : "object",
        "properties" : {
          "testCaseFailureComment" : {
            "type" : "string"
          },
          "testCaseFailureReason" : {
            "type" : "string",
            "enum" : [ "FalsePositive", "MissingData", "Duplicates", "OutOfBounds", "Other" ]
          },
          "testCaseFailureStatusType" : {
            "type" : "string",
            "enum" : [ "Ack", "New", "Resolved" ]
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          }
        }
      },
      "TestCaseList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestCase"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "TestCaseParameter" : {
        "type" : "object",
        "properties" : {
          "dataType" : {
            "type" : "string",
            "enum" : [ "NUMBER", "INT", "FLOAT", "DOUBLE", "DECIMAL", "TIMESTAMP", "TIME", "DATE", "DATETIME", "ARRAY", "MAP", "SET", "STRING", "BOOLEAN" ]
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "optionValues" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "required" : {
            "type" : "boolean"
          }
        }
      },
      "TestCaseParameterValue" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "TestCaseResult" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/AdcEntityReferencePayload"
        }, {
          "type" : "object",
          "properties" : {
            "result" : {
              "$ref" : "#/components/schemas/TestCaseResult"
            }
          }
        } ]
      },
      "TestCaseResultList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestCaseResult"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "TestConnectionResult" : {
        "required" : [ "steps" ],
        "type" : "object",
        "properties" : {
          "lastUpdatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Successful", "Failed", "Running" ]
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestConnectionStepResult"
            }
          }
        }
      },
      "TestConnectionStepResult" : {
        "required" : [ "mandatory", "name", "passed" ],
        "type" : "object",
        "properties" : {
          "errorLog" : {
            "type" : "string"
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "message" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "passed" : {
            "type" : "boolean"
          }
        }
      },
      "TestDefinition" : {
        "required" : [ "description", "name", "testPlatforms" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "entityType" : {
            "type" : "string",
            "enum" : [ "TABLE", "COLUMN" ]
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "parameterDefinition" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestCaseParameter"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "supportedDataTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "NUMBER", "TINYINT", "SMALLINT", "INT", "BIGINT", "BYTEINT", "BYTES", "FLOAT", "DOUBLE", "DECIMAL", "NUMERIC", "TIMESTAMP", "TIMESTAMPZ", "TIME", "DATE", "DATETIME", "INTERVAL", "STRING", "MEDIUMTEXT", "TEXT", "CHAR", "LONG", "VARCHAR", "BOOLEAN", "BINARY", "VARBINARY", "ARRAY", "BLOB", "LONGBLOB", "MEDIUMBLOB", "MAP", "STRUCT", "UNION", "SET", "GEOGRAPHY", "ENUM", "JSON", "UUID", "VARIANT", "GEOMETRY", "BYTEA", "AGGREGATEFUNCTION", "ERROR", "FIXED", "RECORD", "NULL", "SUPER", "HLLSKETCH", "PG_LSN", "PG_SNAPSHOT", "TSQUERY", "TXID_SNAPSHOT", "XML", "MACADDR", "TSVECTOR", "UNKNOWN", "CIDR", "INET", "CLOB", "ROWID", "LOWCARDINALITY", "YEAR", "POINT", "POLYGON", "TUPLE", "SPATIAL", "TABLE", "NTEXT", "IMAGE", "IPV4", "IPV6", "DATETIMERANGE" ]
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "testPlatforms" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "OpenMetadata", "GreatExpectations", "DBT", "Deequ", "Soda", "Other" ]
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "TestDefinitionList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestDefinition"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "TestResultValue" : {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "TestSuite" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "connection" : {
            "$ref" : "#/components/schemas/TestSuiteConnection"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "executable" : {
            "type" : "boolean"
          },
          "executableEntityReference" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "pipelines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "TestSuite" ]
          },
          "summary" : {
            "$ref" : "#/components/schemas/TestSummary"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "testConnectionResult" : {
            "$ref" : "#/components/schemas/TestConnectionResult"
          },
          "tests" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "TestSuiteConnection" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "object"
          }
        }
      },
      "TestSuiteList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestSuite"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "TestSummary" : {
        "type" : "object",
        "properties" : {
          "aborted" : {
            "type" : "integer",
            "format" : "int32"
          },
          "failed" : {
            "type" : "integer",
            "format" : "int32"
          },
          "success" : {
            "type" : "integer",
            "format" : "int32"
          },
          "total" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Text" : {
        "type" : "object",
        "properties" : {
          "fragment" : {
            "type" : "boolean"
          }
        }
      },
      "TextualDataHistogram" : {
        "type" : "object",
        "properties" : {
          "frequencies" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "TimeValue" : {
        "type" : "object",
        "properties" : {
          "days" : {
            "type" : "integer",
            "format" : "int64"
          },
          "daysFrac" : {
            "type" : "number",
            "format" : "double"
          },
          "hours" : {
            "type" : "integer",
            "format" : "int64"
          },
          "hoursFrac" : {
            "type" : "number",
            "format" : "double"
          },
          "micros" : {
            "type" : "integer",
            "format" : "int64"
          },
          "microsFrac" : {
            "type" : "number",
            "format" : "double"
          },
          "millis" : {
            "type" : "integer",
            "format" : "int64"
          },
          "millisFrac" : {
            "type" : "number",
            "format" : "double"
          },
          "minutes" : {
            "type" : "integer",
            "format" : "int64"
          },
          "minutesFrac" : {
            "type" : "number",
            "format" : "double"
          },
          "nanos" : {
            "type" : "integer",
            "format" : "int64"
          },
          "seconds" : {
            "type" : "integer",
            "format" : "int64"
          },
          "secondsFrac" : {
            "type" : "number",
            "format" : "double"
          },
          "stringRep" : {
            "type" : "string"
          }
        }
      },
      "ToXContentFragment" : {
        "type" : "object",
        "properties" : {
          "fragment" : {
            "type" : "boolean"
          }
        }
      },
      "TokenRefreshRequest" : {
        "required" : [ "refreshToken" ],
        "type" : "object",
        "properties" : {
          "refreshToken" : {
            "type" : "string"
          }
        }
      },
      "Top" : {
        "required" : [ "frequency", "value" ],
        "type" : "object",
        "properties" : {
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "Topic" : {
        "required" : [ "id", "name", "partitions", "service" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "cleanupPolicies" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "delete", "compact" ]
            }
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "maximumMessageSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "messageSchema" : {
            "$ref" : "#/components/schemas/MessageSchema"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "minimumInSyncReplicas" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "partitions" : {
            "type" : "integer",
            "format" : "int32"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "replicationFactor" : {
            "type" : "integer",
            "format" : "int32"
          },
          "retentionSize" : {
            "type" : "number",
            "format" : "double"
          },
          "retentionTime" : {
            "type" : "number",
            "format" : "double"
          },
          "sampleData" : {
            "$ref" : "#/components/schemas/TopicSampleData"
          },
          "service" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "Kafka", "Redpanda", "Kinesis", "RabbitMQ", "CustomMessaging" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "topicConfig" : {
            "$ref" : "#/components/schemas/TopicConfig"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "userDescription" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "TopicConfig" : {
        "type" : "object"
      },
      "TopicList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Topic"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "TopicSampleData" : {
        "type" : "object",
        "properties" : {
          "messages" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "TotalHits" : {
        "type" : "object",
        "properties" : {
          "relation" : {
            "type" : "string",
            "enum" : [ "EQUAL_TO", "GREATER_THAN_OR_EQUAL_TO" ]
          },
          "value" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "TriggerConfig" : {
        "required" : [ "triggerType" ],
        "type" : "object",
        "properties" : {
          "cronExpression" : {
            "type" : "string"
          },
          "scheduleInfo" : {
            "type" : "string",
            "enum" : [ "Daily", "Weekly", "Monthly", "Custom" ]
          },
          "triggerType" : {
            "type" : "string",
            "enum" : [ "RealTime", "Scheduled" ]
          }
        }
      },
      "Type" : {
        "required" : [ "description", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "category" : {
            "type" : "string",
            "enum" : [ "field", "entity" ]
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "customProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomProperty"
            }
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "pattern" : "^(?U)[\\w]+$",
            "type" : "string"
          },
          "nameSpace" : {
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "schema" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "TypeList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Type"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "TypedEntityDto" : {
        "required" : [ "entity", "entityType" ],
        "type" : "object",
        "properties" : {
          "entity" : {
            "$ref" : "#/components/schemas/EntityInterface"
          },
          "entityType" : {
            "type" : "string"
          }
        }
      },
      "TypedEntityResultList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TypedEntityDto"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "UsageDetails" : {
        "required" : [ "dailyStats", "date" ],
        "type" : "object",
        "properties" : {
          "dailyStats" : {
            "$ref" : "#/components/schemas/UsageStats"
          },
          "date" : {
            "type" : "string"
          },
          "monthlyStats" : {
            "$ref" : "#/components/schemas/UsageStats"
          },
          "weeklyStats" : {
            "$ref" : "#/components/schemas/UsageStats"
          }
        }
      },
      "UsageStats" : {
        "required" : [ "count" ],
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int32"
          },
          "percentileRank" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "User" : {
        "required" : [ "email", "id", "name" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "authenticationMechanism" : {
            "$ref" : "#/components/schemas/AuthenticationMechanism"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "email" : {
            "maxLength" : 127,
            "minLength" : 6,
            "pattern" : "^[\\S.!#$%&’*+/=?^_`{|}~-]+@\\S+\\.\\S+$",
            "type" : "string"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "follows" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "inheritedRoles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "isAdmin" : {
            "type" : "boolean"
          },
          "isBot" : {
            "type" : "boolean"
          },
          "isEmailVerified" : {
            "type" : "boolean"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 64,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w\\-.]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "owns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "profile" : {
            "$ref" : "#/components/schemas/Profile"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "receivingEmailNotifications" : {
            "type" : "boolean"
          },
          "roles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "teams" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "timezone" : {
            "type" : "string"
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          }
        }
      },
      "UserList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "UserTaskDefinition" : {
        "required" : [ "definitionKey", "definitionName", "order", "taskType" ],
        "type" : "object",
        "properties" : {
          "definitionKey" : {
            "type" : "string"
          },
          "definitionName" : {
            "type" : "string"
          },
          "documentation" : {
            "type" : "string"
          },
          "javaScriptKeys" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "miConfig" : {
            "$ref" : "#/components/schemas/MiConfig__1"
          },
          "order" : {
            "type" : "integer",
            "format" : "int32"
          },
          "taskType" : {
            "type" : "string",
            "enum" : [ "ApprovalUserTask", "ParallelApprovalUserTask", "SequentialApprovalUserTask" ]
          }
        }
      },
      "UserTeamRelatedObjectsRequest" : {
        "required" : [ "id", "page", "sort" ],
        "type" : "object",
        "properties" : {
          "filters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Filter"
            }
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "page" : {
            "$ref" : "#/components/schemas/Page"
          },
          "sort" : {
            "$ref" : "#/components/schemas/Sort__1"
          }
        }
      },
      "Value" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "VoteRequest" : {
        "type" : "object",
        "properties" : {
          "updatedVoteType" : {
            "type" : "string",
            "enum" : [ "votedUp", "votedDown", "unVoted" ]
          }
        }
      },
      "Votes" : {
        "type" : "object",
        "properties" : {
          "downVoters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "downVotes" : {
            "type" : "integer",
            "format" : "int32"
          },
          "upVoters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "upVotes" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Webhook" : {
        "type" : "object",
        "properties" : {
          "endpoint" : {
            "type" : "string",
            "format" : "uri"
          },
          "roles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "secretKey" : {
            "type" : "string"
          },
          "sendToAdmins" : {
            "type" : "boolean"
          },
          "sendToFollowers" : {
            "type" : "boolean"
          },
          "sendToOwners" : {
            "type" : "boolean"
          }
        }
      },
      "WorkflowInstance" : {
        "required" : [ "id", "wmsId" ],
        "type" : "object",
        "properties" : {
          "actionType" : {
            "type" : "string"
          },
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "entities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "extension" : {
            "type" : "object"
          },
          "finishedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "initiator" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "startedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Active", "Suspended", "Terminated", "Completed", "Corrupted" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "variables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          },
          "wmsId" : {
            "type" : "string"
          },
          "wmsInitiatorName" : {
            "type" : "string"
          },
          "wmsKey" : {
            "type" : "string"
          },
          "wmsStatus" : {
            "type" : "string",
            "enum" : [ "Active", "Suspended", "Terminated", "Completed", "Corrupted" ]
          },
          "wmsWorkflowScenarioId" : {
            "type" : "string"
          },
          "workflowScenario" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "WorkflowInstanceList" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WorkflowInstance"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        }
      },
      "WorkflowScenario" : {
        "required" : [ "bpmnData", "description", "id", "name", "wmsScenarioId" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "bpmnData" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "extension" : {
            "type" : "object"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "serviceTaskDefinitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceTaskDefinition"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Active", "Corrupted" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "userTaskDefinitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserTaskDefinition"
            }
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          },
          "wmsScenarioId" : {
            "type" : "string"
          },
          "wmsScenarioKey" : {
            "type" : "string"
          }
        }
      },
      "WorkflowUserTask" : {
        "required" : [ "description", "id", "name", "taskType" ],
        "type" : "object",
        "properties" : {
          "addition" : {
            "$ref" : "#/components/schemas/JsonNode"
          },
          "affectedAttributes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "assignedBy" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "assignees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "changeDescription" : {
            "$ref" : "#/components/schemas/ChangeDescription"
          },
          "claimedTo" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "dataProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "deadline" : {
            "type" : "integer",
            "format" : "int64"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "doer" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "domain" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "error" : {
            "type" : "boolean"
          },
          "extension" : {
            "type" : "object"
          },
          "finishedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "fullyQualifiedName" : {
            "maxLength" : 3072,
            "minLength" : 1,
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "format" : "uri"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/EntityMetadata"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "system", "user" ]
          },
          "role" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "initiator", "owner", "steward", "subjectAreaOwner", "subjectAreaSteward", "glossaryOwner", "glossarySteward", "subjectAreaAttributes", "glossaryTermAttributes" ]
            }
          },
          "startedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Active", "Terminated", "Completed" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagLabel"
            }
          },
          "taskType" : {
            "type" : "string",
            "enum" : [ "ApprovalUserTask", "ParallelApprovalUserTask", "SequentialApprovalUserTask" ]
          },
          "updatedAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "userTaskDefinitionKey" : {
            "type" : "string"
          },
          "userTaskFormKey" : {
            "type" : "string"
          },
          "variables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "version" : {
            "type" : "number",
            "format" : "double"
          },
          "votes" : {
            "$ref" : "#/components/schemas/Votes"
          },
          "warnAfter" : {
            "type" : "integer",
            "format" : "int64"
          },
          "wmsAssigneeId" : {
            "type" : "string"
          },
          "wmsId" : {
            "type" : "string"
          },
          "wmsStatus" : {
            "type" : "string",
            "enum" : [ "Active", "Terminated", "Completed" ]
          },
          "wmsWorkflowDefinitionId" : {
            "type" : "string"
          },
          "wmsWorkflowInstanceId" : {
            "type" : "string"
          },
          "workflowInstance" : {
            "$ref" : "#/components/schemas/EntityReference"
          }
        }
      },
      "WorkflowUserTaskAssignedToMeListRequest" : {
        "required" : [ "createdAtOrder", "deadlineOrder", "initiatorOrder", "statusIn", "statusOrder", "triggerIn", "userId" ],
        "type" : "object",
        "properties" : {
          "createdAtOrder" : {
            "type" : "string",
            "enum" : [ "asc", "desc", "none" ]
          },
          "deadlineOrder" : {
            "type" : "string",
            "enum" : [ "asc", "desc", "none" ]
          },
          "initiatorOrder" : {
            "type" : "string",
            "enum" : [ "asc", "desc", "none" ]
          },
          "limit" : {
            "type" : "integer",
            "format" : "int32"
          },
          "offset" : {
            "type" : "integer",
            "format" : "int32"
          },
          "statusIn" : {
            "maxItems" : 2147483647,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Active", "Terminated", "Completed" ]
            }
          },
          "statusOrder" : {
            "type" : "string",
            "enum" : [ "asc", "desc", "none" ]
          },
          "triggerIn" : {
            "maxItems" : 2147483647,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "create", "update", "delete", "import" ]
            }
          },
          "userId" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "WorkflowUserTaskCreatedByMeListRequest" : {
        "required" : [ "assigneeOrder", "createdAtOrder", "deadlineOrder", "statusIn", "statusOrder", "triggerIn", "userId" ],
        "type" : "object",
        "properties" : {
          "assigneeOrder" : {
            "type" : "string",
            "enum" : [ "asc", "desc", "none" ]
          },
          "createdAtOrder" : {
            "type" : "string",
            "enum" : [ "asc", "desc", "none" ]
          },
          "deadlineOrder" : {
            "type" : "string",
            "enum" : [ "asc", "desc", "none" ]
          },
          "limit" : {
            "type" : "integer",
            "format" : "int32"
          },
          "offset" : {
            "type" : "integer",
            "format" : "int32"
          },
          "statusIn" : {
            "maxItems" : 2147483647,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Active", "Terminated", "Completed" ]
            }
          },
          "statusOrder" : {
            "type" : "string",
            "enum" : [ "asc", "desc", "none" ]
          },
          "triggerIn" : {
            "maxItems" : 2147483647,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "create", "update", "delete", "import" ]
            }
          },
          "userId" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "WorkflowUserTaskDto" : {
        "type" : "object",
        "properties" : {
          "actionType" : {
            "type" : "string"
          },
          "assignee" : {
            "type" : "string"
          },
          "canceled" : {
            "type" : "boolean"
          },
          "deadline" : {
            "type" : "string",
            "format" : "date-time"
          },
          "definitionKey" : {
            "type" : "string"
          },
          "deletedReason" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "doerName" : {
            "type" : "string"
          },
          "finishedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "formKey" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "startedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "userTaskType" : {
            "type" : "string"
          },
          "variables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "workflowInstanceId" : {
            "type" : "string"
          },
          "workflowScenarioId" : {
            "type" : "string"
          }
        }
      },
      "WorkflowUserTaskParams" : {
        "required" : [ "comment" ],
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string"
          }
        }
      },
      "WorkflowUserTaskPersonalView" : {
        "required" : [ "createdAt", "deadline", "displayName", "id", "initiator", "name", "status" ],
        "type" : "object",
        "properties" : {
          "claimedBy" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "createdAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "deadline" : {
            "type" : "integer",
            "format" : "int64"
          },
          "delegatedBy" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "displayName" : {
            "type" : "string"
          },
          "entities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "initiator" : {
            "$ref" : "#/components/schemas/EntityReference"
          },
          "name" : {
            "maxLength" : 128,
            "minLength" : 1,
            "pattern" : "^(?U)[\\w ()\\[\\]_\\-`.,%+—!?'\"/\\\\]+$",
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Active", "Terminated", "Completed" ]
          },
          "trigger" : {
            "type" : "string",
            "enum" : [ "create", "update", "delete", "import" ]
          }
        }
      },
      "WorkflowUserTaskResponse" : {
        "type" : "object",
        "properties" : {
          "assignee" : {
            "type" : "string"
          },
          "deadline" : {
            "type" : "string",
            "format" : "date-time"
          },
          "description" : {
            "type" : "string"
          },
          "entityId" : {
            "type" : "string"
          },
          "entityType" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "userTaskDefinitionKey" : {
            "type" : "string"
          },
          "userTaskFormKey" : {
            "type" : "string"
          },
          "userTaskType" : {
            "type" : "string"
          },
          "variables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "workflowDefinitionId" : {
            "type" : "string"
          },
          "workflowInstanceId" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
